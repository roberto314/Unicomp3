
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08005a61 	.word	0x08005a61
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	08007ae1 	.word	0x08007ae1
 800005c:	08007ab1 	.word	0x08007ab1
 8000060:	08007a81 	.word	0x08007a81
 8000064:	08007a51 	.word	0x08007a51
 8000068:	08007a21 	.word	0x08007a21
 800006c:	08007901 	.word	0x08007901
 8000070:	080078d1 	.word	0x080078d1
 8000074:	080078a1 	.word	0x080078a1
 8000078:	08007871 	.word	0x08007871
 800007c:	08007841 	.word	0x08007841
 8000080:	08007811 	.word	0x08007811
 8000084:	080077e1 	.word	0x080077e1
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080079b1 	.word	0x080079b1
 80000a0:	080002db 	.word	0x080002db
 80000a4:	08006ec1 	.word	0x08006ec1
 80000a8:	080002db 	.word	0x080002db
 80000ac:	08006ee1 	.word	0x08006ee1
 80000b0:	08006ea1 	.word	0x08006ea1
 80000b4:	08006e81 	.word	0x08006e81
 80000b8:	08006ef1 	.word	0x08006ef1
 80000bc:	08007511 	.word	0x08007511
 80000c0:	08007421 	.word	0x08007421
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	08006e61 	.word	0x08006e61
 80000d8:	08006e41 	.word	0x08006e41
 80000dc:	080002db 	.word	0x080002db
 80000e0:	08007931 	.word	0x08007931
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080077b1 	.word	0x080077b1
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	08006f41 	.word	0x08006f41
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	08007781 	.word	0x08007781
 8000124:	08007751 	.word	0x08007751
 8000128:	08007721 	.word	0x08007721
 800012c:	080076f1 	.word	0x080076f1
 8000130:	080076c1 	.word	0x080076c1
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	08006ff1 	.word	0x08006ff1
 8000150:	08007691 	.word	0x08007691
 8000154:	08007661 	.word	0x08007661
 8000158:	08007631 	.word	0x08007631
 800015c:	08006e21 	.word	0x08006e21
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f007 fcbc 	bl	8007ba0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f006 fd02 	bl	8006c30 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f007 fc4e 	bl	8007b10 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f007 fc8c 	bl	8007b90 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f005 fcd2 	bl	8005c30 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f007 bc70 	b.w	8007b80 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	08009010 	.word	0x08009010
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000c88 	.word	0x20000c88
                ldr     r1, =__bss_base__
 80002c0:	20000c88 	.word	0x20000c88
                ldr     r2, =__bss_end__
 80002c4:	200061b0 	.word	0x200061b0
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d014 	str.w	sp, [r1, #20]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	6943      	ldr	r3, [r0, #20]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f005 fbc0 	bl	8005a80 <chThdExit>

08000300 <_zombies>:
_zombies:       b       _zombies
 8000300:	e7fe      	b.n	8000300 <_zombies>

08000302 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000302:	f005 fbc5 	bl	8005a90 <chSchDoReschedule>

08000306 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <_port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr
 8000440:	eba2 0003 	sub.w	r0, r2, r3
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <strcmp>:
 8000448:	7802      	ldrb	r2, [r0, #0]
 800044a:	780b      	ldrb	r3, [r1, #0]
 800044c:	2a01      	cmp	r2, #1
 800044e:	bf28      	it	cs
 8000450:	429a      	cmpcs	r2, r3
 8000452:	d1f5      	bne.n	8000440 <memcpy+0x134>
 8000454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000458:	ea40 0401 	orr.w	r4, r0, r1
 800045c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000460:	f06f 0c00 	mvn.w	ip, #0
 8000464:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000468:	b312      	cbz	r2, 80004b0 <strcmp+0x68>
 800046a:	ea80 0401 	eor.w	r4, r0, r1
 800046e:	f014 0f07 	tst.w	r4, #7
 8000472:	d16a      	bne.n	800054a <strcmp+0x102>
 8000474:	f000 0407 	and.w	r4, r0, #7
 8000478:	f020 0007 	bic.w	r0, r0, #7
 800047c:	f004 0503 	and.w	r5, r4, #3
 8000480:	f021 0107 	bic.w	r1, r1, #7
 8000484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800048c:	f014 0f04 	tst.w	r4, #4
 8000490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000494:	fa0c f405 	lsl.w	r4, ip, r5
 8000498:	ea62 0204 	orn	r2, r2, r4
 800049c:	ea66 0604 	orn	r6, r6, r4
 80004a0:	d00a      	beq.n	80004b8 <strcmp+0x70>
 80004a2:	ea63 0304 	orn	r3, r3, r4
 80004a6:	4662      	mov	r2, ip
 80004a8:	ea67 0704 	orn	r7, r7, r4
 80004ac:	4666      	mov	r6, ip
 80004ae:	e003      	b.n	80004b8 <strcmp+0x70>
 80004b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b8:	fa82 f54c 	uadd8	r5, r2, ip
 80004bc:	ea82 0406 	eor.w	r4, r2, r6
 80004c0:	faa4 f48c 	sel	r4, r4, ip
 80004c4:	bb6c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004c6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ca:	ea83 0507 	eor.w	r5, r3, r7
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	b995      	cbnz	r5, 80004fa <strcmp+0xb2>
 80004d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004dc:	fa82 f54c 	uadd8	r5, r2, ip
 80004e0:	ea82 0406 	eor.w	r4, r2, r6
 80004e4:	faa4 f48c 	sel	r4, r4, ip
 80004e8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ec:	ea83 0507 	eor.w	r5, r3, r7
 80004f0:	faa5 f58c 	sel	r5, r5, ip
 80004f4:	4325      	orrs	r5, r4
 80004f6:	d0db      	beq.n	80004b0 <strcmp+0x68>
 80004f8:	b99c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004fa:	ba2d      	rev	r5, r5
 80004fc:	fab5 f485 	clz	r4, r5
 8000500:	f024 0407 	bic.w	r4, r4, #7
 8000504:	fa27 f104 	lsr.w	r1, r7, r4
 8000508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800050c:	fa23 f304 	lsr.w	r3, r3, r4
 8000510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800051c:	eba0 0001 	sub.w	r0, r0, r1
 8000520:	4770      	bx	lr
 8000522:	ba24      	rev	r4, r4
 8000524:	fab4 f484 	clz	r4, r4
 8000528:	f024 0407 	bic.w	r4, r4, #7
 800052c:	fa26 f104 	lsr.w	r1, r6, r4
 8000530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000534:	fa22 f204 	lsr.w	r2, r2, r4
 8000538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800053c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000544:	eba0 0001 	sub.w	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	f014 0f03 	tst.w	r4, #3
 800054e:	d13c      	bne.n	80005ca <strcmp+0x182>
 8000550:	f010 0403 	ands.w	r4, r0, #3
 8000554:	d128      	bne.n	80005a8 <strcmp+0x160>
 8000556:	f850 2b08 	ldr.w	r2, [r0], #8
 800055a:	f851 3b08 	ldr.w	r3, [r1], #8
 800055e:	fa82 f54c 	uadd8	r5, r2, ip
 8000562:	ea82 0503 	eor.w	r5, r2, r3
 8000566:	faa5 f58c 	sel	r5, r5, ip
 800056a:	b95d      	cbnz	r5, 8000584 <strcmp+0x13c>
 800056c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000574:	fa82 f54c 	uadd8	r5, r2, ip
 8000578:	ea82 0503 	eor.w	r5, r2, r3
 800057c:	faa5 f58c 	sel	r5, r5, ip
 8000580:	2d00      	cmp	r5, #0
 8000582:	d0e8      	beq.n	8000556 <strcmp+0x10e>
 8000584:	ba2d      	rev	r5, r5
 8000586:	fab5 f485 	clz	r4, r5
 800058a:	f024 0407 	bic.w	r4, r4, #7
 800058e:	fa23 f104 	lsr.w	r1, r3, r4
 8000592:	fa22 f204 	lsr.w	r2, r2, r4
 8000596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800059a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005a2:	eba0 0001 	sub.w	r0, r0, r1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005ac:	f020 0003 	bic.w	r0, r0, #3
 80005b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005b4:	f021 0103 	bic.w	r1, r1, #3
 80005b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005bc:	fa0c f404 	lsl.w	r4, ip, r4
 80005c0:	ea62 0204 	orn	r2, r2, r4
 80005c4:	ea63 0304 	orn	r3, r3, r4
 80005c8:	e7c9      	b.n	800055e <strcmp+0x116>
 80005ca:	f010 0403 	ands.w	r4, r0, #3
 80005ce:	d01a      	beq.n	8000606 <strcmp+0x1be>
 80005d0:	eba1 0104 	sub.w	r1, r1, r4
 80005d4:	f020 0003 	bic.w	r0, r0, #3
 80005d8:	07e4      	lsls	r4, r4, #31
 80005da:	f850 2b04 	ldr.w	r2, [r0], #4
 80005de:	d006      	beq.n	80005ee <strcmp+0x1a6>
 80005e0:	d20f      	bcs.n	8000602 <strcmp+0x1ba>
 80005e2:	788b      	ldrb	r3, [r1, #2]
 80005e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	d106      	bne.n	80005fa <strcmp+0x1b2>
 80005ec:	b12b      	cbz	r3, 80005fa <strcmp+0x1b2>
 80005ee:	78cb      	ldrb	r3, [r1, #3]
 80005f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	d100      	bne.n	80005fa <strcmp+0x1b2>
 80005f8:	b91b      	cbnz	r3, 8000602 <strcmp+0x1ba>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000600:	4770      	bx	lr
 8000602:	f101 0104 	add.w	r1, r1, #4
 8000606:	f850 2b04 	ldr.w	r2, [r0], #4
 800060a:	07cc      	lsls	r4, r1, #31
 800060c:	f021 0103 	bic.w	r1, r1, #3
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	d848      	bhi.n	80006a8 <strcmp+0x260>
 8000616:	d224      	bcs.n	8000662 <strcmp+0x21a>
 8000618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800061c:	fa82 f54c 	uadd8	r5, r2, ip
 8000620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000624:	faa5 f58c 	sel	r5, r5, ip
 8000628:	d10a      	bne.n	8000640 <strcmp+0x1f8>
 800062a:	b965      	cbnz	r5, 8000646 <strcmp+0x1fe>
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	ea84 0402 	eor.w	r4, r4, r2
 8000634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000638:	d10e      	bne.n	8000658 <strcmp+0x210>
 800063a:	f850 2b04 	ldr.w	r2, [r0], #4
 800063e:	e7eb      	b.n	8000618 <strcmp+0x1d0>
 8000640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000644:	e055      	b.n	80006f2 <strcmp+0x2aa>
 8000646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800064a:	d14d      	bne.n	80006e8 <strcmp+0x2a0>
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000652:	f1c0 0000 	rsb	r0, r0, #0
 8000656:	4770      	bx	lr
 8000658:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000660:	e047      	b.n	80006f2 <strcmp+0x2aa>
 8000662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000666:	fa82 f54c 	uadd8	r5, r2, ip
 800066a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800066e:	faa5 f58c 	sel	r5, r5, ip
 8000672:	d10a      	bne.n	800068a <strcmp+0x242>
 8000674:	b965      	cbnz	r5, 8000690 <strcmp+0x248>
 8000676:	f851 3b04 	ldr.w	r3, [r1], #4
 800067a:	ea84 0402 	eor.w	r4, r4, r2
 800067e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000682:	d10c      	bne.n	800069e <strcmp+0x256>
 8000684:	f850 2b04 	ldr.w	r2, [r0], #4
 8000688:	e7eb      	b.n	8000662 <strcmp+0x21a>
 800068a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800068e:	e030      	b.n	80006f2 <strcmp+0x2aa>
 8000690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000694:	d128      	bne.n	80006e8 <strcmp+0x2a0>
 8000696:	880b      	ldrh	r3, [r1, #0]
 8000698:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800069c:	e029      	b.n	80006f2 <strcmp+0x2aa>
 800069e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006a6:	e024      	b.n	80006f2 <strcmp+0x2aa>
 80006a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006ac:	fa82 f54c 	uadd8	r5, r2, ip
 80006b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006b4:	faa5 f58c 	sel	r5, r5, ip
 80006b8:	d10a      	bne.n	80006d0 <strcmp+0x288>
 80006ba:	b965      	cbnz	r5, 80006d6 <strcmp+0x28e>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	ea84 0402 	eor.w	r4, r4, r2
 80006c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006c8:	d109      	bne.n	80006de <strcmp+0x296>
 80006ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ce:	e7eb      	b.n	80006a8 <strcmp+0x260>
 80006d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006d4:	e00d      	b.n	80006f2 <strcmp+0x2aa>
 80006d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006da:	d105      	bne.n	80006e8 <strcmp+0x2a0>
 80006dc:	680b      	ldr	r3, [r1, #0]
 80006de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006e6:	e004      	b.n	80006f2 <strcmp+0x2aa>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f0:	4770      	bx	lr
 80006f2:	ba12      	rev	r2, r2
 80006f4:	ba1b      	rev	r3, r3
 80006f6:	fa82 f44c 	uadd8	r4, r2, ip
 80006fa:	ea82 0403 	eor.w	r4, r2, r3
 80006fe:	faa4 f58c 	sel	r5, r4, ip
 8000702:	fab5 f485 	clz	r4, r5
 8000706:	fa02 f204 	lsl.w	r2, r2, r4
 800070a:	fa03 f304 	lsl.w	r3, r3, r4
 800070e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800071a:	4770      	bx	lr
	...

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>

0800081c <__aeabi_uldivmod>:
 800081c:	b953      	cbnz	r3, 8000834 <__aeabi_uldivmod+0x18>
 800081e:	b94a      	cbnz	r2, 8000834 <__aeabi_uldivmod+0x18>
 8000820:	2900      	cmp	r1, #0
 8000822:	bf08      	it	eq
 8000824:	2800      	cmpeq	r0, #0
 8000826:	bf1c      	itt	ne
 8000828:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800082c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000830:	f000 b96c 	b.w	8000b0c <__aeabi_idiv0>
 8000834:	f1ad 0c08 	sub.w	ip, sp, #8
 8000838:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800083c:	f000 f806 	bl	800084c <__udivmoddi4>
 8000840:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr

0800084c <__udivmoddi4>:
 800084c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000850:	9e08      	ldr	r6, [sp, #32]
 8000852:	460d      	mov	r5, r1
 8000854:	4604      	mov	r4, r0
 8000856:	468e      	mov	lr, r1
 8000858:	2b00      	cmp	r3, #0
 800085a:	f040 8082 	bne.w	8000962 <__udivmoddi4+0x116>
 800085e:	428a      	cmp	r2, r1
 8000860:	4617      	mov	r7, r2
 8000862:	d946      	bls.n	80008f2 <__udivmoddi4+0xa6>
 8000864:	fab2 f282 	clz	r2, r2
 8000868:	b14a      	cbz	r2, 800087e <__udivmoddi4+0x32>
 800086a:	f1c2 0120 	rsb	r1, r2, #32
 800086e:	fa05 f302 	lsl.w	r3, r5, r2
 8000872:	fa20 f101 	lsr.w	r1, r0, r1
 8000876:	4097      	lsls	r7, r2
 8000878:	ea41 0e03 	orr.w	lr, r1, r3
 800087c:	4094      	lsls	r4, r2
 800087e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000882:	0c23      	lsrs	r3, r4, #16
 8000884:	fbbe fcf8 	udiv	ip, lr, r8
 8000888:	b2b9      	uxth	r1, r7
 800088a:	fb08 ee1c 	mls	lr, r8, ip, lr
 800088e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000892:	fb0c f001 	mul.w	r0, ip, r1
 8000896:	4298      	cmp	r0, r3
 8000898:	d90a      	bls.n	80008b0 <__udivmoddi4+0x64>
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80008a0:	f080 8116 	bcs.w	8000ad0 <__udivmoddi4+0x284>
 80008a4:	4298      	cmp	r0, r3
 80008a6:	f240 8113 	bls.w	8000ad0 <__udivmoddi4+0x284>
 80008aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80008ae:	443b      	add	r3, r7
 80008b0:	1a1b      	subs	r3, r3, r0
 80008b2:	b2a4      	uxth	r4, r4
 80008b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b8:	fb08 3310 	mls	r3, r8, r0, r3
 80008bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c0:	fb00 f101 	mul.w	r1, r0, r1
 80008c4:	42a1      	cmp	r1, r4
 80008c6:	d909      	bls.n	80008dc <__udivmoddi4+0x90>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008ce:	f080 8101 	bcs.w	8000ad4 <__udivmoddi4+0x288>
 80008d2:	42a1      	cmp	r1, r4
 80008d4:	f240 80fe 	bls.w	8000ad4 <__udivmoddi4+0x288>
 80008d8:	3802      	subs	r0, #2
 80008da:	443c      	add	r4, r7
 80008dc:	1a64      	subs	r4, r4, r1
 80008de:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008e2:	2100      	movs	r1, #0
 80008e4:	b11e      	cbz	r6, 80008ee <__udivmoddi4+0xa2>
 80008e6:	40d4      	lsrs	r4, r2
 80008e8:	2300      	movs	r3, #0
 80008ea:	e9c6 4300 	strd	r4, r3, [r6]
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	b902      	cbnz	r2, 80008f6 <__udivmoddi4+0xaa>
 80008f4:	deff      	udf	#255	; 0xff
 80008f6:	fab2 f282 	clz	r2, r2
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d14f      	bne.n	800099e <__udivmoddi4+0x152>
 80008fe:	1bcb      	subs	r3, r1, r7
 8000900:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000904:	fa1f f887 	uxth.w	r8, r7
 8000908:	2101      	movs	r1, #1
 800090a:	fbb3 fcfe 	udiv	ip, r3, lr
 800090e:	0c25      	lsrs	r5, r4, #16
 8000910:	fb0e 331c 	mls	r3, lr, ip, r3
 8000914:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000918:	fb08 f30c 	mul.w	r3, r8, ip
 800091c:	42ab      	cmp	r3, r5
 800091e:	d907      	bls.n	8000930 <__udivmoddi4+0xe4>
 8000920:	197d      	adds	r5, r7, r5
 8000922:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0xe2>
 8000928:	42ab      	cmp	r3, r5
 800092a:	f200 80e7 	bhi.w	8000afc <__udivmoddi4+0x2b0>
 800092e:	4684      	mov	ip, r0
 8000930:	1aed      	subs	r5, r5, r3
 8000932:	b2a3      	uxth	r3, r4
 8000934:	fbb5 f0fe 	udiv	r0, r5, lr
 8000938:	fb0e 5510 	mls	r5, lr, r0, r5
 800093c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000940:	fb08 f800 	mul.w	r8, r8, r0
 8000944:	45a0      	cmp	r8, r4
 8000946:	d907      	bls.n	8000958 <__udivmoddi4+0x10c>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x10a>
 8000950:	45a0      	cmp	r8, r4
 8000952:	f200 80d7 	bhi.w	8000b04 <__udivmoddi4+0x2b8>
 8000956:	4618      	mov	r0, r3
 8000958:	eba4 0408 	sub.w	r4, r4, r8
 800095c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000960:	e7c0      	b.n	80008e4 <__udivmoddi4+0x98>
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0x12c>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80af 	beq.w	8000aca <__udivmoddi4+0x27e>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d14b      	bne.n	8000a18 <__udivmoddi4+0x1cc>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0x13e>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80b7 	bhi.w	8000af8 <__udivmoddi4+0x2ac>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0303 	sbc.w	r3, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	469e      	mov	lr, r3
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0aa      	beq.n	80008ee <__udivmoddi4+0xa2>
 8000998:	e9c6 4e00 	strd	r4, lr, [r6]
 800099c:	e7a7      	b.n	80008ee <__udivmoddi4+0xa2>
 800099e:	f1c2 0c20 	rsb	ip, r2, #32
 80009a2:	fa01 f302 	lsl.w	r3, r1, r2
 80009a6:	4097      	lsls	r7, r2
 80009a8:	fa20 f00c 	lsr.w	r0, r0, ip
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	fa21 fc0c 	lsr.w	ip, r1, ip
 80009b4:	4318      	orrs	r0, r3
 80009b6:	fbbc f1fe 	udiv	r1, ip, lr
 80009ba:	0c05      	lsrs	r5, r0, #16
 80009bc:	fb0e cc11 	mls	ip, lr, r1, ip
 80009c0:	fa1f f887 	uxth.w	r8, r7
 80009c4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80009c8:	fb01 f308 	mul.w	r3, r1, r8
 80009cc:	42ab      	cmp	r3, r5
 80009ce:	fa04 f402 	lsl.w	r4, r4, r2
 80009d2:	d909      	bls.n	80009e8 <__udivmoddi4+0x19c>
 80009d4:	197d      	adds	r5, r7, r5
 80009d6:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 80009da:	f080 808b 	bcs.w	8000af4 <__udivmoddi4+0x2a8>
 80009de:	42ab      	cmp	r3, r5
 80009e0:	f240 8088 	bls.w	8000af4 <__udivmoddi4+0x2a8>
 80009e4:	3902      	subs	r1, #2
 80009e6:	443d      	add	r5, r7
 80009e8:	1aeb      	subs	r3, r5, r3
 80009ea:	b285      	uxth	r5, r0
 80009ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80009f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80009f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80009f8:	fb00 f308 	mul.w	r3, r0, r8
 80009fc:	42ab      	cmp	r3, r5
 80009fe:	d907      	bls.n	8000a10 <__udivmoddi4+0x1c4>
 8000a00:	197d      	adds	r5, r7, r5
 8000a02:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a06:	d271      	bcs.n	8000aec <__udivmoddi4+0x2a0>
 8000a08:	42ab      	cmp	r3, r5
 8000a0a:	d96f      	bls.n	8000aec <__udivmoddi4+0x2a0>
 8000a0c:	3802      	subs	r0, #2
 8000a0e:	443d      	add	r5, r7
 8000a10:	1aeb      	subs	r3, r5, r3
 8000a12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a16:	e778      	b.n	800090a <__udivmoddi4+0xbe>
 8000a18:	f1c1 0c20 	rsb	ip, r1, #32
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000a22:	431f      	orrs	r7, r3
 8000a24:	fa20 f40c 	lsr.w	r4, r0, ip
 8000a28:	fa05 f301 	lsl.w	r3, r5, r1
 8000a2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a30:	fa25 f50c 	lsr.w	r5, r5, ip
 8000a34:	431c      	orrs	r4, r3
 8000a36:	0c23      	lsrs	r3, r4, #16
 8000a38:	fbb5 f9fe 	udiv	r9, r5, lr
 8000a3c:	fa1f f887 	uxth.w	r8, r7
 8000a40:	fb0e 5519 	mls	r5, lr, r9, r5
 8000a44:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000a48:	fb09 fa08 	mul.w	sl, r9, r8
 8000a4c:	45aa      	cmp	sl, r5
 8000a4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a52:	fa00 f301 	lsl.w	r3, r0, r1
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x21e>
 8000a58:	197d      	adds	r5, r7, r5
 8000a5a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a5e:	d247      	bcs.n	8000af0 <__udivmoddi4+0x2a4>
 8000a60:	45aa      	cmp	sl, r5
 8000a62:	d945      	bls.n	8000af0 <__udivmoddi4+0x2a4>
 8000a64:	f1a9 0902 	sub.w	r9, r9, #2
 8000a68:	443d      	add	r5, r7
 8000a6a:	eba5 050a 	sub.w	r5, r5, sl
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb5 f0fe 	udiv	r0, r5, lr
 8000a74:	fb0e 5510 	mls	r5, lr, r0, r5
 8000a78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a7c:	fb00 f808 	mul.w	r8, r0, r8
 8000a80:	45a0      	cmp	r8, r4
 8000a82:	d907      	bls.n	8000a94 <__udivmoddi4+0x248>
 8000a84:	193c      	adds	r4, r7, r4
 8000a86:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000a8a:	d22d      	bcs.n	8000ae8 <__udivmoddi4+0x29c>
 8000a8c:	45a0      	cmp	r8, r4
 8000a8e:	d92b      	bls.n	8000ae8 <__udivmoddi4+0x29c>
 8000a90:	3802      	subs	r0, #2
 8000a92:	443c      	add	r4, r7
 8000a94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a98:	eba4 0408 	sub.w	r4, r4, r8
 8000a9c:	fba0 8902 	umull	r8, r9, r0, r2
 8000aa0:	454c      	cmp	r4, r9
 8000aa2:	46c6      	mov	lr, r8
 8000aa4:	464d      	mov	r5, r9
 8000aa6:	d319      	bcc.n	8000adc <__udivmoddi4+0x290>
 8000aa8:	d016      	beq.n	8000ad8 <__udivmoddi4+0x28c>
 8000aaa:	b15e      	cbz	r6, 8000ac4 <__udivmoddi4+0x278>
 8000aac:	ebb3 020e 	subs.w	r2, r3, lr
 8000ab0:	eb64 0405 	sbc.w	r4, r4, r5
 8000ab4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ab8:	40ca      	lsrs	r2, r1
 8000aba:	ea4c 0202 	orr.w	r2, ip, r2
 8000abe:	40cc      	lsrs	r4, r1
 8000ac0:	e9c6 2400 	strd	r2, r4, [r6]
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	4631      	mov	r1, r6
 8000acc:	4630      	mov	r0, r6
 8000ace:	e70e      	b.n	80008ee <__udivmoddi4+0xa2>
 8000ad0:	46ac      	mov	ip, r5
 8000ad2:	e6ed      	b.n	80008b0 <__udivmoddi4+0x64>
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	e701      	b.n	80008dc <__udivmoddi4+0x90>
 8000ad8:	4543      	cmp	r3, r8
 8000ada:	d2e6      	bcs.n	8000aaa <__udivmoddi4+0x25e>
 8000adc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ae0:	eb69 0507 	sbc.w	r5, r9, r7
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	e7e0      	b.n	8000aaa <__udivmoddi4+0x25e>
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e7d3      	b.n	8000a94 <__udivmoddi4+0x248>
 8000aec:	4660      	mov	r0, ip
 8000aee:	e78f      	b.n	8000a10 <__udivmoddi4+0x1c4>
 8000af0:	4681      	mov	r9, r0
 8000af2:	e7ba      	b.n	8000a6a <__udivmoddi4+0x21e>
 8000af4:	4661      	mov	r1, ip
 8000af6:	e777      	b.n	80009e8 <__udivmoddi4+0x19c>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e74b      	b.n	8000994 <__udivmoddi4+0x148>
 8000afc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b00:	443d      	add	r5, r7
 8000b02:	e715      	b.n	8000930 <__udivmoddi4+0xe4>
 8000b04:	3802      	subs	r0, #2
 8000b06:	443c      	add	r4, r7
 8000b08:	e726      	b.n	8000958 <__udivmoddi4+0x10c>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_idiv0>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000b10:	b4f0      	push	{r4, r5, r6, r7}

  sdp->vmt = &vmt;
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <sdObjectInit.constprop.0+0x54>)
 8000b16:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000b1a:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000b1c:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000b1e:	f44f 7780 	mov.w	r7, #256	; 0x100
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000b22:	f500 7615 	add.w	r6, r0, #596	; 0x254
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000b26:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000b2a:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 8000b2c:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;
 8000b2e:	f500 73aa 	add.w	r3, r0, #340	; 0x154
  sdp->state = SD_STOP;
 8000b32:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000b34:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000b38:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 8000b3c:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 8000b3e:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8000b42:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8000b44:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8000b46:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8000b48:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 8000b4c:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 8000b4e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8000b52:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8000b56:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8000b58:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;
 8000b5a:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;
 8000b5c:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 8000b5e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	08008eb0 	.word	0x08008eb0
	...

08000b70 <_pal_lld_enablepadevent.constprop.0>:
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;

  /* Port selection in SYSCFG.*/
#if STM32_EXTI_TYPE == 0
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 8000b70:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <_pal_lld_enablepadevent.constprop.0+0x44>)
 8000b72:	6913      	ldr	r3, [r2, #16]
 8000b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b78:	6113      	str	r3, [r2, #16]
  EXTI->EXTICR[cridx] = (EXTI->EXTICR[cridx] & crmask) | (portidx << croff);
#endif

  /* Programming edge registers.*/
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
    EXTI->RTSR1 |= padmask;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <_pal_lld_enablepadevent.constprop.0+0x48>)
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
 8000b7c:	2801      	cmp	r0, #1
    EXTI->RTSR1 |= padmask;
 8000b7e:	689a      	ldr	r2, [r3, #8]
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
 8000b80:	d110      	bne.n	8000ba4 <_pal_lld_enablepadevent.constprop.0+0x34>
    EXTI->RTSR1 |= padmask;
 8000b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b86:	609a      	str	r2, [r3, #8]
  else
    EXTI->RTSR1 &= ~padmask;
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
    EXTI->FTSR1 |= padmask;
  else
    EXTI->FTSR1 &= ~padmask;
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b8e:	60da      	str	r2, [r3, #12]
  /* Programming interrupt and event registers.*/
#if defined(STM32_EXTI_ENHANCED)
  EXTI_D1->IMR1 |= padmask;
  EXTI_D1->EMR1 &= ~padmask;
#else
  EXTI->IMR1 |= padmask;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <_pal_lld_enablepadevent.constprop.0+0x48>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b98:	601a      	str	r2, [r3, #0]
  EXTI->EMR1 &= ~padmask;
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba0:	605a      	str	r2, [r3, #4]
#endif
}
 8000ba2:	4770      	bx	lr
    EXTI->RTSR1 &= ~padmask;
 8000ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba8:	609a      	str	r2, [r3, #8]
    EXTI->FTSR1 |= padmask;
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	e7ed      	b.n	8000b90 <_pal_lld_enablepadevent.constprop.0+0x20>
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40013c00 	.word	0x40013c00
 8000bbc:	00000000 	.word	0x00000000

08000bc0 <otg_txfifo_handler.constprop.0>:
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <otg_txfifo_handler.constprop.0+0x8c>)
 8000bc2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000bca:	68d9      	ldr	r1, [r3, #12]
 8000bcc:	f8d2 9054 	ldr.w	r9, [r2, #84]	; 0x54
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000bd0:	4680      	mov	r8, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000bd2:	6948      	ldr	r0, [r1, #20]
 8000bd4:	e9d0 3700 	ldrd	r3, r7, [r0]
 8000bd8:	42bb      	cmp	r3, r7
 8000bda:	d928      	bls.n	8000c2e <otg_txfifo_handler.constprop.0+0x6e>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000bdc:	f108 0401 	add.w	r4, r8, #1
    if (n > usbp->epc[ep]->in_maxsize)
 8000be0:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000be4:	eb09 3404 	add.w	r4, r9, r4, lsl #12
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8000be8:	eb09 1c48 	add.w	ip, r9, r8, lsl #5
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8000bec:	1bde      	subs	r6, r3, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8000bee:	f8dc 2918 	ldr.w	r2, [ip, #2328]	; 0x918
 8000bf2:	4576      	cmp	r6, lr
 8000bf4:	bf28      	it	cs
 8000bf6:	4676      	movcs	r6, lr
 8000bf8:	b293      	uxth	r3, r2
 8000bfa:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8000bfe:	d821      	bhi.n	8000c44 <otg_txfifo_handler.constprop.0+0x84>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000c00:	6885      	ldr	r5, [r0, #8]
    if (n <= 4) {
 8000c02:	2e04      	cmp	r6, #4
    *fifop = *((uint32_t *)buf);
 8000c04:	682b      	ldr	r3, [r5, #0]
 8000c06:	6023      	str	r3, [r4, #0]
    if (n <= 4) {
 8000c08:	d90a      	bls.n	8000c20 <otg_txfifo_handler.constprop.0+0x60>
 8000c0a:	1f71      	subs	r1, r6, #5
 8000c0c:	f021 0103 	bic.w	r1, r1, #3
 8000c10:	3104      	adds	r1, #4
 8000c12:	4429      	add	r1, r5
 8000c14:	462b      	mov	r3, r5
    *fifop = *((uint32_t *)buf);
 8000c16:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000c1a:	6022      	str	r2, [r4, #0]
    if (n <= 4) {
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d1fa      	bne.n	8000c16 <otg_txfifo_handler.constprop.0+0x56>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000c20:	6803      	ldr	r3, [r0, #0]
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
    usbp->epc[ep]->in_state->txcnt += n;
 8000c22:	4437      	add	r7, r6
    usbp->epc[ep]->in_state->txbuf += n;
 8000c24:	4435      	add	r5, r6
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000c26:	42bb      	cmp	r3, r7
    usbp->epc[ep]->in_state->txcnt += n;
 8000c28:	e9c0 7501 	strd	r7, r5, [r0, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000c2c:	d8de      	bhi.n	8000bec <otg_txfifo_handler.constprop.0+0x2c>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 8000c2e:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
 8000c32:	2001      	movs	r0, #1
 8000c34:	fa00 f808 	lsl.w	r8, r0, r8
 8000c38:	ea23 0308 	bic.w	r3, r3, r8
 8000c3c:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 8000c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
 8000c44:	2000      	movs	r0, #0
}
 8000c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200018fc 	.word	0x200018fc

08000c50 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000c50:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c52:	2320      	movs	r3, #32
 8000c54:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000c58:	4c0b      	ldr	r4, [pc, #44]	; (8000c88 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000c5a:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000c5e:	4249      	negs	r1, r1
 8000c60:	1a28      	subs	r0, r5, r0
 8000c62:	4008      	ands	r0, r1
  prev = p - offset;
 8000c64:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d307      	bcc.n	8000c7a <chCoreAllocFromTop+0x2a>
 8000c6a:	4295      	cmp	r5, r2
 8000c6c:	d305      	bcc.n	8000c7a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 8000c6e:	6062      	str	r2, [r4, #4]
 8000c70:	2300      	movs	r3, #0
 8000c72:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000c76:	bc30      	pop	{r4, r5}
 8000c78:	4770      	bx	lr
    return NULL;
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f383 8811 	msr	BASEPRI, r3
}
 8000c82:	bc30      	pop	{r4, r5}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20001b78 	.word	0x20001b78
 8000c8c:	00000000 	.word	0x00000000

08000c90 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000c90:	4a02      	ldr	r2, [pc, #8]	; (8000c9c <notify1+0xc>)
 8000c92:	68d3      	ldr	r3, [r2, #12]
 8000c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c98:	60d3      	str	r3, [r2, #12]
}
 8000c9a:	4770      	bx	lr
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000ca0:	4a02      	ldr	r2, [pc, #8]	; (8000cac <notify2+0xc>)
 8000ca2:	68d3      	ldr	r3, [r2, #12]
 8000ca4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ca8:	60d3      	str	r3, [r2, #12]
}
 8000caa:	4770      	bx	lr
 8000cac:	40004400 	.word	0x40004400

08000cb0 <notify6>:

#if STM32_SERIAL_USE_USART6 || defined(__DOXYGEN__)
static void notify6(io_queue_t *qp) {

  (void)qp;
  USART6->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000cb0:	4a02      	ldr	r2, [pc, #8]	; (8000cbc <notify6+0xc>)
 8000cb2:	68d3      	ldr	r3, [r2, #12]
 8000cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cb8:	60d3      	str	r3, [r2, #12]
}
 8000cba:	4770      	bx	lr
 8000cbc:	40011400 	.word	0x40011400

08000cc0 <vt2_cb>:
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	f383 8811 	msr	BASEPRI, r3

static void vt2_cb(virtual_timer_t *vtp, void *p) {
  (void)vtp;
  (void)p;
  chSysLockFromISR();
  if (btn_cnt < 2){
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <vt2_cb+0x20>)
 8000cc8:	7813      	ldrb	r3, [r2, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d803      	bhi.n	8000cd6 <vt2_cb+0x16>
    LED_OFF;
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <vt2_cb+0x24>)
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	8319      	strh	r1, [r3, #24]
  }
  btn_cnt = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	7013      	strb	r3, [r2, #0]
 8000cda:	f383 8811 	msr	BASEPRI, r3
  chSysUnlockFromISR();
}
 8000cde:	4770      	bx	lr
 8000ce0:	200019dc 	.word	0x200019dc
 8000ce4:	40020800 	.word	0x40020800
	...

08000cf0 <vt_cb>:
static void vt_cb(virtual_timer_t *vtp, void *p) {
 8000cf0:	b508      	push	{r3, lr}
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	f383 8811 	msr	BASEPRI, r3
  if (is_pressed)
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <vt_cb+0x2c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b153      	cbz	r3, 8000d14 <vt_cb+0x24>
    palEnableLineEventI(EXTRST, PAL_EVENT_MODE_RISING_EDGE);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff ff36 	bl	8000b70 <_pal_lld_enablepadevent.constprop.0>
 * @iclass
 */
void palSetLineCallbackI(ioline_t line, palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_line_event(line);
  pep->cb = cb;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <vt_cb+0x30>)
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <vt_cb+0x34>)
 8000d08:	6513      	str	r3, [r2, #80]	; 0x50
  pep->arg = arg;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6553      	str	r3, [r2, #84]	; 0x54
 8000d0e:	f383 8811 	msr	BASEPRI, r3
}
 8000d12:	bd08      	pop	{r3, pc}
    palEnableLineEventI(EXTRST, PAL_EVENT_MODE_FALLING_EDGE);
 8000d14:	2002      	movs	r0, #2
 8000d16:	f7ff ff2b 	bl	8000b70 <_pal_lld_enablepadevent.constprop.0>
 8000d1a:	e7f3      	b.n	8000d04 <vt_cb+0x14>
 8000d1c:	20001e8d 	.word	0x20001e8d
 8000d20:	2000195c 	.word	0x2000195c
 8000d24:	080012b1 	.word	0x080012b1
	...

08000d30 <check_BUS>:

static void check_BUS(void){
  /* Check if BUS is used at all. If not there is a timer callback after 10us
      which sets the variable BUS_in_use to 0 . */
  //DEBUG_LOW;
  BUS_in_use = 1;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <check_BUS+0x7c>)
 8000d32:	2101      	movs	r1, #1
static void check_BUS(void){
 8000d34:	b430      	push	{r4, r5}
 8000d36:	2220      	movs	r2, #32
  BUS_in_use = 1;
 8000d38:	7019      	strb	r1, [r3, #0]
 8000d3a:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
 8000d3e:	481c      	ldr	r0, [pc, #112]	; (8000db0 <check_BUS+0x80>)

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8000d40:	6844      	ldr	r4, [r0, #4]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8000d42:	68c2      	ldr	r2, [r0, #12]
  if (NULL != gptp->config->callback)
 8000d44:	6864      	ldr	r4, [r4, #4]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8000d46:	2509      	movs	r5, #9
 8000d48:	62d5      	str	r5, [r2, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8000d4a:	6151      	str	r1, [r2, #20]
 8000d4c:	2503      	movs	r5, #3
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 8000d4e:	2100      	movs	r1, #0
 8000d50:	6251      	str	r1, [r2, #36]	; 0x24
 8000d52:	7005      	strb	r5, [r0, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8000d54:	6111      	str	r1, [r2, #16]
  if (NULL != gptp->config->callback)
 8000d56:	b11c      	cbz	r4, 8000d60 <check_BUS+0x30>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8000d58:	68d1      	ldr	r1, [r2, #12]
 8000d5a:	f041 0101 	orr.w	r1, r1, #1
 8000d5e:	60d1      	str	r1, [r2, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8000d60:	2185      	movs	r1, #133	; 0x85
 8000d62:	6011      	str	r1, [r2, #0]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f382 8811 	msr	BASEPRI, r2
  gptStartContinuous(&GPTD4, 10U);
  if (DEBUGLEVEL == 4) chprintf(dbg, "waiting for BUSFREE to go high.\r\n");
  while ((palReadLine(BUSFREE) == PAL_LOW) && BUS_in_use == 1);
 8000d6a:	4912      	ldr	r1, [pc, #72]	; (8000db4 <check_BUS+0x84>)
 8000d6c:	e002      	b.n	8000d74 <check_BUS+0x44>
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	2a01      	cmp	r2, #1
 8000d72:	d102      	bne.n	8000d7a <check_BUS+0x4a>
 8000d74:	690a      	ldr	r2, [r1, #16]
 8000d76:	0594      	lsls	r4, r2, #22
 8000d78:	d5f9      	bpl.n	8000d6e <check_BUS+0x3e>
  if (DEBUGLEVEL == 4) chprintf(dbg, "waiting for BUSFREE to go low.\r\n");
  while ((palReadLine(BUSFREE) == PAL_HIGH) && BUS_in_use == 1);
 8000d7a:	490e      	ldr	r1, [pc, #56]	; (8000db4 <check_BUS+0x84>)
 8000d7c:	e002      	b.n	8000d84 <check_BUS+0x54>
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	2a01      	cmp	r2, #1
 8000d82:	d102      	bne.n	8000d8a <check_BUS+0x5a>
 8000d84:	690a      	ldr	r2, [r1, #16]
 8000d86:	0592      	lsls	r2, r2, #22
 8000d88:	d4f9      	bmi.n	8000d7e <check_BUS+0x4e>
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8000d90:	68c3      	ldr	r3, [r0, #12]
 8000d92:	2200      	movs	r2, #0
  osalDbgCheck(gptp != NULL);
  osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
                (gptp->state == GPT_ONESHOT),
                "invalid state");

  gptp->state = GPT_READY;
 8000d94:	2102      	movs	r1, #2
 8000d96:	7001      	strb	r1, [r0, #0]
 8000d98:	601a      	str	r2, [r3, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8000d9a:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8000d9c:	68d9      	ldr	r1, [r3, #12]
 8000d9e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000da2:	60d9      	str	r1, [r3, #12]
 8000da4:	f382 8811 	msr	BASEPRI, r2
      else {
        chprintf(dbg, "BUSFREE is changing.\r\n");
      }
  }
  gptStopTimer(&GPTD4);
}
 8000da8:	bc30      	pop	{r4, r5}
 8000daa:	4770      	bx	lr
 8000dac:	20000c88 	.word	0x20000c88
 8000db0:	20000c8c 	.word	0x20000c8c
 8000db4:	40020400 	.word	0x40020400
	...

08000dc0 <gptcb>:
  BUS_in_use = 0;
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <gptcb+0x8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000c88 	.word	0x20000c88
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <requests_hook>:
 * Handling messages not implemented in the default handler nor in the
 * SerialUSB handler.
 */
static bool requests_hook(USBDriver *usbp) {

  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000dd0:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
static bool requests_hook(USBDriver *usbp) {
 8000dd4:	4603      	mov	r3, r0
  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000dd6:	f002 001f 	and.w	r0, r2, #31
 8000dda:	2801      	cmp	r0, #1
 8000ddc:	d103      	bne.n	8000de6 <requests_hook+0x16>
 8000dde:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8000de2:	290b      	cmp	r1, #11
 8000de4:	d01b      	beq.n	8000e1e <requests_hook+0x4e>
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8000de6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000dea:	2a20      	cmp	r2, #32
 8000dec:	d001      	beq.n	8000df2 <requests_hook+0x22>
      return true;
    default:
      return false;
    }
  }
  return false;
 8000dee:	2000      	movs	r0, #0
      (usbp->setup[1] == USB_REQ_SET_INTERFACE)) {
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  }
  return sduRequestsHook(usbp);
}
 8000df0:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000df2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000df6:	2a21      	cmp	r2, #33	; 0x21
 8000df8:	d809      	bhi.n	8000e0e <requests_hook+0x3e>
 8000dfa:	2a1f      	cmp	r2, #31
 8000dfc:	d9f7      	bls.n	8000dee <requests_hook+0x1e>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <requests_hook+0x58>)
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38
 8000e02:	2107      	movs	r1, #7
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
      return true;
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000e0e:	2a22      	cmp	r2, #34	; 0x22
 8000e10:	d1ed      	bne.n	8000dee <requests_hook+0x1e>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000e12:	2200      	movs	r2, #0
 8000e14:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	4770      	bx	lr
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8000e26:	4770      	bx	lr
 8000e28:	20000804 	.word	0x20000804
 8000e2c:	00000000 	.word	0x00000000

08000e30 <get_descriptor>:
  switch (dtype) {
 8000e30:	2902      	cmp	r1, #2
 8000e32:	d006      	beq.n	8000e42 <get_descriptor+0x12>
 8000e34:	2903      	cmp	r1, #3
 8000e36:	d006      	beq.n	8000e46 <get_descriptor+0x16>
 8000e38:	2901      	cmp	r1, #1
    return &vcom_device_descriptor;
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <get_descriptor+0x28>)
 8000e3c:	bf18      	it	ne
 8000e3e:	2000      	movne	r0, #0
 8000e40:	4770      	bx	lr
  switch (dtype) {
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <get_descriptor+0x2c>)
 8000e44:	4770      	bx	lr
    if (dindex < 4)
 8000e46:	2a03      	cmp	r2, #3
 8000e48:	d803      	bhi.n	8000e52 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <get_descriptor+0x30>)
 8000e4c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8000e50:	4770      	bx	lr
  return NULL;
 8000e52:	2000      	movs	r0, #0
}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	08008e08 	.word	0x08008e08
 8000e5c:	08008db4 	.word	0x08008db4
 8000e60:	08008e90 	.word	0x08008e90
	...

08000e70 <sym_to_val>:
#include "chscanf.h"
#include "memstreams.h"

static long sym_to_val(char sym, int base)
{
  sym = tolower(sym);
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <sym_to_val+0x54>)
 8000e72:	5cc3      	ldrb	r3, [r0, r3]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	bf04      	itt	eq
 8000e7c:	f100 0320 	addeq.w	r3, r0, #32
 8000e80:	b2d8      	uxtbeq	r0, r3
  if (sym <= '7' && sym >= '0') {
 8000e82:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
  sym = tolower(sym);
 8000e86:	bf18      	it	ne
 8000e88:	4603      	movne	r3, r0
  if (sym <= '7' && sym >= '0') {
 8000e8a:	2a07      	cmp	r2, #7
 8000e8c:	d912      	bls.n	8000eb4 <sym_to_val+0x44>
    return sym - '0';
  }
  switch (base) {
 8000e8e:	290a      	cmp	r1, #10
 8000e90:	d008      	beq.n	8000ea4 <sym_to_val+0x34>
 8000e92:	2910      	cmp	r1, #16
 8000e94:	d002      	beq.n	8000e9c <sym_to_val+0x2c>
 8000e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e9a:	4770      	bx	lr
  case 16:
    if (sym <= 'f' && sym >= 'a') {
 8000e9c:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
 8000ea0:	2a05      	cmp	r2, #5
 8000ea2:	d90a      	bls.n	8000eba <sym_to_val+0x4a>
      return (sym - 'a' + 0xa);
    }
    /* fallthrough */
  case 10:
    if (sym == '8') {
 8000ea4:	2838      	cmp	r0, #56	; 0x38
 8000ea6:	d00b      	beq.n	8000ec0 <sym_to_val+0x50>
      return 8;
    }
    if (sym == '9') {
      return 9;
 8000ea8:	2839      	cmp	r0, #57	; 0x39
 8000eaa:	bf14      	ite	ne
 8000eac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000eb0:	2009      	moveq	r0, #9
 8000eb2:	4770      	bx	lr
    return sym - '0';
 8000eb4:	b2d8      	uxtb	r0, r3
 8000eb6:	3830      	subs	r0, #48	; 0x30
 8000eb8:	4770      	bx	lr
      return (sym - 'a' + 0xa);
 8000eba:	b2d8      	uxtb	r0, r3
 8000ebc:	3857      	subs	r0, #87	; 0x57
 8000ebe:	4770      	bx	lr
      return 8;
 8000ec0:	2008      	movs	r0, #8
    }
    /* fallthrough */
  default:
    return -1;
  }
}
 8000ec2:	4770      	bx	lr
 8000ec4:	08008f05 	.word	0x08008f05
	...

08000ed0 <_port_irq_epilogue>:
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <_port_irq_epilogue+0x3c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000ede:	d102      	bne.n	8000ee6 <_port_irq_epilogue+0x16>
 8000ee0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000ee4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000ee6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8000eea:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ef0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000ef2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000ef6:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <_port_irq_epilogue+0x40>)
 8000ef8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000efa:	6952      	ldr	r2, [r2, #20]
    if (chSchIsPreemptionRequired()) {
 8000efc:	6889      	ldr	r1, [r1, #8]
 8000efe:	6892      	ldr	r2, [r2, #8]
 8000f00:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000f02:	bf8c      	ite	hi
 8000f04:	4a03      	ldrhi	r2, [pc, #12]	; (8000f14 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000f06:	4a04      	ldrls	r2, [pc, #16]	; (8000f18 <_port_irq_epilogue+0x48>)
 8000f08:	619a      	str	r2, [r3, #24]
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	200019e0 	.word	0x200019e0
 8000f14:	08000303 	.word	0x08000303
 8000f18:	08000306 	.word	0x08000306
 8000f1c:	00000000 	.word	0x00000000

08000f20 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000f22:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f24:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000f28:	4249      	negs	r1, r1
 8000f2a:	1a20      	subs	r0, r4, r0
 8000f2c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d304      	bcc.n	8000f3c <chCoreAllocAlignedI+0x1c>
 8000f32:	4284      	cmp	r4, r0
 8000f34:	d302      	bcc.n	8000f3c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000f36:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000f38:	6050      	str	r0, [r2, #4]
 8000f3a:	4770      	bx	lr
    return NULL;
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	bc10      	pop	{r4}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20001b78 	.word	0x20001b78
	...

08000f50 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <chTMStopMeasurementX+0x40>)
 8000f54:	6852      	ldr	r2, [r2, #4]
 8000f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8000f58:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000f5a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 8000f5c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000f5e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000f62:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000f64:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000f66:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8000f68:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000f6a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000f6c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000f6e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000f70:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000f72:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000f76:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000f78:	bf88      	it	hi
 8000f7a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000f7c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000f7e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000f82:	bf38      	it	cc
 8000f84:	6003      	strcc	r3, [r0, #0]
}
 8000f86:	bc30      	pop	{r4, r5}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e0001000 	.word	0xe0001000
 8000f90:	200019e0 	.word	0x200019e0
	...

08000fa0 <chTMStartMeasurementX>:
 8000fa0:	4b01      	ldr	r3, [pc, #4]	; (8000fa8 <chTMStartMeasurementX+0x8>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000fa4:	6083      	str	r3, [r0, #8]
}
 8000fa6:	4770      	bx	lr
 8000fa8:	e0001000 	.word	0xe0001000
 8000fac:	00000000 	.word	0x00000000

08000fb0 <chThdCreateSuspendedI>:
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000fb0:	6883      	ldr	r3, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8000fb2:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8000fb6:	b4f0      	push	{r4, r5, r6, r7}
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000fb8:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 8000fbc:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 8000fbe:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8000fc2:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000fc4:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000fc6:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000fca:	6805      	ldr	r5, [r0, #0]
 8000fcc:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000fce:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8000fd2:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8000fd6:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 8000fda:	f843 2c3c 	str.w	r2, [r3, #-60]
 8000fde:	6914      	ldr	r4, [r2, #16]
  tp->prio      = prio;
 8000fe0:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8000fe4:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8000fe8:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000fec:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8000ff0:	4d0c      	ldr	r5, [pc, #48]	; (8001024 <chThdCreateSuspendedI+0x74>)
 8000ff2:	f843 0c34 	str.w	r0, [r3, #-52]
  tp->epending  = (eventmask_t)0;
 8000ff6:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000ffa:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000ffe:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8001002:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8001006:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 800100a:	f843 4c38 	str.w	r4, [r3, #-56]
 800100e:	60e0      	str	r0, [r4, #12]
 8001010:	6110      	str	r0, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8001012:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8001016:	f843 1c18 	str.w	r1, [r3, #-24]
}
 800101a:	bcf0      	pop	{r4, r5, r6, r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200019e0 	.word	0x200019e0
 8001024:	080002f1 	.word	0x080002f1
	...

08001030 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001030:	2320      	movs	r3, #32
 8001032:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001036:	f890 3020 	ldrb.w	r3, [r0, #32]
 800103a:	2b07      	cmp	r3, #7
 800103c:	d80d      	bhi.n	800105a <wakeup+0x2a>
 800103e:	e8df f003 	tbb	[pc, r3]
 8001042:	0c27      	.short	0x0c27
 8001044:	0408230c 	.word	0x0408230c
 8001048:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 800104a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800104c:	6893      	ldr	r3, [r2, #8]
 800104e:	3301      	adds	r3, #1
 8001050:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001052:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001056:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001058:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 800105a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800105c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 800105e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8001062:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8001066:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8001068:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800106c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	428a      	cmp	r2, r1
 8001072:	d2fb      	bcs.n	800106c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	2100      	movs	r1, #0
 8001078:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800107c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800107e:	6058      	str	r0, [r3, #4]
 8001080:	f381 8811 	msr	BASEPRI, r1
}
 8001084:	bc10      	pop	{r4}
 8001086:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001088:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    break;
 800108e:	e7e4      	b.n	800105a <wakeup+0x2a>
 8001090:	2300      	movs	r3, #0
 8001092:	f383 8811 	msr	BASEPRI, r3
 8001096:	4770      	bx	lr
 8001098:	200019e0 	.word	0x200019e0
 800109c:	00000000 	.word	0x00000000

080010a0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 80010a0:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80010a2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 80010a6:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80010aa:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	428a      	cmp	r2, r1
 80010b0:	d2fb      	bcs.n	80010aa <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80010b8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80010ba:	6058      	str	r0, [r3, #4]
}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200019e0 	.word	0x200019e0
	...

080010d0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 80010d4:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 80010d6:	4284      	cmp	r4, r0
 80010d8:	d00a      	beq.n	80010f0 <chThdDequeueAllI.constprop.0+0x20>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80010da:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 80010de:	6803      	ldr	r3, [r0, #0]
 80010e0:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80010e2:	605c      	str	r4, [r3, #4]
 80010e4:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80010e6:	f7ff ffdb 	bl	80010a0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80010ea:	6820      	ldr	r0, [r4, #0]
 80010ec:	42a0      	cmp	r0, r4
 80010ee:	d1f6      	bne.n	80010de <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80010f0:	bd38      	pop	{r3, r4, r5, pc}
 80010f2:	bf00      	nop
	...

08001100 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001100:	4603      	mov	r3, r0
 8001102:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 8001104:	4283      	cmp	r3, r0
 8001106:	d006      	beq.n	8001116 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001108:	6802      	ldr	r2, [r0, #0]
 800110a:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = msg;
 800110c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800110e:	6053      	str	r3, [r2, #4]
 8001110:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001112:	f7ff bfc5 	b.w	80010a0 <chSchReadyI>
}
 8001116:	4770      	bx	lr
	...

08001120 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001122:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001124:	42a0      	cmp	r0, r4
 8001126:	d021      	beq.n	800116c <chEvtBroadcastFlagsI+0x4c>
 8001128:	4607      	mov	r7, r0
 800112a:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800112c:	2600      	movs	r6, #0
 800112e:	e004      	b.n	800113a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001130:	2a0b      	cmp	r2, #11
 8001132:	d01c      	beq.n	800116e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8001134:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001136:	42a7      	cmp	r7, r4
 8001138:	d018      	beq.n	800116c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 800113a:	68e3      	ldr	r3, [r4, #12]
 800113c:	432b      	orrs	r3, r5
 800113e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001140:	b115      	cbz	r5, 8001148 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001142:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001144:	421d      	tst	r5, r3
 8001146:	d0f5      	beq.n	8001134 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8001148:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800114c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800114e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8001152:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001154:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8001156:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001158:	d1ea      	bne.n	8001130 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800115a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800115c:	4213      	tst	r3, r2
 800115e:	d0e9      	beq.n	8001134 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8001160:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001162:	f7ff ff9d 	bl	80010a0 <chSchReadyI>
    elp = elp->next;
 8001166:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001168:	42a7      	cmp	r7, r4
 800116a:	d1e6      	bne.n	800113a <chEvtBroadcastFlagsI+0x1a>
}
 800116c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800116e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001170:	ea32 0303 	bics.w	r3, r2, r3
 8001174:	d1de      	bne.n	8001134 <chEvtBroadcastFlagsI+0x14>
 8001176:	e7f3      	b.n	8001160 <chEvtBroadcastFlagsI+0x40>
	...

08001180 <chThdResumeI>:
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8001180:	4603      	mov	r3, r0
  if (*trp != NULL) {
 8001182:	6800      	ldr	r0, [r0, #0]
 8001184:	b120      	cbz	r0, 8001190 <chThdResumeI+0x10>
    *trp = NULL;
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 800118a:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800118c:	f7ff bf88 	b.w	80010a0 <chSchReadyI>
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
	...

080011a0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <chVTDoResetI+0x6c>)
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 80011a6:	b430      	push	{r4, r5}
  if (ch.vtlist.next != vtp) {
 80011a8:	d00f      	beq.n	80011ca <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80011aa:	e9d0 2100 	ldrd	r2, r1, [r0]
 80011ae:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 80011b0:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80011b2:	3318      	adds	r3, #24
    vtp->func = NULL;
 80011b4:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80011b6:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 80011b8:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 80011ba:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80011bc:	d003      	beq.n	80011c6 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 80011be:	6881      	ldr	r1, [r0, #8]
 80011c0:	6893      	ldr	r3, [r2, #8]
 80011c2:	440b      	add	r3, r1
 80011c4:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80011c6:	bc30      	pop	{r4, r5}
 80011c8:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 80011ca:	4618      	mov	r0, r3
 80011cc:	6811      	ldr	r1, [r2, #0]
 80011ce:	f840 1f18 	str.w	r1, [r0, #24]!
  vtp->func = NULL;
 80011d2:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80011d4:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80011d6:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 80011d8:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80011da:	d013      	beq.n	8001204 <chVTDoResetI+0x64>
  ch.vtlist.next->delta += vtp->delta;
 80011dc:	6895      	ldr	r5, [r2, #8]
 80011de:	688a      	ldr	r2, [r1, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80011e0:	4c0b      	ldr	r4, [pc, #44]	; (8001210 <chVTDoResetI+0x70>)
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  ch.vtlist.next->delta += vtp->delta;
 80011e4:	4415      	add	r5, r2
 80011e6:	608d      	str	r5, [r1, #8]
 80011e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80011ea:	1ad1      	subs	r1, r2, r3
  if (nowdelta >= ch.vtlist.next->delta) {
 80011ec:	428d      	cmp	r5, r1
 80011ee:	d9ea      	bls.n	80011c6 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 80011f0:	1a9a      	subs	r2, r3, r2
 80011f2:	442a      	add	r2, r5
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80011f4:	2a01      	cmp	r2, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80011f6:	bf98      	it	ls
 80011f8:	1c8d      	addls	r5, r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <chVTDoResetI+0x70>)
  return systime + (systime_t)interval;
 80011fc:	442b      	add	r3, r5
 80011fe:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001200:	bc30      	pop	{r4, r5}
 8001202:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0U;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <chVTDoResetI+0x70>)
 8001206:	60dc      	str	r4, [r3, #12]
    return;
 8001208:	e7dd      	b.n	80011c6 <chVTDoResetI+0x26>
 800120a:	bf00      	nop
 800120c:	200019e0 	.word	0x200019e0
 8001210:	40000c00 	.word	0x40000c00
	...

08001220 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001220:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001222:	4d1e      	ldr	r5, [pc, #120]	; (800129c <chVTDoSetI+0x7c>)
  return (systime_t)STM32_ST_TIM->CNT;
 8001224:	4e1e      	ldr	r6, [pc, #120]	; (80012a0 <chVTDoSetI+0x80>)
 8001226:	462f      	mov	r7, r5
 8001228:	2902      	cmp	r1, #2
 800122a:	f857 4f18 	ldr.w	r4, [r7, #24]!
 800122e:	bf38      	it	cc
 8001230:	2102      	movcc	r1, #2
 8001232:	42bc      	cmp	r4, r7
  vtp->par = par;
 8001234:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8001238:	6a73      	ldr	r3, [r6, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800123a:	d022      	beq.n	8001282 <chVTDoSetI+0x62>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800123c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	18c9      	adds	r1, r1, r3
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001242:	d216      	bcs.n	8001272 <chVTDoSetI+0x52>
    else if (delta < p->delta) {
 8001244:	68a3      	ldr	r3, [r4, #8]
 8001246:	428b      	cmp	r3, r1
 8001248:	d903      	bls.n	8001252 <chVTDoSetI+0x32>
 800124a:	e017      	b.n	800127c <chVTDoSetI+0x5c>
    p = p->next;
 800124c:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 800124e:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 8001250:	68a3      	ldr	r3, [r4, #8]
 8001252:	428b      	cmp	r3, r1
 8001254:	d3fa      	bcc.n	800124c <chVTDoSetI+0x2c>
  vtp->prev = vtp->next->prev;
 8001256:	6863      	ldr	r3, [r4, #4]
 8001258:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 800125c:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 800125e:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 8001260:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 8001262:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 8001268:	1a59      	subs	r1, r3, r1
 800126a:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 800126c:	622a      	str	r2, [r5, #32]
}
 800126e:	bcf0      	pop	{r4, r5, r6, r7}
 8001270:	4770      	bx	lr
      delta -= p->delta;
 8001272:	68a2      	ldr	r2, [r4, #8]
      p = p->next;
 8001274:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 8001276:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8001278:	68a3      	ldr	r3, [r4, #8]
 800127a:	e7ea      	b.n	8001252 <chVTDoSetI+0x32>
  return systime + (systime_t)interval;
 800127c:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800127e:	6372      	str	r2, [r6, #52]	; 0x34
 8001280:	e7e7      	b.n	8001252 <chVTDoSetI+0x32>
      ch.vtlist.lasttime = now;
 8001282:	626b      	str	r3, [r5, #36]	; 0x24
 8001284:	18cf      	adds	r7, r1, r3
  STM32_ST_TIM->SR     = 0;
 8001286:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001288:	2302      	movs	r3, #2
      ch.vtlist.prev = vtp;
 800128a:	e9c5 0006 	strd	r0, r0, [r5, #24]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800128e:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 8001292:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001294:	6377      	str	r7, [r6, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001296:	6132      	str	r2, [r6, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001298:	60f3      	str	r3, [r6, #12]
 800129a:	e7e8      	b.n	800126e <chVTDoSetI+0x4e>
 800129c:	200019e0 	.word	0x200019e0
 80012a0:	40000c00 	.word	0x40000c00
	...

080012b0 <button_cb>:
/*===========================================================================*/
/* Button related code.                                                      */
/*===========================================================================*/
/* Callback associated to the raising edge of the button line. */
static void button_cb(void *arg) {
 80012b0:	b538      	push	{r3, r4, r5, lr}
  (void)arg;
  //palToggleLine(LED);
  if (is_pressed){
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <button_cb+0xa0>)
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d042      	beq.n	8001340 <button_cb+0x90>
    is_pressed = 0;
    btn_cnt++;
 80012ba:	4926      	ldr	r1, [pc, #152]	; (8001354 <button_cb+0xa4>)
 80012bc:	780a      	ldrb	r2, [r1, #0]
    is_pressed = 0;
 80012be:	2000      	movs	r0, #0
    btn_cnt++;
 80012c0:	3201      	adds	r2, #1
 80012c2:	700a      	strb	r2, [r1, #0]
    is_pressed = 0;
 80012c4:	7018      	strb	r0, [r3, #0]
 80012c6:	2320      	movs	r3, #32
 80012c8:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _pal_lld_disablepadevent(ioportid_t port, iopadid_t pad) {
  uint32_t padmask, rtsr1, ftsr1;

  rtsr1 = EXTI->RTSR1;
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <button_cb+0xa8>)
 80012ce:	6899      	ldr	r1, [r3, #8]
  ftsr1 = EXTI->FTSR1;
 80012d0:	68da      	ldr	r2, [r3, #12]

  /* Mask of the pad.*/
  padmask = 1U << (uint32_t)pad;

  /* If either RTRS1 or FTSR1 is enabled then the channel is in use.*/
  if (((rtsr1 | ftsr1) & padmask) != 0U) {
 80012d2:	ea41 0002 	orr.w	r0, r1, r2
 80012d6:	0540      	lsls	r0, r0, #21
 80012d8:	d516      	bpl.n	8001308 <button_cb+0x58>
    /* Port index is obtained assuming that GPIO ports are placed at regular
       0x400 intervals in memory space. So far this is true for all devices.*/
    portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;

#if STM32_EXTI_TYPE == 0
    crport = (SYSCFG->EXTICR[cridx] >> croff) & 0xFU;
 80012da:	4820      	ldr	r0, [pc, #128]	; (800135c <button_cb+0xac>)
#endif
#endif

#if PAL_USE_CALLBACKS || PAL_USE_WAIT
  /* Callback cleared and/or thread reset.*/
  _pal_clear_event(pad);
 80012dc:	4c20      	ldr	r4, [pc, #128]	; (8001360 <button_cb+0xb0>)
    crport = (SYSCFG->EXTICR[cridx] >> croff) & 0xFU;
 80012de:	6900      	ldr	r0, [r0, #16]
    EXTI->IMR1  &= ~padmask;
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80012e6:	6018      	str	r0, [r3, #0]
    EXTI->EMR1  &= ~padmask;
 80012e8:	6858      	ldr	r0, [r3, #4]
 80012ea:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80012ee:	6058      	str	r0, [r3, #4]
  _pal_clear_event(pad);
 80012f0:	2500      	movs	r5, #0
    EXTI->RTSR1  = rtsr1 & ~padmask;
 80012f2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    EXTI->FTSR1  = ftsr1 & ~padmask;
 80012f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    EXTI->PR1    = padmask;
 80012fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
    EXTI->RTSR1  = rtsr1 & ~padmask;
 80012fe:	6099      	str	r1, [r3, #8]
  _pal_clear_event(pad);
 8001300:	6525      	str	r5, [r4, #80]	; 0x50
    EXTI->FTSR1  = ftsr1 & ~padmask;
 8001302:	60da      	str	r2, [r3, #12]
  _pal_clear_event(pad);
 8001304:	6565      	str	r5, [r4, #84]	; 0x54
    EXTI->PR1    = padmask;
 8001306:	6158      	str	r0, [r3, #20]
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <button_cb+0xb4>)
 800130a:	68c3      	ldr	r3, [r0, #12]
 800130c:	b10b      	cbz	r3, 8001312 <button_cb+0x62>
    chVTDoResetI(vtp);
 800130e:	f7ff ff47 	bl	80011a0 <chVTDoResetI>
  /* Disabling the event on the line and setting a timer to
     re-enable it. */
  palDisableLineEventI(EXTRST);
  /* Arming the VT timer to re-enable the event in 50ms. */
  chVTResetI(&vt);
  chVTDoSetI(&vt, TIME_MS2I(50), vt_cb, NULL);
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <button_cb+0xb4>)
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <button_cb+0xb8>)
 8001316:	2300      	movs	r3, #0
 8001318:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800131c:	f7ff ff80 	bl	8001220 <chVTDoSetI>
  if (chVTIsArmedI(vtp)) {
 8001320:	4812      	ldr	r0, [pc, #72]	; (800136c <button_cb+0xbc>)
 8001322:	68c3      	ldr	r3, [r0, #12]
 8001324:	b10b      	cbz	r3, 800132a <button_cb+0x7a>
    chVTDoResetI(vtp);
 8001326:	f7ff ff3b 	bl	80011a0 <chVTDoResetI>
  chVTResetI(&vt2);
  chVTDoSetI(&vt2, TIME_MS2I(300), vt2_cb, NULL);
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <button_cb+0xc0>)
 800132c:	480f      	ldr	r0, [pc, #60]	; (800136c <button_cb+0xbc>)
 800132e:	2300      	movs	r3, #0
 8001330:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001334:	f7ff ff74 	bl	8001220 <chVTDoSetI>
 8001338:	2300      	movs	r3, #0
 800133a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlockFromISR();
}
 800133e:	bd38      	pop	{r3, r4, r5, pc}
    LED_ON;
 8001340:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <button_cb+0xc4>)
    is_pressed = 1;
 8001342:	2001      	movs	r0, #1
    LED_ON;
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    is_pressed = 1;
 8001348:	7018      	strb	r0, [r3, #0]
    LED_ON;
 800134a:	8351      	strh	r1, [r2, #26]
 800134c:	e7bb      	b.n	80012c6 <button_cb+0x16>
 800134e:	bf00      	nop
 8001350:	20001e8d 	.word	0x20001e8d
 8001354:	200019dc 	.word	0x200019dc
 8001358:	40013c00 	.word	0x40013c00
 800135c:	40013800 	.word	0x40013800
 8001360:	2000195c 	.word	0x2000195c
 8001364:	20005fc0 	.word	0x20005fc0
 8001368:	08000cf1 	.word	0x08000cf1
 800136c:	20005fd4 	.word	0x20005fd4
 8001370:	08000cc1 	.word	0x08000cc1
 8001374:	40020800 	.word	0x40020800
	...

08001380 <chSysPolledDelayX>:
 8001380:	4a03      	ldr	r2, [pc, #12]	; (8001390 <chSysPolledDelayX+0x10>)
 8001382:	6851      	ldr	r1, [r2, #4]
 8001384:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 8001386:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8001388:	4298      	cmp	r0, r3
 800138a:	d8fb      	bhi.n	8001384 <chSysPolledDelayX+0x4>
  }
}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e0001000 	.word	0xe0001000
	...

080013a0 <_idle_thread>:
}
 80013a0:	e7fe      	b.n	80013a0 <_idle_thread>
 80013a2:	bf00      	nop
	...

080013b0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80013b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80013b4:	f8d0 6254 	ldr.w	r6, [r0, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 80013b8:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80013bc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80013be:	05da      	lsls	r2, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 80013c0:	4605      	mov	r5, r0
  uint16_t sr = u->SR;
 80013c2:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80013c4:	d475      	bmi.n	80014b2 <serve_interrupt+0x102>
 80013c6:	2320      	movs	r3, #32
 80013c8:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80013cc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80013d0:	d045      	beq.n	800145e <serve_interrupt+0xae>
  chnAddFlagsI(sdp, sts);
 80013d2:	1d2f      	adds	r7, r5, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80013d4:	f105 080c 	add.w	r8, r5, #12
 80013d8:	e008      	b.n	80013ec <serve_interrupt+0x3c>
    if (sr & USART_SR_RXNE)
 80013da:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80013dc:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80013e0:	d41e      	bmi.n	8001420 <serve_interrupt+0x70>
    sr = u->SR;
 80013e2:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80013e4:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80013e8:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80013ea:	d038      	beq.n	800145e <serve_interrupt+0xae>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80013ec:	0723      	lsls	r3, r4, #28
 80013ee:	d0f4      	beq.n	80013da <serve_interrupt+0x2a>
    sts |= SD_OVERRUN_ERROR;
 80013f0:	f014 0f08 	tst.w	r4, #8
 80013f4:	bf0c      	ite	eq
 80013f6:	2100      	moveq	r1, #0
 80013f8:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 80013fa:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 80013fc:	bf48      	it	mi
 80013fe:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001402:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001404:	bf48      	it	mi
 8001406:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800140a:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800140c:	bf48      	it	mi
 800140e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001412:	4638      	mov	r0, r7
 8001414:	f7ff fe84 	bl	8001120 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001418:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800141a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800141e:	d5e0      	bpl.n	80013e2 <serve_interrupt+0x32>
  if (iqIsEmptyI(&sdp->iqueue))
 8001420:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8001422:	f895 4258 	ldrb.w	r4, [r5, #600]	; 0x258
 8001426:	b39b      	cbz	r3, 8001490 <serve_interrupt+0xe0>
  if (!iqIsFullI(iqp)) {
 8001428:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800142c:	4293      	cmp	r3, r2
 800142e:	d037      	beq.n	80014a0 <serve_interrupt+0xf0>
    iqp->q_counter++;
 8001430:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8001432:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8001434:	3201      	adds	r2, #1
 8001436:	ea04 0a0a 	and.w	sl, r4, sl
 800143a:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 800143c:	6229      	str	r1, [r5, #32]
 800143e:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001442:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8001446:	429a      	cmp	r2, r3
 8001448:	d301      	bcc.n	800144e <serve_interrupt+0x9e>
      iqp->q_wrptr = iqp->q_buffer;
 800144a:	69ab      	ldr	r3, [r5, #24]
 800144c:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 800144e:	4640      	mov	r0, r8
 8001450:	f7ff fe56 	bl	8001100 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8001454:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001456:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800145a:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800145c:	d1c6      	bne.n	80013ec <serve_interrupt+0x3c>
 800145e:	2300      	movs	r3, #0
 8001460:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001464:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001468:	d001      	beq.n	800146e <serve_interrupt+0xbe>
 800146a:	0622      	lsls	r2, r4, #24
 800146c:	d430      	bmi.n	80014d0 <serve_interrupt+0x120>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800146e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001472:	d00b      	beq.n	800148c <serve_interrupt+0xdc>
 8001474:	0663      	lsls	r3, r4, #25
 8001476:	d509      	bpl.n	800148c <serve_interrupt+0xdc>
 8001478:	2320      	movs	r3, #32
 800147a:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800147e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8001482:	429a      	cmp	r2, r3
 8001484:	d03f      	beq.n	8001506 <serve_interrupt+0x156>
 8001486:	2300      	movs	r3, #0
 8001488:	f383 8811 	msr	BASEPRI, r3
}
 800148c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8001490:	2104      	movs	r1, #4
 8001492:	4638      	mov	r0, r7
 8001494:	f7ff fe44 	bl	8001120 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8001498:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800149c:	4293      	cmp	r3, r2
 800149e:	d1c7      	bne.n	8001430 <serve_interrupt+0x80>
 80014a0:	696a      	ldr	r2, [r5, #20]
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d0c4      	beq.n	8001430 <serve_interrupt+0x80>
 80014a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014aa:	4638      	mov	r0, r7
 80014ac:	f7ff fe38 	bl	8001120 <chEvtBroadcastFlagsI>
 80014b0:	e797      	b.n	80013e2 <serve_interrupt+0x32>
 80014b2:	2320      	movs	r3, #32
 80014b4:	f383 8811 	msr	BASEPRI, r3
 80014b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014bc:	3004      	adds	r0, #4
 80014be:	f7ff fe2f 	bl	8001120 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80014c2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80014c6:	6033      	str	r3, [r6, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	e77a      	b.n	80013c6 <serve_interrupt+0x16>
 80014d0:	2320      	movs	r3, #32
 80014d2:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80014d6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80014da:	429a      	cmp	r2, r3
 80014dc:	d020      	beq.n	8001520 <serve_interrupt+0x170>
    uint8_t b;

    oqp->q_counter++;
 80014de:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 80014e0:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 80014e2:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 80014e4:	3201      	adds	r2, #1
 80014e6:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 80014e8:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 80014ea:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 80014ec:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 80014ee:	d301      	bcc.n	80014f4 <serve_interrupt+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 80014f0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80014f2:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 80014f4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80014f8:	f7ff fe02 	bl	8001100 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 80014fc:	6077      	str	r7, [r6, #4]
 80014fe:	2300      	movs	r3, #0
 8001500:	f383 8811 	msr	BASEPRI, r3
 8001504:	e7b3      	b.n	800146e <serve_interrupt+0xbe>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001506:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0bc      	beq.n	8001486 <serve_interrupt+0xd6>
  chEvtBroadcastFlagsI(esp, flags);
 800150c:	1d28      	adds	r0, r5, #4
 800150e:	2110      	movs	r1, #16
 8001510:	f7ff fe06 	bl	8001120 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001514:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8001518:	ea09 0303 	and.w	r3, r9, r3
 800151c:	60f3      	str	r3, [r6, #12]
 800151e:	e7b2      	b.n	8001486 <serve_interrupt+0xd6>
  if (!oqIsEmptyI(oqp)) {
 8001520:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001522:	2a00      	cmp	r2, #0
 8001524:	d0db      	beq.n	80014de <serve_interrupt+0x12e>
 8001526:	2108      	movs	r1, #8
 8001528:	1d28      	adds	r0, r5, #4
 800152a:	f7ff fdf9 	bl	8001120 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800152e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001532:	ea09 0303 	and.w	r3, r9, r3
 8001536:	60f3      	str	r3, [r6, #12]
 8001538:	e7e1      	b.n	80014fe <serve_interrupt+0x14e>
 800153a:	bf00      	nop
 800153c:	0000      	movs	r0, r0
	...

08001540 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8001540:	6983      	ldr	r3, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8001542:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
 8001544:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001546:	68dc      	ldr	r4, [r3, #12]
 8001548:	4014      	ands	r4, r2
 800154a:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800154c:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800154e:	07a6      	lsls	r6, r4, #30
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8001550:	4605      	mov	r5, r0
  pwmp->tim->SR = ~sr;
 8001552:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8001554:	d503      	bpl.n	800155e <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8001556:	6843      	ldr	r3, [r0, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800155a:	b103      	cbz	r3, 800155e <pwm_lld_serve_interrupt+0x1e>
    pwmp->config->channels[0].callback(pwmp);
 800155c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800155e:	0760      	lsls	r0, r4, #29
 8001560:	d504      	bpl.n	800156c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8001562:	686b      	ldr	r3, [r5, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8001566:	b10b      	cbz	r3, 800156c <pwm_lld_serve_interrupt+0x2c>
    pwmp->config->channels[1].callback(pwmp);
 8001568:	4628      	mov	r0, r5
 800156a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800156c:	0721      	lsls	r1, r4, #28
 800156e:	d504      	bpl.n	800157a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8001570:	686b      	ldr	r3, [r5, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8001574:	b10b      	cbz	r3, 800157a <pwm_lld_serve_interrupt+0x3a>
    pwmp->config->channels[2].callback(pwmp);
 8001576:	4628      	mov	r0, r5
 8001578:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800157a:	06e2      	lsls	r2, r4, #27
 800157c:	d504      	bpl.n	8001588 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 800157e:	686b      	ldr	r3, [r5, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8001582:	b10b      	cbz	r3, 8001588 <pwm_lld_serve_interrupt+0x48>
    pwmp->config->channels[3].callback(pwmp);
 8001584:	4628      	mov	r0, r5
 8001586:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8001588:	07e3      	lsls	r3, r4, #31
 800158a:	d506      	bpl.n	800159a <pwm_lld_serve_interrupt+0x5a>
 800158c:	686b      	ldr	r3, [r5, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	b11b      	cbz	r3, 800159a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8001592:	4628      	mov	r0, r5
}
 8001594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->callback(pwmp);
 8001598:	4718      	bx	r3
}
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	0000      	movs	r0, r0
	...

080015a0 <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80015a0:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80015a4:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80015a6:	d14c      	bne.n	8001642 <spi_lld_serve_rx_interrupt+0xa2>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 80015a8:	460d      	mov	r5, r1
 80015aa:	6841      	ldr	r1, [r0, #4]
 80015ac:	780b      	ldrb	r3, [r1, #0]
 80015ae:	4604      	mov	r4, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d130      	bne.n	8001616 <spi_lld_serve_rx_interrupt+0x76>
      _spi_isr_full_code(spip);
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 80015b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80015b6:	682a      	ldr	r2, [r5, #0]
 80015b8:	6813      	ldr	r3, [r2, #0]
 80015ba:	f023 031f 	bic.w	r3, r3, #31
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	6813      	ldr	r3, [r2, #0]
 80015c2:	07d8      	lsls	r0, r3, #31
 80015c4:	d4fc      	bmi.n	80015c0 <spi_lld_serve_rx_interrupt+0x20>
 80015c6:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 80015c8:	6a20      	ldr	r0, [r4, #32]
    dmaStreamDisable(spip->dmatx);
 80015ca:	686d      	ldr	r5, [r5, #4]
 80015cc:	233d      	movs	r3, #61	; 0x3d
 80015ce:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 80015d0:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 80015d2:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 80015d4:	6813      	ldr	r3, [r2, #0]
 80015d6:	f023 031f 	bic.w	r3, r3, #31
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	6813      	ldr	r3, [r2, #0]
 80015de:	07db      	lsls	r3, r3, #31
 80015e0:	d4fc      	bmi.n	80015dc <spi_lld_serve_rx_interrupt+0x3c>
 80015e2:	7a45      	ldrb	r5, [r0, #9]

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 80015e4:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 80015e6:	6841      	ldr	r1, [r0, #4]
 80015e8:	233d      	movs	r3, #61	; 0x3d
 80015ea:	40ab      	lsls	r3, r5
 80015ec:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 80015ee:	b36a      	cbz	r2, 800164c <spi_lld_serve_rx_interrupt+0xac>
 80015f0:	2304      	movs	r3, #4
 80015f2:	7023      	strb	r3, [r4, #0]
 80015f4:	4620      	mov	r0, r4
 80015f6:	4790      	blx	r2
 80015f8:	7823      	ldrb	r3, [r4, #0]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d026      	beq.n	800164c <spi_lld_serve_rx_interrupt+0xac>
 80015fe:	2320      	movs	r3, #32
 8001600:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8001604:	2100      	movs	r1, #0
 8001606:	f104 0008 	add.w	r0, r4, #8
 800160a:	f7ff fdb9 	bl	8001180 <chThdResumeI>
 800160e:	2300      	movs	r3, #0
 8001610:	f383 8811 	msr	BASEPRI, r3
  }
}
 8001614:	bd38      	pop	{r3, r4, r5, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8001616:	06eb      	lsls	r3, r5, #27
 8001618:	d503      	bpl.n	8001622 <spi_lld_serve_rx_interrupt+0x82>
      _spi_isr_half_code(spip);
 800161a:	684b      	ldr	r3, [r1, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f9      	beq.n	8001614 <spi_lld_serve_rx_interrupt+0x74>
 8001620:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8001622:	06ad      	lsls	r5, r5, #26
 8001624:	d5f6      	bpl.n	8001614 <spi_lld_serve_rx_interrupt+0x74>
      _spi_isr_full_code(spip);
 8001626:	6863      	ldr	r3, [r4, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f2      	beq.n	8001614 <spi_lld_serve_rx_interrupt+0x74>
 800162e:	2204      	movs	r2, #4
 8001630:	7022      	strb	r2, [r4, #0]
 8001632:	4620      	mov	r0, r4
 8001634:	4798      	blx	r3
 8001636:	7823      	ldrb	r3, [r4, #0]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d1eb      	bne.n	8001614 <spi_lld_serve_rx_interrupt+0x74>
 800163c:	2303      	movs	r3, #3
 800163e:	7023      	strb	r3, [r4, #0]
}
 8001640:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001642:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <spi_lld_serve_rx_interrupt+0xb4>)
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <spi_lld_serve_rx_interrupt+0xb8>)
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
 800164a:	e7fe      	b.n	800164a <spi_lld_serve_rx_interrupt+0xaa>
    _spi_isr_code(spip);
 800164c:	2302      	movs	r3, #2
 800164e:	7023      	strb	r3, [r4, #0]
 8001650:	e7d5      	b.n	80015fe <spi_lld_serve_rx_interrupt+0x5e>
 8001652:	bf00      	nop
 8001654:	200019e0 	.word	0x200019e0
 8001658:	08008348 	.word	0x08008348
 800165c:	00000000 	.word	0x00000000

08001660 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001660:	f011 0f0c 	tst.w	r1, #12
 8001664:	d100      	bne.n	8001668 <spi_lld_serve_tx_interrupt+0x8>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8001666:	4770      	bx	lr
 8001668:	b672      	cpsid	i
 800166a:	4b02      	ldr	r3, [pc, #8]	; (8001674 <spi_lld_serve_tx_interrupt+0x14>)
 800166c:	4a02      	ldr	r2, [pc, #8]	; (8001678 <spi_lld_serve_tx_interrupt+0x18>)
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
 8001670:	e7fe      	b.n	8001670 <spi_lld_serve_tx_interrupt+0x10>
 8001672:	bf00      	nop
 8001674:	200019e0 	.word	0x200019e0
 8001678:	08008348 	.word	0x08008348
 800167c:	00000000 	.word	0x00000000

08001680 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001680:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8001684:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001686:	68dc      	ldr	r4, [r3, #12]
 8001688:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
 800168e:	b9f3      	cbnz	r3, 80016ce <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8001690:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001692:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8001696:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800169a:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d02a      	beq.n	80016fe <usb_lld_start_in+0x7e>
 80016a8:	b208      	sxth	r0, r1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80016aa:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80016ae:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80016b0:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 80016b4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80016b8:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80016bc:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 80016c0:	fa03 f101 	lsl.w	r1, r3, r1
 80016c4:	4301      	orrs	r1, r0
}
 80016c6:	bc30      	pop	{r4, r5}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80016c8:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 80016cc:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 80016ce:	b919      	cbnz	r1, 80016d8 <usb_lld_start_in+0x58>
 80016d0:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 80016d2:	bf84      	itt	hi
 80016d4:	2340      	movhi	r3, #64	; 0x40
 80016d6:	6013      	strhi	r3, [r2, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80016d8:	8a25      	ldrh	r5, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80016da:	6d42      	ldr	r2, [r0, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80016dc:	1e68      	subs	r0, r5, #1
 80016de:	4418      	add	r0, r3
 80016e0:	fbb0 f0f5 	udiv	r0, r0, r5
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80016e4:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 80016e8:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80016ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f0:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d1d4      	bne.n	80016a8 <usb_lld_start_in+0x28>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80016fe:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8001702:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001706:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 800170a:	b208      	sxth	r0, r1
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 800170c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8001710:	bf14      	ite	ne
 8001712:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8001716:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 800171a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 800171e:	e7c4      	b.n	80016aa <usb_lld_start_in+0x2a>

08001720 <otg_epin_handler.constprop.0>:
  stm32_otg_t *otgp = usbp->otg;
 8001720:	4a20      	ldr	r2, [pc, #128]	; (80017a4 <otg_epin_handler.constprop.0+0x84>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8001722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001724:	6d56      	ldr	r6, [r2, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8001726:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800172a:	4604      	mov	r4, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800172c:	f8d3 5908 	ldr.w	r5, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8001730:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8001734:	07e8      	lsls	r0, r5, #31
 8001736:	d503      	bpl.n	8001740 <otg_epin_handler.constprop.0+0x20>
 8001738:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 800173c:	07d9      	lsls	r1, r3, #31
 800173e:	d408      	bmi.n	8001752 <otg_epin_handler.constprop.0+0x32>
  if ((epint & DIEPINT_TXFE) &&
 8001740:	062b      	lsls	r3, r5, #24
 8001742:	d505      	bpl.n	8001750 <otg_epin_handler.constprop.0+0x30>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8001744:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 8001748:	2301      	movs	r3, #1
 800174a:	40a3      	lsls	r3, r4
  if ((epint & DIEPINT_TXFE) &&
 800174c:	4213      	tst	r3, r2
 800174e:	d115      	bne.n	800177c <otg_epin_handler.constprop.0+0x5c>
}
 8001750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001752:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8001756:	68d8      	ldr	r0, [r3, #12]
 8001758:	6943      	ldr	r3, [r0, #20]
    if (isp->txsize < isp->totsize) {
 800175a:	681f      	ldr	r7, [r3, #0]
 800175c:	68d9      	ldr	r1, [r3, #12]
 800175e:	428f      	cmp	r7, r1
 8001760:	d311      	bcc.n	8001786 <otg_epin_handler.constprop.0+0x66>
      _usb_isr_invoke_in_cb(usbp, ep);
 8001762:	8913      	ldrh	r3, [r2, #8]
 8001764:	6887      	ldr	r7, [r0, #8]
 8001766:	2101      	movs	r1, #1
 8001768:	40a1      	lsls	r1, r4
 800176a:	ea23 0301 	bic.w	r3, r3, r1
 800176e:	8113      	strh	r3, [r2, #8]
 8001770:	2f00      	cmp	r7, #0
 8001772:	d0e5      	beq.n	8001740 <otg_epin_handler.constprop.0+0x20>
 8001774:	4610      	mov	r0, r2
 8001776:	4621      	mov	r1, r4
 8001778:	47b8      	blx	r7
 800177a:	e7e1      	b.n	8001740 <otg_epin_handler.constprop.0+0x20>
    otg_txfifo_handler(usbp, ep);
 800177c:	4620      	mov	r0, r4
}
 800177e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    otg_txfifo_handler(usbp, ep);
 8001782:	f7ff ba1d 	b.w	8000bc0 <otg_txfifo_handler.constprop.0>
      isp->txsize = isp->totsize - isp->txsize;
 8001786:	1bc9      	subs	r1, r1, r7
      isp->txcnt  = 0;
 8001788:	2700      	movs	r7, #0
 800178a:	e9c3 1700 	strd	r1, r7, [r3]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800178e:	2320      	movs	r3, #32
 8001790:	f383 8811 	msr	BASEPRI, r3
      usb_lld_start_in(usbp, ep);
 8001794:	4610      	mov	r0, r2
 8001796:	4621      	mov	r1, r4
 8001798:	f7ff ff72 	bl	8001680 <usb_lld_start_in>
 800179c:	f387 8811 	msr	BASEPRI, r7
 80017a0:	e7ce      	b.n	8001740 <otg_epin_handler.constprop.0+0x20>
 80017a2:	bf00      	nop
 80017a4:	200018fc 	.word	0x200018fc
	...

080017b0 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80017b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 80017b4:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80017b6:	68dd      	ldr	r5, [r3, #12]
 80017b8:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 80017ba:	681c      	ldr	r4, [r3, #0]
 80017bc:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 80017be:	b919      	cbnz	r1, 80017c8 <usb_lld_start_out+0x18>
 80017c0:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 80017c2:	bf84      	itt	hi
 80017c4:	2440      	movhi	r4, #64	; 0x40
 80017c6:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80017c8:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80017ca:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80017cc:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4422      	add	r2, r4
 80017d2:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	3303      	adds	r3, #3
 80017dc:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80017e0:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80017e4:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80017e8:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80017ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80017f0:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80017f2:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80017f6:	d00a      	beq.n	800180e <usb_lld_start_out+0x5e>
 80017f8:	b209      	sxth	r1, r1
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80017fa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80017fe:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8001800:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8001804:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001808:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800180c:	4770      	bx	lr
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800180e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001812:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8001816:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 800181a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800181e:	bf14      	ite	ne
 8001820:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8001824:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8001828:	b209      	sxth	r1, r1
 800182a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800182e:	e7e4      	b.n	80017fa <usb_lld_start_out+0x4a>

08001830 <otg_epout_handler.constprop.0>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001834:	4f24      	ldr	r7, [pc, #144]	; (80018c8 <otg_epout_handler.constprop.0+0x98>)
 8001836:	6d7e      	ldr	r6, [r7, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001838:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800183c:	4604      	mov	r4, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800183e:	f8d3 5b08 	ldr.w	r5, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8001842:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8001846:	0728      	lsls	r0, r5, #28
 8001848:	d503      	bpl.n	8001852 <otg_epout_handler.constprop.0+0x22>
 800184a:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800184e:	0719      	lsls	r1, r3, #28
 8001850:	d431      	bmi.n	80018b6 <otg_epout_handler.constprop.0+0x86>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8001852:	07ea      	lsls	r2, r5, #31
 8001854:	d52d      	bpl.n	80018b2 <otg_epout_handler.constprop.0+0x82>
 8001856:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800185a:	07db      	lsls	r3, r3, #31
 800185c:	d529      	bpl.n	80018b2 <otg_epout_handler.constprop.0+0x82>
    osp = usbp->epc[ep]->out_state;
 800185e:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001862:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
 8001864:	b95c      	cbnz	r4, 800187e <otg_epout_handler.constprop.0+0x4e>
    osp = usbp->epc[ep]->out_state;
 8001866:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8001868:	8a48      	ldrh	r0, [r1, #18]
 800186a:	6855      	ldr	r5, [r2, #4]
 800186c:	fbb5 f3f0 	udiv	r3, r5, r0
 8001870:	fb00 5313 	mls	r3, r0, r3, r5
 8001874:	b91b      	cbnz	r3, 800187e <otg_epout_handler.constprop.0+0x4e>
          (osp->rxsize < osp->totsize)) {
 8001876:	6810      	ldr	r0, [r2, #0]
 8001878:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 800187a:	4298      	cmp	r0, r3
 800187c:	d30d      	bcc.n	800189a <otg_epout_handler.constprop.0+0x6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	68cd      	ldr	r5, [r1, #12]
 8001882:	2201      	movs	r2, #1
 8001884:	40a2      	lsls	r2, r4
 8001886:	ea23 0302 	bic.w	r3, r3, r2
 800188a:	817b      	strh	r3, [r7, #10]
 800188c:	b18d      	cbz	r5, 80018b2 <otg_epout_handler.constprop.0+0x82>
 800188e:	4621      	mov	r1, r4
 8001890:	462b      	mov	r3, r5
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <otg_epout_handler.constprop.0+0x98>)
}
 8001894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
 8001898:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
 800189a:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
 800189c:	e9c2 3400 	strd	r3, r4, [r2]
 80018a0:	2320      	movs	r3, #32
 80018a2:	f383 8811 	msr	BASEPRI, r3
        usb_lld_start_out(usbp, ep);
 80018a6:	4808      	ldr	r0, [pc, #32]	; (80018c8 <otg_epout_handler.constprop.0+0x98>)
 80018a8:	4621      	mov	r1, r4
 80018aa:	f7ff ff81 	bl	80017b0 <usb_lld_start_out>
 80018ae:	f384 8811 	msr	BASEPRI, r4
}
 80018b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
 80018b6:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80018ba:	4621      	mov	r1, r4
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4638      	mov	r0, r7
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4798      	blx	r3
 80018c4:	e7c5      	b.n	8001852 <otg_epout_handler.constprop.0+0x22>
 80018c6:	bf00      	nop
 80018c8:	200018fc 	.word	0x200018fc
 80018cc:	00000000 	.word	0x00000000

080018d0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80018d0:	f011 0f0c 	tst.w	r1, #12
 80018d4:	d115      	bne.n	8001902 <i2c_lld_serve_tx_end_irq+0x32>
  I2C_TypeDef *dp = i2cp->i2c;
 80018d6:	e9d0 100c 	ldrd	r1, r0, [r0, #48]	; 0x30
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 80018da:	680a      	ldr	r2, [r1, #0]
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f023 031f 	bic.w	r3, r3, #31
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80018e2:	b410      	push	{r4}
  dmaStreamDisable(i2cp->dmatx);
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	07db      	lsls	r3, r3, #31
 80018ea:	d4fc      	bmi.n	80018e6 <i2c_lld_serve_tx_end_irq+0x16>
 80018ec:	7a4c      	ldrb	r4, [r1, #9]
 80018ee:	684a      	ldr	r2, [r1, #4]
 80018f0:	233d      	movs	r3, #61	; 0x3d
 80018f2:	40a3      	lsls	r3, r4
 80018f4:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80018f6:	6843      	ldr	r3, [r0, #4]
}
 80018f8:	bc10      	pop	{r4}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80018fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fe:	6043      	str	r3, [r0, #4]
}
 8001900:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8001902:	b672      	cpsid	i
 8001904:	4b01      	ldr	r3, [pc, #4]	; (800190c <i2c_lld_serve_tx_end_irq+0x3c>)
 8001906:	4a02      	ldr	r2, [pc, #8]	; (8001910 <i2c_lld_serve_tx_end_irq+0x40>)
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
 800190a:	e7fe      	b.n	800190a <i2c_lld_serve_tx_end_irq+0x3a>
 800190c:	200019e0 	.word	0x200019e0
 8001910:	08008348 	.word	0x08008348
	...

08001920 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001920:	f011 0f0c 	tst.w	r1, #12
 8001924:	d126      	bne.n	8001974 <i2c_lld_serve_rx_end_irq+0x54>
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001926:	b570      	push	{r4, r5, r6, lr}
  dmaStreamDisable(i2cp->dmarx);
 8001928:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  I2C_TypeDef *dp = i2cp->i2c;
 800192a:	6b42      	ldr	r2, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	f021 011f 	bic.w	r1, r1, #31
 8001934:	6019      	str	r1, [r3, #0]
 8001936:	681c      	ldr	r4, [r3, #0]
 8001938:	f014 0401 	ands.w	r4, r4, #1
 800193c:	d1fb      	bne.n	8001936 <i2c_lld_serve_rx_end_irq+0x16>
 800193e:	7a6e      	ldrb	r6, [r5, #9]
 8001940:	6869      	ldr	r1, [r5, #4]
 8001942:	233d      	movs	r3, #61	; 0x3d
 8001944:	40b3      	lsls	r3, r6
 8001946:	600b      	str	r3, [r1, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 8001948:	6853      	ldr	r3, [r2, #4]
 800194a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800194e:	6053      	str	r3, [r2, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8001950:	6813      	ldr	r3, [r2, #0]
 8001952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8001958:	6813      	ldr	r3, [r2, #0]
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001960:	2320      	movs	r3, #32
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	301c      	adds	r0, #28
 8001968:	4621      	mov	r1, r4
 800196a:	f7ff fc09 	bl	8001180 <chThdResumeI>
 800196e:	f384 8811 	msr	BASEPRI, r4
}
 8001972:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
 8001976:	4b02      	ldr	r3, [pc, #8]	; (8001980 <i2c_lld_serve_rx_end_irq+0x60>)
 8001978:	4a02      	ldr	r2, [pc, #8]	; (8001984 <i2c_lld_serve_rx_end_irq+0x64>)
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
 800197c:	e7fe      	b.n	800197c <i2c_lld_serve_rx_end_irq+0x5c>
 800197e:	bf00      	nop
 8001980:	200019e0 	.word	0x200019e0
 8001984:	08008348 	.word	0x08008348
	...

08001990 <_pal_lld_setgroupmode>:
                           iomode_t mode) {
 8001990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001994:	f002 0803 	and.w	r8, r2, #3
 8001998:	4647      	mov	r7, r8
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800199a:	f3c2 0680 	ubfx	r6, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800199e:	f3c2 05c1 	ubfx	r5, r2, #3, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80019a2:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  uint32_t bit     = 0;
 80019a6:	2400      	movs	r4, #0
      m4 = 15 << ((bit & 7) * 4);
 80019a8:	f04f 0b0f 	mov.w	fp, #15
      m1 = 1 << bit;
 80019ac:	f04f 0a01 	mov.w	sl, #1
 80019b0:	e013      	b.n	80019da <_pal_lld_setgroupmode+0x4a>
        port->MODER   = (port->MODER & ~m2) | moder;
 80019b2:	f8d0 9000 	ldr.w	r9, [r0]
 80019b6:	ea03 0309 	and.w	r3, r3, r9
 80019ba:	433b      	orrs	r3, r7
        if (bit < 8)
 80019bc:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80019be:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80019c0:	d841      	bhi.n	8001a46 <_pal_lld_setgroupmode+0xb6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80019c2:	6a03      	ldr	r3, [r0, #32]
 80019c4:	ea23 0202 	bic.w	r2, r3, r2
 80019c8:	ea42 020e 	orr.w	r2, r2, lr
 80019cc:	6202      	str	r2, [r0, #32]
    if (!mask)
 80019ce:	0849      	lsrs	r1, r1, #1
 80019d0:	d037      	beq.n	8001a42 <_pal_lld_setgroupmode+0xb2>
    otyper <<= 1;
 80019d2:	0076      	lsls	r6, r6, #1
    ospeedr <<= 2;
 80019d4:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 80019d6:	00bf      	lsls	r7, r7, #2
    bit++;
 80019d8:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 80019da:	07cb      	lsls	r3, r1, #31
 80019dc:	d5f7      	bpl.n	80019ce <_pal_lld_setgroupmode+0x3e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80019de:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80019e0:	fa0a f204 	lsl.w	r2, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80019e4:	ea23 0302 	bic.w	r3, r3, r2
 80019e8:	4333      	orrs	r3, r6
 80019ea:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80019ec:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 80019ee:	f04f 0e03 	mov.w	lr, #3
 80019f2:	0063      	lsls	r3, r4, #1
 80019f4:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80019f8:	ea22 0203 	bic.w	r2, r2, r3
 80019fc:	432a      	orrs	r2, r5
 80019fe:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001a00:	f8d0 e00c 	ldr.w	lr, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8001a04:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001a08:	ea2e 0e03 	bic.w	lr, lr, r3
      altrmask = altr << ((bit & 7) * 4);
 8001a0c:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001a0e:	f1b8 0f02 	cmp.w	r8, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001a12:	f8c0 e00c 	str.w	lr, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001a16:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8001a1a:	fa0c fe02 	lsl.w	lr, ip, r2
      m4 = 15 << ((bit & 7) * 4);
 8001a1e:	fa0b f202 	lsl.w	r2, fp, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001a22:	d1c6      	bne.n	80019b2 <_pal_lld_setgroupmode+0x22>
        if (bit < 8)
 8001a24:	2c07      	cmp	r4, #7
 8001a26:	d815      	bhi.n	8001a54 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001a28:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8001a2c:	ea29 0202 	bic.w	r2, r9, r2
 8001a30:	ea42 020e 	orr.w	r2, r2, lr
 8001a34:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8001a36:	6802      	ldr	r2, [r0, #0]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	433b      	orrs	r3, r7
    if (!mask)
 8001a3c:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8001a3e:	6003      	str	r3, [r0, #0]
    if (!mask)
 8001a40:	d1c7      	bne.n	80019d2 <_pal_lld_setgroupmode+0x42>
}
 8001a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001a46:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a48:	ea23 0202 	bic.w	r2, r3, r2
 8001a4c:	ea42 020e 	orr.w	r2, r2, lr
 8001a50:	6242      	str	r2, [r0, #36]	; 0x24
 8001a52:	e7bc      	b.n	80019ce <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001a54:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 8001a58:	ea29 0202 	bic.w	r2, r9, r2
 8001a5c:	ea42 020e 	orr.w	r2, r2, lr
 8001a60:	6242      	str	r2, [r0, #36]	; 0x24
 8001a62:	e7e8      	b.n	8001a36 <_pal_lld_setgroupmode+0xa6>
	...

08001a70 <dmaStreamAllocI.part.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8001a70:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8001a72:	4e30      	ldr	r6, [pc, #192]	; (8001b34 <dmaStreamAllocI.part.0+0xc4>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8001a74:	4604      	mov	r4, r0
    uint32_t mask = (1U << i);
 8001a76:	2501      	movs	r5, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8001a78:	6830      	ldr	r0, [r6, #0]
    uint32_t mask = (1U << i);
 8001a7a:	40a5      	lsls	r5, r4
    if ((dma.allocated_mask & mask) == 0U) {
 8001a7c:	4205      	tst	r5, r0

      return dmastp;
    }
  }

  return NULL;
 8001a7e:	bf18      	it	ne
 8001a80:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8001a82:	d001      	beq.n	8001a88 <dmaStreamAllocI.part.0+0x18>
}
 8001a84:	bcf0      	pop	{r4, r5, r6, r7}
 8001a86:	4770      	bx	lr
      dma.allocated_mask  |= mask;
 8001a88:	4328      	orrs	r0, r5
      dma.streams[i].func  = func;
 8001a8a:	eb06 07c4 	add.w	r7, r6, r4, lsl #3
      dma.allocated_mask  |= mask;
 8001a8e:	6030      	str	r0, [r6, #0]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8001a90:	4e29      	ldr	r6, [pc, #164]	; (8001b38 <dmaStreamAllocI.part.0+0xc8>)
      dma.streams[i].func  = func;
 8001a92:	607a      	str	r2, [r7, #4]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8001a94:	200c      	movs	r0, #12
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8001a96:	f015 0fff 	tst.w	r5, #255	; 0xff
      dma.streams[i].param = param;
 8001a9a:	60bb      	str	r3, [r7, #8]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8001a9c:	fb00 6004 	mla	r0, r0, r4, r6
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8001aa0:	d009      	beq.n	8001ab6 <dmaStreamAllocI.part.0+0x46>
        rccEnableDMA1(true);
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <dmaStreamAllocI.part.0+0xcc>)
 8001aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8001aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001ab2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 8001ab6:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8001aba:	d130      	bne.n	8001b1e <dmaStreamAllocI.part.0+0xae>
      dmaStreamDisable(dmastp);
 8001abc:	230c      	movs	r3, #12
 8001abe:	fb03 f304 	mul.w	r3, r3, r4
 8001ac2:	58f2      	ldr	r2, [r6, r3]
 8001ac4:	6813      	ldr	r3, [r2, #0]
 8001ac6:	f023 031f 	bic.w	r3, r3, #31
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	6813      	ldr	r3, [r2, #0]
 8001ace:	f013 0301 	ands.w	r3, r3, #1
 8001ad2:	d1fb      	bne.n	8001acc <dmaStreamAllocI.part.0+0x5c>
 8001ad4:	250c      	movs	r5, #12
 8001ad6:	fb05 6404 	mla	r4, r5, r4, r6
 8001ada:	263d      	movs	r6, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 8001adc:	7ae5      	ldrb	r5, [r4, #11]
      dmaStreamDisable(dmastp);
 8001ade:	7a67      	ldrb	r7, [r4, #9]
 8001ae0:	f8d4 c004 	ldr.w	ip, [r4, #4]
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ae4:	096c      	lsrs	r4, r5, #5
 8001ae6:	00a4      	lsls	r4, r4, #2
 8001ae8:	40be      	lsls	r6, r7
 8001aea:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001aee:	f105 4760 	add.w	r7, r5, #3758096384	; 0xe0000000
 8001af2:	f8cc 6000 	str.w	r6, [ip]
 8001af6:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001afa:	2601      	movs	r6, #1
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001afc:	0109      	lsls	r1, r1, #4
 8001afe:	f507 4761 	add.w	r7, r7, #57600	; 0xe100
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b02:	f005 051f 	and.w	r5, r5, #31
 8001b06:	fa06 f505 	lsl.w	r5, r6, r5
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001b0a:	b2c9      	uxtb	r1, r1
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001b0c:	2621      	movs	r6, #33	; 0x21
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001b0e:	6013      	str	r3, [r2, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001b10:	6156      	str	r6, [r2, #20]
 8001b12:	f887 1300 	strb.w	r1, [r7, #768]	; 0x300
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b16:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001b1a:	6025      	str	r5, [r4, #0]
 8001b1c:	e7b2      	b.n	8001a84 <dmaStreamAllocI.part.0+0x14>
        rccEnableDMA2(true);
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <dmaStreamAllocI.part.0+0xcc>)
 8001b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b22:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
 8001b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b2a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b2e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	e7c3      	b.n	8001abc <dmaStreamAllocI.part.0+0x4c>
 8001b34:	20001bbc 	.word	0x20001bbc
 8001b38:	08008b20 	.word	0x08008b20
 8001b3c:	40023800 	.word	0x40023800

08001b40 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001b46:	4604      	mov	r4, r0
 8001b48:	2b15      	cmp	r3, #21
 8001b4a:	d816      	bhi.n	8001b7a <_usb_ep0out+0x3a>
 8001b4c:	e8df f003 	tbb	[pc, r3]
 8001b50:	15151516 	.word	0x15151516
 8001b54:	15161515 	.word	0x15161515
 8001b58:	16161615 	.word	0x16161615
 8001b5c:	15151515 	.word	0x15151515
 8001b60:	15151515 	.word	0x15151515
 8001b64:	2c0b      	.short	0x2c0b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8001b66:	68c3      	ldr	r3, [r0, #12]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	b92b      	cbnz	r3, 8001b7a <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8001b6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b70:	b103      	cbz	r3, 8001b74 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8001b72:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001b7c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001b7e:	6841      	ldr	r1, [r0, #4]
 8001b80:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001b84:	680d      	ldr	r5, [r1, #0]
 8001b86:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001b8a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001b8e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001b92:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001b96:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001b9a:	b10d      	cbz	r5, 8001ba0 <_usb_ep0out+0x60>
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001ba8:	230b      	movs	r3, #11
 8001baa:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001bae:	2320      	movs	r3, #32
 8001bb0:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001bb4:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001bb6:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001bb8:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8001bba:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001bc2:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001bc4:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001bc8:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8001bca:	f7ff fd59 	bl	8001680 <usb_lld_start_in>
 8001bce:	f385 8811 	msr	BASEPRI, r5
}
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
	...

08001be0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001be6:	4604      	mov	r4, r0
 8001be8:	2b15      	cmp	r3, #21
 8001bea:	d821      	bhi.n	8001c30 <_usb_ep0in+0x50>
 8001bec:	e8df f003 	tbb	[pc, r3]
 8001bf0:	2020200b 	.word	0x2020200b
 8001bf4:	200b2020 	.word	0x200b2020
 8001bf8:	48312120 	.word	0x48312120
 8001bfc:	20202020 	.word	0x20202020
 8001c00:	20202020 	.word	0x20202020
 8001c04:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001c06:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001c08:	6841      	ldr	r1, [r0, #4]
 8001c0a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001c0e:	680d      	ldr	r5, [r1, #0]
 8001c10:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001c14:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001c18:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001c1c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001c20:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001c24:	b10d      	cbz	r5, 8001c2a <_usb_ep0in+0x4a>
 8001c26:	2106      	movs	r1, #6
 8001c28:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001c30:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8001c32:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 8001c36:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 8001c3a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 8001c3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
 8001c40:	4299      	cmp	r1, r3
 8001c42:	d206      	bcs.n	8001c52 <_usb_ep0in+0x72>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001c44:	68c3      	ldr	r3, [r0, #12]
 8001c46:	8a1b      	ldrh	r3, [r3, #16]
 8001c48:	fbb1 f5f3 	udiv	r5, r1, r3
 8001c4c:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
 8001c50:	b1ed      	cbz	r5, 8001c8e <_usb_ep0in+0xae>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001c52:	2314      	movs	r3, #20
 8001c54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001c58:	2320      	movs	r3, #32
 8001c5a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8001c5e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001c60:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001c62:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8001c64:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001c6c:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001c6e:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8001c72:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7ff fd9b 	bl	80017b0 <usb_lld_start_out>
 8001c7a:	f385 8811 	msr	BASEPRI, r5
}
 8001c7e:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8001c80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c82:	b103      	cbz	r3, 8001c86 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 8001c84:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001c8c:	bd38      	pop	{r3, r4, r5, pc}
 8001c8e:	2320      	movs	r3, #32
 8001c90:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001c94:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001c96:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001c98:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001ca0:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001ca2:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001ca6:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8001ca8:	f7ff fcea 	bl	8001680 <usb_lld_start_in>
 8001cac:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8001cb0:	230a      	movs	r3, #10
 8001cb2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
	...

08001cc0 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8001cc0:	b4f0      	push	{r4, r5, r6, r7}
  isp = usbp->epc[ep]->in_state;
 8001cc2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001cc6:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001cc8:	f8d5 c00c 	ldr.w	ip, [r5, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001ccc:	2501      	movs	r5, #1
  isp = usbp->epc[ep]->in_state;
 8001cce:	f8dc 6014 	ldr.w	r6, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001cd2:	408d      	lsls	r5, r1
 8001cd4:	433d      	orrs	r5, r7
  isp->txcnt  = 0;
 8001cd6:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001cd8:	8105      	strh	r5, [r0, #8]
  isp->txcnt  = 0;
 8001cda:	e9c6 3700 	strd	r3, r7, [r6]
  isp->txbuf  = buf;
 8001cde:	60b2      	str	r2, [r6, #8]
}
 8001ce0:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 8001ce2:	f7ff bccd 	b.w	8001680 <usb_lld_start_in>
 8001ce6:	bf00      	nop
	...

08001cf0 <usbDisableEndpointsI>:
  otg_ram_reset(usbp);
 8001cf0:	6d81      	ldr	r1, [r0, #88]	; 0x58
  usbp->transmitting &= 1U;
 8001cf2:	6883      	ldr	r3, [r0, #8]
void usbDisableEndpointsI(USBDriver *usbp) {
 8001cf4:	b4f0      	push	{r4, r5, r6, r7}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8001cf6:	680c      	ldr	r4, [r1, #0]
 8001cf8:	65c4      	str	r4, [r0, #92]	; 0x5c
    usbp->epc[i] = NULL;
 8001cfa:	2200      	movs	r2, #0
  usbp->transmitting &= 1U;
 8001cfc:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001d00:	688f      	ldr	r7, [r1, #8]
  otg_disable_ep(usbp);
 8001d02:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001d04:	6083      	str	r3, [r0, #8]
    usbp->epc[i] = NULL;
 8001d06:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8001d0a:	6182      	str	r2, [r0, #24]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001d0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001d10:	e000      	b.n	8001d14 <usbDisableEndpointsI+0x24>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001d12:	4632      	mov	r2, r6
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001d14:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8001d18:	460b      	mov	r3, r1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8001d1a:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 8001d1e:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001d20:	f102 0601 	add.w	r6, r2, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8001d24:	da05      	bge.n	8001d32 <usbDisableEndpointsI+0x42>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8001d26:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 8001d2a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8001d2e:	f8c1 0900 	str.w	r0, [r1, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8001d32:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 8001d36:	2800      	cmp	r0, #0
 8001d38:	da05      	bge.n	8001d46 <usbDisableEndpointsI+0x56>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8001d3a:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 8001d3e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8001d42:	f8c1 0b00 	str.w	r0, [r1, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001d46:	42ba      	cmp	r2, r7
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001d48:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8001d4c:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001d50:	d1df      	bne.n	8001d12 <usbDisableEndpointsI+0x22>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8001d52:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001d56:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 8001d5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
	...

08001d70 <_ctl.lto_priv.0>:
}
 8001d70:	2000      	movs	r0, #0
 8001d72:	4770      	bx	lr
	...

08001d80 <_ctl.lto_priv.1>:
 8001d80:	2000      	movs	r0, #0
 8001d82:	4770      	bx	lr
	...

08001d90 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8001d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001d92:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 8001d96:	680a      	ldr	r2, [r1, #0]
 8001d98:	7813      	ldrb	r3, [r2, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d102      	bne.n	8001da4 <sdu_start_receive+0x14>
 8001d9e:	7a03      	ldrb	r3, [r0, #8]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d001      	beq.n	8001da8 <sdu_start_receive+0x18>
    return true;
 8001da4:	2001      	movs	r0, #1
}
 8001da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001da8:	790c      	ldrb	r4, [r1, #4]
 8001daa:	8955      	ldrh	r5, [r2, #10]
 8001dac:	2301      	movs	r3, #1
 8001dae:	fa03 f404 	lsl.w	r4, r3, r4
 8001db2:	4225      	tst	r5, r4
 8001db4:	d1f6      	bne.n	8001da4 <sdu_start_receive+0x14>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001db6:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 8001dba:	42b4      	cmp	r4, r6
 8001dbc:	d014      	beq.n	8001de8 <sdu_start_receive+0x58>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001dbe:	7949      	ldrb	r1, [r1, #5]
  osp = usbp->epc[ep]->out_state;
 8001dc0:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001dc4:	2001      	movs	r0, #1
  osp = usbp->epc[ep]->out_state;
 8001dc6:	68db      	ldr	r3, [r3, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001dc8:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 8001dca:	699e      	ldr	r6, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001dcc:	4305      	orrs	r5, r0
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8001dce:	1d23      	adds	r3, r4, #4
  osp->rxsize = n;
 8001dd0:	f44f 7780 	mov.w	r7, #256	; 0x100
  osp->rxcnt  = 0;
 8001dd4:	2400      	movs	r4, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001dd6:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 8001dd8:	4610      	mov	r0, r2
  osp->rxcnt  = 0;
 8001dda:	e9c6 7400 	strd	r7, r4, [r6]
  osp->rxbuf  = buf;
 8001dde:	60b3      	str	r3, [r6, #8]
  usb_lld_start_out(usbp, ep);
 8001de0:	f7ff fce6 	bl	80017b0 <usb_lld_start_out>
  return false;
 8001de4:	4620      	mov	r0, r4
}
 8001de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ibqIsFullI(ibqp)) {
 8001de8:	6980      	ldr	r0, [r0, #24]
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d0e7      	beq.n	8001dbe <sdu_start_receive+0x2e>
 8001dee:	e7d9      	b.n	8001da4 <sdu_start_receive+0x14>

08001df0 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8001df0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001df2:	f7ff bfcd 	b.w	8001d90 <sdu_start_receive>
 8001df6:	bf00      	nop
	...

08001e00 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001e00:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001e02:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001e04:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8001e08:	b194      	cbz	r4, 8001e30 <sduDataReceived+0x30>
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001e10:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001e14:	6813      	ldr	r3, [r2, #0]
 8001e16:	7952      	ldrb	r2, [r2, #5]
 8001e18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 8001e22:	b935      	cbnz	r5, 8001e32 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff ffb3 	bl	8001d90 <sdu_start_receive>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f383 8811 	msr	BASEPRI, r3
}
 8001e30:	bd38      	pop	{r3, r4, r5, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8001e32:	2104      	movs	r1, #4
 8001e34:	1860      	adds	r0, r4, r1
 8001e36:	f7ff f973 	bl	8001120 <chEvtBroadcastFlagsI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001e3a:	69e3      	ldr	r3, [r4, #28]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8001e3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)ibqp->bwrptr) = size;
 8001e3e:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8001e40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 8001e42:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8001e44:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 8001e46:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 8001e48:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter++;
 8001e4a:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 8001e4e:	bf28      	it	cs
 8001e50:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 8001e52:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8001e54:	f104 000c 	add.w	r0, r4, #12
    ibqp->bwrptr = ibqp->buffers;
 8001e58:	bf28      	it	cs
 8001e5a:	61e3      	strcs	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 8001e5c:	f7ff f950 	bl	8001100 <chThdDequeueNextI.constprop.0>
 8001e60:	e7e0      	b.n	8001e24 <sduDataReceived+0x24>
 8001e62:	bf00      	nop
	...

08001e70 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8001e70:	4603      	mov	r3, r0

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001e72:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8001e76:	4282      	cmp	r2, r0
 8001e78:	d003      	beq.n	8001e82 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8001e7a:	f850 3b04 	ldr.w	r3, [r0], #4
 8001e7e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001e80:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f8      	beq.n	8001e7a <obqGetFullBufferI+0xa>
    return NULL;
 8001e88:	2000      	movs	r0, #0
 8001e8a:	4770      	bx	lr
 8001e8c:	0000      	movs	r0, r0
	...

08001e90 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8001e90:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001e92:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001e94:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	7819      	ldrb	r1, [r3, #0]
 8001e9c:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 8001e9e:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001ea0:	d102      	bne.n	8001ea8 <obnotify+0x18>
 8001ea2:	7a21      	ldrb	r1, [r4, #8]
 8001ea4:	2902      	cmp	r1, #2
 8001ea6:	d001      	beq.n	8001eac <obnotify+0x1c>
}
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd10      	pop	{r4, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001eac:	7911      	ldrb	r1, [r2, #4]
 8001eae:	891a      	ldrh	r2, [r3, #8]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	408b      	lsls	r3, r1
 8001eb4:	4213      	tst	r3, r2
 8001eb6:	d1f7      	bne.n	8001ea8 <obnotify+0x18>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001eb8:	a901      	add	r1, sp, #4
 8001eba:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001ebe:	f7ff ffd7 	bl	8001e70 <obqGetFullBufferI>
 8001ec2:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001ec4:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001ec8:	9b01      	ldr	r3, [sp, #4]
 8001eca:	7901      	ldrb	r1, [r0, #4]
 8001ecc:	6800      	ldr	r0, [r0, #0]
 8001ece:	f7ff fef7 	bl	8001cc0 <usbStartTransmitI>
 8001ed2:	e7e9      	b.n	8001ea8 <obnotify+0x18>
	...

08001ee0 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001eea:	4c1e      	ldr	r4, [pc, #120]	; (8001f64 <sof_handler+0x84>)
 8001eec:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	7819      	ldrb	r1, [r3, #0]
 8001ef4:	2904      	cmp	r1, #4
 8001ef6:	d102      	bne.n	8001efe <sof_handler+0x1e>
 8001ef8:	7a21      	ldrb	r1, [r4, #8]
 8001efa:	2902      	cmp	r1, #2
 8001efc:	d004      	beq.n	8001f08 <sof_handler+0x28>
 8001efe:	2300      	movs	r3, #0
 8001f00:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&OSTRICHPORT);
  osalSysUnlockFromISR();
}
 8001f04:	b002      	add	sp, #8
 8001f06:	bd10      	pop	{r4, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001f08:	7911      	ldrb	r1, [r2, #4]
 8001f0a:	891a      	ldrh	r2, [r3, #8]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	408b      	lsls	r3, r1
 8001f10:	4213      	tst	r3, r2
 8001f12:	d1f4      	bne.n	8001efe <sof_handler+0x1e>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001f14:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d1f0      	bne.n	8001efe <sof_handler+0x1e>
 8001f1c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	d0ed      	beq.n	8001efe <sof_handler+0x1e>
 8001f22:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001f24:	2a00      	cmp	r2, #0
 8001f26:	d0ea      	beq.n	8001efe <sof_handler+0x1e>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8001f28:	3a04      	subs	r2, #4

    if (size > 0U) {
 8001f2a:	1ad2      	subs	r2, r2, r3
 8001f2c:	d0e7      	beq.n	8001efe <sof_handler+0x1e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 8001f30:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8001f34:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 8001f36:	428b      	cmp	r3, r1
      obqp->bcounter--;
 8001f38:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 8001f3a:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 8001f3c:	bf24      	itt	cs
 8001f3e:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
 8001f40:	6563      	strcs	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 8001f42:	3a01      	subs	r2, #1
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001f44:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001f46:	a901      	add	r1, sp, #4
 8001f48:	4807      	ldr	r0, [pc, #28]	; (8001f68 <sof_handler+0x88>)
      obqp->bcounter--;
 8001f4a:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 8001f4c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001f4e:	f7ff ff8f 	bl	8001e70 <obqGetFullBufferI>
 8001f52:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001f54:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001f58:	9b01      	ldr	r3, [sp, #4]
 8001f5a:	7901      	ldrb	r1, [r0, #4]
 8001f5c:	6800      	ldr	r0, [r0, #0]
 8001f5e:	f7ff feaf 	bl	8001cc0 <usbStartTransmitI>
 8001f62:	e7cc      	b.n	8001efe <sof_handler+0x1e>
 8001f64:	2000143c 	.word	0x2000143c
 8001f68:	20001480 	.word	0x20001480
 8001f6c:	00000000 	.word	0x00000000

08001f70 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001f74:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001f78:	b082      	sub	sp, #8
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001f7a:	699e      	ldr	r6, [r3, #24]
  if (sdup == NULL) {
 8001f7c:	b1f6      	cbz	r6, 8001fbc <sduDataTransmitted+0x4c>
 8001f7e:	4604      	mov	r4, r0
 8001f80:	460d      	mov	r5, r1
 8001f82:	2320      	movs	r3, #32
 8001f84:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8001f88:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8001f8c:	1d30      	adds	r0, r6, #4
 8001f8e:	2108      	movs	r1, #8
 8001f90:	f7ff f8c6 	bl	8001120 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b993      	cbnz	r3, 8001fc2 <sduDataTransmitted+0x52>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001f9c:	f106 0844 	add.w	r8, r6, #68	; 0x44
 8001fa0:	4640      	mov	r0, r8
 8001fa2:	a901      	add	r1, sp, #4
 8001fa4:	f7ff ff64 	bl	8001e70 <obqGetFullBufferI>
  if (buf != NULL) {
 8001fa8:	4602      	mov	r2, r0
 8001faa:	b320      	cbz	r0, 8001ff6 <sduDataTransmitted+0x86>
    usbStartTransmitI(usbp, ep, buf, n);
 8001fac:	9b01      	ldr	r3, [sp, #4]
 8001fae:	4629      	mov	r1, r5
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7ff fe85 	bl	8001cc0 <usbStartTransmitI>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f383 8811 	msr	BASEPRI, r3
}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (obqp->brdptr >= obqp->btop) {
 8001fc2:	e9d6 2017 	ldrd	r2, r0, [r6, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8001fc6:	6db3      	ldr	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001fc8:	6d31      	ldr	r1, [r6, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8001fca:	4403      	add	r3, r0
  if (obqp->brdptr >= obqp->btop) {
 8001fcc:	4293      	cmp	r3, r2
  obqp->brdptr += obqp->bsize;
 8001fce:	65b3      	str	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001fd0:	f101 0101 	add.w	r1, r1, #1
    obqp->brdptr = obqp->buffers;
 8001fd4:	bf28      	it	cs
 8001fd6:	6eb3      	ldrcs	r3, [r6, #104]	; 0x68
  obqp->bcounter++;
 8001fd8:	6531      	str	r1, [r6, #80]	; 0x50
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8001fda:	f106 0844 	add.w	r8, r6, #68	; 0x44
    obqp->brdptr = obqp->buffers;
 8001fde:	bf28      	it	cs
 8001fe0:	65b3      	strcs	r3, [r6, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8001fe2:	4640      	mov	r0, r8
 8001fe4:	f7ff f88c 	bl	8001100 <chThdDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001fe8:	4640      	mov	r0, r8
 8001fea:	a901      	add	r1, sp, #4
 8001fec:	f7ff ff40 	bl	8001e70 <obqGetFullBufferI>
  if (buf != NULL) {
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d1da      	bne.n	8001fac <sduDataTransmitted+0x3c>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d0da      	beq.n	8001fb6 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8002000:	8a1b      	ldrh	r3, [r3, #16]
 8002002:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8002004:	4013      	ands	r3, r2
 8002006:	d1d6      	bne.n	8001fb6 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8002008:	4629      	mov	r1, r5
 800200a:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800200e:	4620      	mov	r0, r4
 8002010:	f7ff fe56 	bl	8001cc0 <usbStartTransmitI>
 8002014:	e7cf      	b.n	8001fb6 <sduDataTransmitted+0x46>
 8002016:	bf00      	nop
	...

08002020 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <chSchWakeupS.constprop.0+0x54>)
 8002022:	6959      	ldr	r1, [r3, #20]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002024:	b430      	push	{r4, r5}
  if (ntp->prio <= otp->prio) {
 8002026:	688d      	ldr	r5, [r1, #8]
 8002028:	6884      	ldr	r4, [r0, #8]
  ntp->u.rdymsg = msg;
 800202a:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 800202c:	42ac      	cmp	r4, r5
  ntp->u.rdymsg = msg;
 800202e:	6242      	str	r2, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8002030:	d80c      	bhi.n	800204c <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 8002032:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8002036:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	4294      	cmp	r4, r2
 800203c:	d9fb      	bls.n	8002036 <chSchWakeupS.constprop.0+0x16>
  tp->queue.prev             = cp->queue.prev;
 800203e:	685a      	ldr	r2, [r3, #4]
}
 8002040:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 8002042:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8002046:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002048:	6058      	str	r0, [r3, #4]
}
 800204a:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 800204c:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002050:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8002052:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8002054:	6894      	ldr	r4, [r2, #8]
 8002056:	42a5      	cmp	r5, r4
 8002058:	d3fb      	bcc.n	8002052 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
 800205a:	6854      	ldr	r4, [r2, #4]
 800205c:	604c      	str	r4, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 800205e:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 8002060:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 8002062:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8002064:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8002066:	f880 5020 	strb.w	r5, [r0, #32]
}
 800206a:	bc30      	pop	{r4, r5}
    currp = ntp;
 800206c:	6158      	str	r0, [r3, #20]
    chSysSwitch(ntp, otp);
 800206e:	f7fe b937 	b.w	80002e0 <_port_switch>
 8002072:	bf00      	nop
 8002074:	200019e0 	.word	0x200019e0
	...

08002080 <chSchGoSleepS>:
  thread_t *otp = currp;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <chSchGoSleepS+0x24>)
 8002082:	6959      	ldr	r1, [r3, #20]
  thread_t *tp = tqp->next;
 8002084:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8002086:	b410      	push	{r4}
  otp->state = newstate;
 8002088:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800208c:	6810      	ldr	r0, [r2, #0]
 800208e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8002090:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002092:	6043      	str	r3, [r0, #4]
 8002094:	f882 4020 	strb.w	r4, [r2, #32]
}
 8002098:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800209a:	615a      	str	r2, [r3, #20]
  chSysSwitch(currp, otp);
 800209c:	4610      	mov	r0, r2
 800209e:	f7fe b91f 	b.w	80002e0 <_port_switch>
 80020a2:	bf00      	nop
 80020a4:	200019e0 	.word	0x200019e0
	...

080020b0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	2320      	movs	r3, #32
 80020b4:	4605      	mov	r5, r0
 80020b6:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <chMtxLock+0xcc>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80020bc:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 80020be:	695c      	ldr	r4, [r3, #20]
  if (mp->owner != NULL) {
 80020c0:	b340      	cbz	r0, 8002114 <chMtxLock+0x64>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 80020c2:	68a2      	ldr	r2, [r4, #8]
 80020c4:	6883      	ldr	r3, [r0, #8]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d207      	bcs.n	80020da <chMtxLock+0x2a>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80020ca:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 80020ce:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d03a      	beq.n	800214a <chMtxLock+0x9a>
 80020d4:	2b07      	cmp	r3, #7
 80020d6:	d025      	beq.n	8002124 <chMtxLock+0x74>
 80020d8:	b1ab      	cbz	r3, 8002106 <chMtxLock+0x56>
  thread_t *cp = (thread_t *)tqp;
 80020da:	462b      	mov	r3, r5
 80020dc:	e003      	b.n	80020e6 <chMtxLock+0x36>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	68a2      	ldr	r2, [r4, #8]
 80020e2:	4291      	cmp	r1, r2
 80020e4:	d302      	bcc.n	80020ec <chMtxLock+0x3c>
    cp = cp->queue.next;
 80020e6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80020e8:	429d      	cmp	r5, r3
 80020ea:	d1f8      	bne.n	80020de <chMtxLock+0x2e>
  tp->queue.prev             = cp->queue.prev;
 80020ec:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80020ee:	2006      	movs	r0, #6
 80020f0:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80020f4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80020f6:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
 80020f8:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80020fa:	f7ff ffc1 	bl	8002080 <chSchGoSleepS>
 80020fe:	2300      	movs	r3, #0
 8002100:	f383 8811 	msr	BASEPRI, r3
}
 8002104:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8002106:	e9d0 3200 	ldrd	r3, r2, [r0]
 800210a:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800210c:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 800210e:	f7fe ffc7 	bl	80010a0 <chSchReadyI>
          break;
 8002112:	e7e2      	b.n	80020da <chMtxLock+0x2a>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 8002114:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002116:	e9c5 4302 	strd	r4, r3, [r5, #8]
    ctp->mtxlist = mp;
 800211a:	63a5      	str	r5, [r4, #56]	; 0x38
 800211c:	2300      	movs	r3, #0
 800211e:	f383 8811 	msr	BASEPRI, r3
}
 8002122:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8002124:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8002128:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800212a:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800212c:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800212e:	4633      	mov	r3, r6
 8002130:	e002      	b.n	8002138 <chMtxLock+0x88>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002132:	6899      	ldr	r1, [r3, #8]
 8002134:	4291      	cmp	r1, r2
 8002136:	d302      	bcc.n	800213e <chMtxLock+0x8e>
    cp = cp->queue.next;
 8002138:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800213a:	429e      	cmp	r6, r3
 800213c:	d1f9      	bne.n	8002132 <chMtxLock+0x82>
  tp->queue.prev             = cp->queue.prev;
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8002144:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002146:	6058      	str	r0, [r3, #4]
 8002148:	e7c7      	b.n	80020da <chMtxLock+0x2a>
  tp->queue.prev->queue.next = tp->queue.next;
 800214a:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800214e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002150:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002152:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8002154:	4633      	mov	r3, r6
 8002156:	e002      	b.n	800215e <chMtxLock+0xae>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002158:	6899      	ldr	r1, [r3, #8]
 800215a:	4291      	cmp	r1, r2
 800215c:	d302      	bcc.n	8002164 <chMtxLock+0xb4>
    cp = cp->queue.next;
 800215e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002160:	429e      	cmp	r6, r3
 8002162:	d1f9      	bne.n	8002158 <chMtxLock+0xa8>
  tp->queue.prev             = cp->queue.prev;
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800216a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800216c:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 800216e:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 8002170:	68a2      	ldr	r2, [r4, #8]
 8002172:	6883      	ldr	r3, [r0, #8]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8a8      	bhi.n	80020ca <chMtxLock+0x1a>
 8002178:	e7af      	b.n	80020da <chMtxLock+0x2a>
 800217a:	bf00      	nop
 800217c:	200019e0 	.word	0x200019e0

08002180 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8002180:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <chThdExitS+0x44>)
 8002184:	695c      	ldr	r4, [r3, #20]
  return (bool)(tlp->next != (thread_t *)tlp);
 8002186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8002188:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800218a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800218e:	42ab      	cmp	r3, r5
 8002190:	d007      	beq.n	80021a2 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff82 	bl	80010a0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800219c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800219e:	42ab      	cmp	r3, r5
 80021a0:	d1f7      	bne.n	8002192 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 80021a2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80021a6:	b93b      	cbnz	r3, 80021b8 <chThdExitS+0x38>
 80021a8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80021ac:	079b      	lsls	r3, r3, #30
 80021ae:	d103      	bne.n	80021b8 <chThdExitS+0x38>
    REG_REMOVE(tp);
 80021b0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 80021b4:	60d3      	str	r3, [r2, #12]
 80021b6:	611a      	str	r2, [r3, #16]
}
 80021b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80021bc:	200f      	movs	r0, #15
 80021be:	f7ff bf5f 	b.w	8002080 <chSchGoSleepS>
 80021c2:	bf00      	nop
 80021c4:	200019e0 	.word	0x200019e0
	...

080021d0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80021d0:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 80021d2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80021d4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80021d6:	d012      	beq.n	80021fe <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80021d8:	4d0c      	ldr	r5, [pc, #48]	; (800220c <chSchGoSleepTimeoutS+0x3c>)
 80021da:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <chSchGoSleepTimeoutS+0x40>)
 80021dc:	696b      	ldr	r3, [r5, #20]
 80021de:	4604      	mov	r4, r0
 80021e0:	a801      	add	r0, sp, #4
 80021e2:	f7ff f81d 	bl	8001220 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff ff4a 	bl	8002080 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80021ec:	9b04      	ldr	r3, [sp, #16]
 80021ee:	b113      	cbz	r3, 80021f6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80021f0:	a801      	add	r0, sp, #4
 80021f2:	f7fe ffd5 	bl	80011a0 <chVTDoResetI>
  return currp->u.rdymsg;
 80021f6:	696b      	ldr	r3, [r5, #20]
}
 80021f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80021fa:	b007      	add	sp, #28
 80021fc:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 80021fe:	4d03      	ldr	r5, [pc, #12]	; (800220c <chSchGoSleepTimeoutS+0x3c>)
 8002200:	f7ff ff3e 	bl	8002080 <chSchGoSleepS>
  return currp->u.rdymsg;
 8002204:	696b      	ldr	r3, [r5, #20]
}
 8002206:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002208:	b007      	add	sp, #28
 800220a:	bd30      	pop	{r4, r5, pc}
 800220c:	200019e0 	.word	0x200019e0
 8002210:	08001031 	.word	0x08001031
	...

08002220 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8002220:	b161      	cbz	r1, 800223c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002224:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8002226:	6952      	ldr	r2, [r2, #20]
  tp->queue.prev             = tqp->prev;
 8002228:	6844      	ldr	r4, [r0, #4]
 800222a:	4603      	mov	r3, r0
 800222c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002230:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8002232:	6022      	str	r2, [r4, #0]
}
 8002234:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8002236:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002238:	f7ff bfca 	b.w	80021d0 <chSchGoSleepTimeoutS>
}
 800223c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	200019e0 	.word	0x200019e0
	...

08002250 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	4604      	mov	r4, r0
 8002254:	460f      	mov	r7, r1
 8002256:	4616      	mov	r6, r2
 8002258:	2320      	movs	r3, #32
 800225a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800225e:	e003      	b.n	8002268 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8002260:	f7ff ffde 	bl	8002220 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002264:	2800      	cmp	r0, #0
 8002266:	db18      	blt.n	800229a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8002268:	68a5      	ldr	r5, [r4, #8]
 800226a:	4631      	mov	r1, r6
 800226c:	4620      	mov	r0, r4
 800226e:	2d00      	cmp	r5, #0
 8002270:	d0f6      	beq.n	8002260 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8002272:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002274:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002276:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002278:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800227a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800227c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800227e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002280:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002284:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002286:	bf24      	itt	cs
 8002288:	68e3      	ldrcs	r3, [r4, #12]
 800228a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800228c:	69e3      	ldr	r3, [r4, #28]
 800228e:	b103      	cbz	r3, 8002292 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8002290:	4798      	blx	r3
 8002292:	2000      	movs	r0, #0
 8002294:	f380 8811 	msr	BASEPRI, r0
}
 8002298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800229a:	f385 8811 	msr	BASEPRI, r5
 800229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022a0 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80022a0:	3030      	adds	r0, #48	; 0x30
 80022a2:	f7ff bfd5 	b.w	8002250 <oqPutTimeout>
 80022a6:	bf00      	nop
	...

080022b0 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80022b0:	3030      	adds	r0, #48	; 0x30
 80022b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022b6:	f7ff bfcb 	b.w	8002250 <oqPutTimeout>
 80022ba:	bf00      	nop
 80022bc:	0000      	movs	r0, r0
	...

080022c0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	2320      	movs	r3, #32
 80022c4:	4605      	mov	r5, r0
 80022c6:	460e      	mov	r6, r1
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	e003      	b.n	80022d6 <iqGetTimeout+0x16>
 80022ce:	f7ff ffa7 	bl	8002220 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80022d2:	2800      	cmp	r0, #0
 80022d4:	db1a      	blt.n	800230c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80022d6:	68ac      	ldr	r4, [r5, #8]
 80022d8:	4631      	mov	r1, r6
 80022da:	4628      	mov	r0, r5
 80022dc:	2c00      	cmp	r4, #0
 80022de:	d0f6      	beq.n	80022ce <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 80022e0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 80022e2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80022e4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 80022e6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80022e8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80022ea:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80022ec:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 80022ee:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 80022f0:	bf28      	it	cs
 80022f2:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 80022f4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80022f6:	bf28      	it	cs
 80022f8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 80022fa:	69eb      	ldr	r3, [r5, #28]
 80022fc:	b10b      	cbz	r3, 8002302 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 80022fe:	4628      	mov	r0, r5
 8002300:	4798      	blx	r3
 8002302:	2300      	movs	r3, #0
 8002304:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002308:	4620      	mov	r0, r4
}
 800230a:	bd70      	pop	{r4, r5, r6, pc}
 800230c:	f384 8811 	msr	BASEPRI, r4
 8002310:	bd70      	pop	{r4, r5, r6, pc}
 8002312:	bf00      	nop
	...

08002320 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002320:	300c      	adds	r0, #12
 8002322:	f7ff bfcd 	b.w	80022c0 <iqGetTimeout>
 8002326:	bf00      	nop
	...

08002330 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002330:	300c      	adds	r0, #12
 8002332:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002336:	f7ff bfc3 	b.w	80022c0 <iqGetTimeout>
 800233a:	bf00      	nop
 800233c:	0000      	movs	r0, r0
	...

08002340 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4604      	mov	r4, r0
 8002344:	460d      	mov	r5, r1
 8002346:	e005      	b.n	8002354 <obqGetEmptyBufferTimeoutS+0x14>
    if (obqp->suspended) {
 8002348:	7a23      	ldrb	r3, [r4, #8]
 800234a:	b983      	cbnz	r3, 800236e <obqGetEmptyBufferTimeoutS+0x2e>
 800234c:	f7ff ff68 	bl	8002220 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002350:	2800      	cmp	r0, #0
 8002352:	db0b      	blt.n	800236c <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 8002354:	68e3      	ldr	r3, [r4, #12]
 8002356:	4629      	mov	r1, r5
 8002358:	4620      	mov	r0, r4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f4      	beq.n	8002348 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800235e:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002360:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8002362:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002364:	440b      	add	r3, r1
 8002366:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 800236a:	2000      	movs	r0, #0
}
 800236c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 800236e:	f06f 0001 	mvn.w	r0, #1
}
 8002372:	bd38      	pop	{r3, r4, r5, pc}
	...

08002380 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	2320      	movs	r3, #32
 8002384:	460d      	mov	r5, r1
 8002386:	4604      	mov	r4, r0
 8002388:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 800238c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800238e:	b1fe      	cbz	r6, 80023d0 <obqPutTimeout+0x50>
  *obqp->ptr = b;
 8002390:	7035      	strb	r5, [r6, #0]
  if (obqp->ptr >= obqp->top) {
 8002392:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8002396:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8002398:	4293      	cmp	r3, r2
  obqp->ptr++;
 800239a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800239c:	d314      	bcc.n	80023c8 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800239e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 80023a0:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 80023a2:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80023a4:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 80023a6:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 80023a8:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 80023aa:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 80023ac:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 80023ae:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 80023b0:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 80023b2:	bf24      	itt	cs
 80023b4:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80023b6:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 80023b8:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 80023ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 80023bc:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 80023be:	2200      	movs	r2, #0
 80023c0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 80023c2:	b10b      	cbz	r3, 80023c8 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 80023c4:	4620      	mov	r0, r4
 80023c6:	4798      	blx	r3
 80023c8:	2000      	movs	r0, #0
 80023ca:	f380 8811 	msr	BASEPRI, r0
}
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 80023d0:	4611      	mov	r1, r2
 80023d2:	f7ff ffb5 	bl	8002340 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 80023d6:	b908      	cbnz	r0, 80023dc <obqPutTimeout+0x5c>
 80023d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80023da:	e7d9      	b.n	8002390 <obqPutTimeout+0x10>
 80023dc:	f386 8811 	msr	BASEPRI, r6
}
 80023e0:	bd70      	pop	{r4, r5, r6, pc}
 80023e2:	bf00      	nop
	...

080023f0 <_putt.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 80023f0:	3044      	adds	r0, #68	; 0x44
 80023f2:	f7ff bfc5 	b.w	8002380 <obqPutTimeout>
 80023f6:	bf00      	nop
	...

08002400 <_put.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8002400:	3044      	adds	r0, #68	; 0x44
 8002402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002406:	f7ff bfbb 	b.w	8002380 <obqPutTimeout>
 800240a:	bf00      	nop
 800240c:	0000      	movs	r0, r0
	...

08002410 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4604      	mov	r4, r0
 8002414:	460d      	mov	r5, r1
 8002416:	e005      	b.n	8002424 <ibqGetFullBufferTimeoutS+0x14>
    if (ibqp->suspended) {
 8002418:	7a23      	ldrb	r3, [r4, #8]
 800241a:	b983      	cbnz	r3, 800243e <ibqGetFullBufferTimeoutS+0x2e>
 800241c:	f7ff ff00 	bl	8002220 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002420:	2800      	cmp	r0, #0
 8002422:	db0b      	blt.n	800243c <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 8002424:	68e3      	ldr	r3, [r4, #12]
 8002426:	4629      	mov	r1, r5
 8002428:	4620      	mov	r0, r4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f4      	beq.n	8002418 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800242e:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002430:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002432:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002434:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002436:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800243a:	2000      	movs	r0, #0
}
 800243c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 800243e:	f06f 0001 	mvn.w	r0, #1
}
 8002442:	bd38      	pop	{r3, r4, r5, pc}
	...

08002450 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	2320      	movs	r3, #32
 8002454:	4604      	mov	r4, r0
 8002456:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 800245a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800245c:	b1e5      	cbz	r5, 8002498 <ibqGetTimeout+0x48>
  msg = (msg_t)*ibqp->ptr;
 800245e:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8002462:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8002464:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8002466:	4295      	cmp	r5, r2
 8002468:	d311      	bcc.n	800248e <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 800246a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 800246e:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8002470:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8002472:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8002474:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8002476:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8002478:	bf24      	itt	cs
 800247a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 800247c:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 800247e:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8002480:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8002482:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8002484:	2200      	movs	r2, #0
 8002486:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8002488:	b10b      	cbz	r3, 800248e <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 800248a:	4620      	mov	r0, r4
 800248c:	4798      	blx	r3
 800248e:	2300      	movs	r3, #0
 8002490:	f383 8811 	msr	BASEPRI, r3
}
 8002494:	4630      	mov	r0, r6
 8002496:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8002498:	f7ff ffba 	bl	8002410 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800249c:	4606      	mov	r6, r0
 800249e:	b908      	cbnz	r0, 80024a4 <ibqGetTimeout+0x54>
 80024a0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80024a2:	e7dc      	b.n	800245e <ibqGetTimeout+0xe>
 80024a4:	f385 8811 	msr	BASEPRI, r5
      return msg;
 80024a8:	e7f4      	b.n	8002494 <ibqGetTimeout+0x44>
 80024aa:	bf00      	nop
 80024ac:	0000      	movs	r0, r0
	...

080024b0 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 80024b0:	300c      	adds	r0, #12
 80024b2:	f7ff bfcd 	b.w	8002450 <ibqGetTimeout>
 80024b6:	bf00      	nop
	...

080024c0 <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 80024c0:	300c      	adds	r0, #12
 80024c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c6:	f7ff bfc3 	b.w	8002450 <ibqGetTimeout>
 80024ca:	bf00      	nop
 80024cc:	0000      	movs	r0, r0
	...

080024d0 <chThdSuspendTimeoutS>:
  return ch.rlist.current;
 80024d0:	4a03      	ldr	r2, [pc, #12]	; (80024e0 <chThdSuspendTimeoutS+0x10>)
 80024d2:	6952      	ldr	r2, [r2, #20]
  *trp = tp;
 80024d4:	6002      	str	r2, [r0, #0]
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 80024d6:	4603      	mov	r3, r0
  tp->u.wttrp = trp;
 80024d8:	6253      	str	r3, [r2, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80024da:	2003      	movs	r0, #3
 80024dc:	f7ff be78 	b.w	80021d0 <chSchGoSleepTimeoutS>
 80024e0:	200019e0 	.word	0x200019e0
	...

080024f0 <i2c_lld_master_transmit_timeout.constprop.0>:
 *                      timeout the driver must be stopped and restarted
 *                      because the bus is in an uncertain state</b>.
 *
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 80024f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 80024f4:	4e3c      	ldr	r6, [pc, #240]	; (80025e8 <i2c_lld_master_transmit_timeout.constprop.0+0xf8>)

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 80024f6:	27b0      	movs	r7, #176	; 0xb0
  i2cp->errors = I2C_NO_ERROR;
 80024f8:	2500      	movs	r5, #0
  I2C_TypeDef *dp = i2cp->i2c;
 80024fa:	6b74      	ldr	r4, [r6, #52]	; 0x34
  i2cp->addr = (addr << 1);
 80024fc:	8437      	strh	r7, [r6, #32]
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 80024fe:	4686      	mov	lr, r0
 8002500:	468c      	mov	ip, r1
  i2cp->errors = I2C_NO_ERROR;
 8002502:	60b5      	str	r5, [r6, #8]
 8002504:	f385 8811 	msr	BASEPRI, r5
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002508:	e9d6 170b 	ldrd	r1, r7, [r6, #44]	; 0x2c
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800250c:	6838      	ldr	r0, [r7, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800250e:	680f      	ldr	r7, [r1, #0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002510:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002512:	6001      	str	r1, [r0, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002514:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  return (systime_t)STM32_ST_TIM->CNT;
 8002518:	4934      	ldr	r1, [pc, #208]	; (80025ec <i2c_lld_master_transmit_timeout.constprop.0+0xfc>)
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 800251a:	f8c0 e00c 	str.w	lr, [r0, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 800251e:	f8c0 c004 	str.w	ip, [r0, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002522:	f8c7 8000 	str.w	r8, [r7]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8002526:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 800252c:	462a      	mov	r2, r5
 800252e:	2020      	movs	r0, #32
 8002530:	e001      	b.n	8002536 <i2c_lld_master_transmit_timeout.constprop.0+0x46>
 8002532:	f382 8811 	msr	BASEPRI, r2
 8002536:	f380 8811 	msr	BASEPRI, r0
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 800253a:	69a3      	ldr	r3, [r4, #24]
 800253c:	079b      	lsls	r3, r3, #30
 800253e:	d402      	bmi.n	8002546 <i2c_lld_master_transmit_timeout.constprop.0+0x56>
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	059d      	lsls	r5, r3, #22
 8002544:	d524      	bpl.n	8002590 <i2c_lld_master_transmit_timeout.constprop.0+0xa0>
 8002546:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8002548:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 800254a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800254e:	d3f0      	bcc.n	8002532 <i2c_lld_master_transmit_timeout.constprop.0+0x42>
      dmaStreamDisable(i2cp->dmatx);
 8002550:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8002552:	6802      	ldr	r2, [r0, #0]
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	f023 031f 	bic.w	r3, r3, #31
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	07dc      	lsls	r4, r3, #31
 8002560:	d4fc      	bmi.n	800255c <i2c_lld_master_transmit_timeout.constprop.0+0x6c>
      dmaStreamDisable(i2cp->dmarx);
 8002562:	6af1      	ldr	r1, [r6, #44]	; 0x2c
      dmaStreamDisable(i2cp->dmatx);
 8002564:	7a44      	ldrb	r4, [r0, #9]
 8002566:	6840      	ldr	r0, [r0, #4]
      dmaStreamDisable(i2cp->dmarx);
 8002568:	680a      	ldr	r2, [r1, #0]
      dmaStreamDisable(i2cp->dmatx);
 800256a:	233d      	movs	r3, #61	; 0x3d
 800256c:	40a3      	lsls	r3, r4
 800256e:	6003      	str	r3, [r0, #0]
      dmaStreamDisable(i2cp->dmarx);
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	f023 031f 	bic.w	r3, r3, #31
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	6813      	ldr	r3, [r2, #0]
 800257a:	07d8      	lsls	r0, r3, #31
 800257c:	d4fc      	bmi.n	8002578 <i2c_lld_master_transmit_timeout.constprop.0+0x88>
 800257e:	7a48      	ldrb	r0, [r1, #9]
 8002580:	684a      	ldr	r2, [r1, #4]
 8002582:	233d      	movs	r3, #61	; 0x3d
 8002584:	4083      	lsls	r3, r0
 8002586:	6013      	str	r3, [r2, #0]
      return MSG_TIMEOUT;
 8002588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 800258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8002590:	6863      	ldr	r3, [r4, #4]
  return chThdSuspendTimeoutS(trp, timeout);
 8002592:	4817      	ldr	r0, [pc, #92]	; (80025f0 <i2c_lld_master_transmit_timeout.constprop.0+0x100>)
 8002594:	9906      	ldr	r1, [sp, #24]
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START;
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6023      	str	r3, [r4, #0]
 80025a4:	f7ff ff94 	bl	80024d0 <chThdSuspendTimeoutS>
  if (msg != MSG_OK) {
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d0ef      	beq.n	800258c <i2c_lld_master_transmit_timeout.constprop.0+0x9c>
    dmaStreamDisable(i2cp->dmatx);
 80025ac:	6b34      	ldr	r4, [r6, #48]	; 0x30
 80025ae:	6822      	ldr	r2, [r4, #0]
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	f023 031f 	bic.w	r3, r3, #31
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	6813      	ldr	r3, [r2, #0]
 80025ba:	07d9      	lsls	r1, r3, #31
 80025bc:	d4fc      	bmi.n	80025b8 <i2c_lld_master_transmit_timeout.constprop.0+0xc8>
    dmaStreamDisable(i2cp->dmarx);
 80025be:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmatx);
 80025c0:	7a65      	ldrb	r5, [r4, #9]
 80025c2:	6864      	ldr	r4, [r4, #4]
    dmaStreamDisable(i2cp->dmarx);
 80025c4:	680a      	ldr	r2, [r1, #0]
    dmaStreamDisable(i2cp->dmatx);
 80025c6:	233d      	movs	r3, #61	; 0x3d
 80025c8:	40ab      	lsls	r3, r5
 80025ca:	6023      	str	r3, [r4, #0]
    dmaStreamDisable(i2cp->dmarx);
 80025cc:	6813      	ldr	r3, [r2, #0]
 80025ce:	f023 031f 	bic.w	r3, r3, #31
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	6813      	ldr	r3, [r2, #0]
 80025d6:	07db      	lsls	r3, r3, #31
 80025d8:	d4fc      	bmi.n	80025d4 <i2c_lld_master_transmit_timeout.constprop.0+0xe4>
 80025da:	7a4c      	ldrb	r4, [r1, #9]
 80025dc:	684a      	ldr	r2, [r1, #4]
 80025de:	233d      	movs	r3, #61	; 0x3d
 80025e0:	40a3      	lsls	r3, r4
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025e8:	20000c9c 	.word	0x20000c9c
 80025ec:	40000c00 	.word	0x40000c00
 80025f0:	20000cb8 	.word	0x20000cb8
	...

08002600 <ReadDev.constprop.0>:
  status = i2cMasterTransmitTimeout(&I2C_BUS, DS1085_DEVADDR, txbuf, txbytes, &rxbuf, 0, tmo);
  //i2cReleaseBus(&I2C_BUS);
  osalDbgCheck(MSG_OK == status);
}

void ReadDev(uint8_t* txbuf, uint8_t* rxbuf, uint8_t txbytes, uint8_t rxbytes){
 8002600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t status = MSG_OK;
  sysinterval_t tmo = calc_timeout(&I2C_BUS, txbytes, rxbytes);
 8002604:	4c19      	ldr	r4, [pc, #100]	; (800266c <ReadDev.constprop.0+0x6c>)
void ReadDev(uint8_t* txbuf, uint8_t* rxbuf, uint8_t txbytes, uint8_t rxbytes){
 8002606:	4615      	mov	r5, r2
  tmo /= i2cp->config->clock_speed;
 8002608:	6862      	ldr	r2, [r4, #4]
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 800260a:	1cab      	adds	r3, r5, #2
 800260c:	f242 7c10 	movw	ip, #10000	; 0x2710
void ReadDev(uint8_t* txbuf, uint8_t* rxbuf, uint8_t txbytes, uint8_t rxbytes){
 8002610:	b082      	sub	sp, #8
  tmo /= i2cp->config->clock_speed;
 8002612:	6852      	ldr	r2, [r2, #4]
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8002614:	fb0c f303 	mul.w	r3, ip, r3
void ReadDev(uint8_t* txbuf, uint8_t* rxbuf, uint8_t txbytes, uint8_t rxbytes){
 8002618:	4606      	mov	r6, r0
  tmo /= i2cp->config->clock_speed;
 800261a:	fbb3 f3f2 	udiv	r3, r3, r2
void ReadDev(uint8_t* txbuf, uint8_t* rxbuf, uint8_t txbytes, uint8_t rxbytes){
 800261e:	460f      	mov	r7, r1
 8002620:	2220      	movs	r2, #32
 8002622:	f382 8811 	msr	BASEPRI, r2

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8002626:	2203      	movs	r2, #3
  tmo += 5; /* some additional time to be safer */
 8002628:	3305      	adds	r3, #5
  i2cp->errors = I2C_NO_ERROR;
 800262a:	f04f 0800 	mov.w	r8, #0
  return TIME_MS2I(tmo);
 800262e:	f240 30e7 	movw	r0, #999	; 0x3e7
 8002632:	2100      	movs	r1, #0
 8002634:	fbec 0103 	umlal	r0, r1, ip, r3
  i2cp->state = I2C_ACTIVE_TX;
 8002638:	7022      	strb	r2, [r4, #0]
 800263a:	2300      	movs	r3, #0
 800263c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  i2cp->errors = I2C_NO_ERROR;
 8002640:	f8c4 8008 	str.w	r8, [r4, #8]
 8002644:	f7fe f8ea 	bl	800081c <__aeabi_uldivmod>
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002648:	462b      	mov	r3, r5
 800264a:	9000      	str	r0, [sp, #0]
 800264c:	463a      	mov	r2, r7
 800264e:	4630      	mov	r0, r6
 8002650:	2101      	movs	r1, #1
 8002652:	f7ff ff4d 	bl	80024f0 <i2c_lld_master_transmit_timeout.constprop.0>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8002656:	3001      	adds	r0, #1
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 8002658:	bf0c      	ite	eq
 800265a:	2305      	moveq	r3, #5
 800265c:	2302      	movne	r3, #2
 800265e:	7023      	strb	r3, [r4, #0]
 8002660:	f388 8811 	msr	BASEPRI, r8
  //i2cAcquireBus(&I2C_BUS);
  status = i2cMasterTransmitTimeout(&I2C_BUS, DS1085_DEVADDR, txbuf, txbytes, rxbuf, rxbytes, tmo);
  //i2cReleaseBus(&I2C_BUS);
  osalDbgCheck(MSG_OK == status);
}
 8002664:	b002      	add	sp, #8
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800266a:	bf00      	nop
 800266c:	20000c9c 	.word	0x20000c9c

08002670 <get_two_byte>:
    temp[0] = DS1085_ADDR;
    temp[1] = val & 0x0F;
    WriteDev(temp, 2);
}

uint16_t get_two_byte(uint8_t reg){  // good for DAC, MUX and DIV Register
 8002670:	b500      	push	{lr}
 8002672:	b083      	sub	sp, #12
 8002674:	4603      	mov	r3, r0
  uint8_t tx = reg;
  uint8_t temp[2];
  uint16_t retval;
  ReadDev(&tx, temp, 1, 2);
 8002676:	2202      	movs	r2, #2
 8002678:	f10d 0003 	add.w	r0, sp, #3
 800267c:	a901      	add	r1, sp, #4
  uint8_t tx = reg;
 800267e:	f88d 3003 	strb.w	r3, [sp, #3]
  ReadDev(&tx, temp, 1, 2);
 8002682:	f7ff ffbd 	bl	8002600 <ReadDev.constprop.0>
  if (DEBUGLEVEL == 5){
    chprintf(dbg, "RVal: %02d, %02X, %02X\r\n", reg, temp[0], temp[1]);
  }
  retval = temp[1]>>6;
  retval |= (uint16_t)(temp[0]<<2);
 8002686:	f89d 3004 	ldrb.w	r3, [sp, #4]
  retval = temp[1]>>6;
 800268a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  retval |= (uint16_t)(temp[0]<<2);
 800268e:	009b      	lsls	r3, r3, #2
  return retval;
}
 8002690:	ea43 1090 	orr.w	r0, r3, r0, lsr #6
 8002694:	b003      	add	sp, #12
 8002696:	f85d fb04 	ldr.w	pc, [sp], #4
 800269a:	bf00      	nop
 800269c:	0000      	movs	r0, r0
	...

080026a0 <read_clock>:
    chprintf(dbg, "TVal: %02d, %02X, %02X\r\n", tx[0], tx[1], tx[2]);
    }
    WriteDev(tx, 3);
}

uint8_t read_clock(uint8_t* buf){
 80026a0:	b510      	push	{r4, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	4604      	mov	r4, r0
  ReadDev(&tx, temp, 1, 2);
 80026a6:	a901      	add	r1, sp, #4
 80026a8:	f10d 0003 	add.w	r0, sp, #3
  uint8_t tx = DS1085_RANGE;
 80026ac:	2337      	movs	r3, #55	; 0x37
  ReadDev(&tx, temp, 1, 2);
 80026ae:	2202      	movs	r2, #2
  uint8_t tx = DS1085_RANGE;
 80026b0:	f88d 3003 	strb.w	r3, [sp, #3]
  ReadDev(&tx, temp, 1, 2);
 80026b4:	f7ff ffa4 	bl	8002600 <ReadDev.constprop.0>
  return temp[0]>>3;
 80026b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026bc:	08db      	lsrs	r3, r3, #3
  uint16_t temp;
  buf[0] = get_range();
 80026be:	7023      	strb	r3, [r4, #0]
  ReadDev(&tx, &temp, 1, 1);
 80026c0:	f10d 0103 	add.w	r1, sp, #3
 80026c4:	a801      	add	r0, sp, #4
  uint8_t tx = DS1085_OFFSET;
 80026c6:	230e      	movs	r3, #14
  ReadDev(&tx, &temp, 1, 1);
 80026c8:	2201      	movs	r2, #1
  uint8_t tx = DS1085_OFFSET;
 80026ca:	f88d 3004 	strb.w	r3, [sp, #4]
  ReadDev(&tx, &temp, 1, 1);
 80026ce:	f7ff ff97 	bl	8002600 <ReadDev.constprop.0>
  return (temp&0x1F);
 80026d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80026d6:	f003 031f 	and.w	r3, r3, #31
  ReadDev(&tx, &temp, 1, 1);
 80026da:	f10d 0103 	add.w	r1, sp, #3
 80026de:	2201      	movs	r2, #1
 80026e0:	a801      	add	r0, sp, #4
  buf[1] = get_offset();
 80026e2:	7063      	strb	r3, [r4, #1]
  uint8_t tx = DS1085_ADDR;
 80026e4:	230d      	movs	r3, #13
 80026e6:	f88d 3004 	strb.w	r3, [sp, #4]
  ReadDev(&tx, &temp, 1, 1);
 80026ea:	f7ff ff89 	bl	8002600 <ReadDev.constprop.0>
  return (temp&0x0F);
 80026ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80026f2:	f003 030f 	and.w	r3, r3, #15
  buf[2] = get_addr();
 80026f6:	70a3      	strb	r3, [r4, #2]
  temp = get_two_byte(DS1085_MUX);
 80026f8:	2002      	movs	r0, #2
 80026fa:	f7ff ffb9 	bl	8002670 <get_two_byte>
  buf[4] = (uint8_t)(temp & 0xFF);
  buf[3] = (uint8_t)(temp >> 8);
 80026fe:	0a03      	lsrs	r3, r0, #8
  buf[4] = (uint8_t)(temp & 0xFF);
 8002700:	7120      	strb	r0, [r4, #4]
  buf[3] = (uint8_t)(temp >> 8);
 8002702:	70e3      	strb	r3, [r4, #3]
  temp = get_two_byte(DS1085_DAC);
 8002704:	2008      	movs	r0, #8
 8002706:	f7ff ffb3 	bl	8002670 <get_two_byte>
  buf[6] = (uint8_t)(temp & 0xFF);
  buf[5] = (uint8_t)(temp >> 8);
 800270a:	0a03      	lsrs	r3, r0, #8
  buf[6] = (uint8_t)(temp & 0xFF);
 800270c:	71a0      	strb	r0, [r4, #6]
  buf[5] = (uint8_t)(temp >> 8);
 800270e:	7163      	strb	r3, [r4, #5]
  temp = get_two_byte(DS1085_DIV);
 8002710:	2001      	movs	r0, #1
 8002712:	f7ff ffad 	bl	8002670 <get_two_byte>
  buf[8] = (uint8_t)(temp & 0xFF);
  buf[7] = (uint8_t)(temp >> 8);
 8002716:	0a03      	lsrs	r3, r0, #8
  buf[8] = (uint8_t)(temp & 0xFF);
 8002718:	7220      	strb	r0, [r4, #8]
  if (DEBUGLEVEL == 5){
    chprintf(dbg, "Clock (Rd): %02X, %02X, %02X, %02X, %02X, %02X, %02X, %02X %02X\r\n", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7], buf[8]);
  }
  return 9;
}
 800271a:	2009      	movs	r0, #9
  buf[7] = (uint8_t)(temp >> 8);
 800271c:	71e3      	strb	r3, [r4, #7]
}
 800271e:	b002      	add	sp, #8
 8002720:	bd10      	pop	{r4, pc}
 8002722:	bf00      	nop
	...

08002730 <WriteDev>:
void WriteDev(uint8_t * txbuf, uint8_t txbytes){
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}
  sysinterval_t tmo = calc_timeout(&I2C_BUS, txbytes, 0);
 8002732:	4c17      	ldr	r4, [pc, #92]	; (8002790 <WriteDev+0x60>)
  tmo /= i2cp->config->clock_speed;
 8002734:	6866      	ldr	r6, [r4, #4]
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8002736:	f242 7210 	movw	r2, #10000	; 0x2710
void WriteDev(uint8_t * txbuf, uint8_t txbytes){
 800273a:	b085      	sub	sp, #20
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 800273c:	fb01 2302 	mla	r3, r1, r2, r2
void WriteDev(uint8_t * txbuf, uint8_t txbytes){
 8002740:	460d      	mov	r5, r1
 8002742:	4607      	mov	r7, r0
  tmo /= i2cp->config->clock_speed;
 8002744:	6871      	ldr	r1, [r6, #4]
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	2120      	movs	r1, #32
 800274c:	f381 8811 	msr	BASEPRI, r1
  i2cp->state = I2C_ACTIVE_TX;
 8002750:	2603      	movs	r6, #3
 8002752:	7026      	strb	r6, [r4, #0]
  tmo += 5; /* some additional time to be safer */
 8002754:	3305      	adds	r3, #5
  i2cp->errors = I2C_NO_ERROR;
 8002756:	2600      	movs	r6, #0
  return TIME_MS2I(tmo);
 8002758:	f240 30e7 	movw	r0, #999	; 0x3e7
 800275c:	2100      	movs	r1, #0
 800275e:	fbe2 0103 	umlal	r0, r1, r2, r3
 8002762:	60a6      	str	r6, [r4, #8]
 8002764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002768:	2300      	movs	r3, #0
 800276a:	f7fe f857 	bl	800081c <__aeabi_uldivmod>
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800276e:	4633      	mov	r3, r6
 8002770:	9000      	str	r0, [sp, #0]
 8002772:	4629      	mov	r1, r5
 8002774:	4638      	mov	r0, r7
 8002776:	f10d 020f 	add.w	r2, sp, #15
 800277a:	f7ff feb9 	bl	80024f0 <i2c_lld_master_transmit_timeout.constprop.0>
  if (rdymsg == MSG_TIMEOUT) {
 800277e:	3001      	adds	r0, #1
    i2cp->state = I2C_READY;
 8002780:	bf0c      	ite	eq
 8002782:	2305      	moveq	r3, #5
 8002784:	2302      	movne	r3, #2
 8002786:	7023      	strb	r3, [r4, #0]
 8002788:	f386 8811 	msr	BASEPRI, r6
}
 800278c:	b005      	add	sp, #20
 800278e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002790:	20000c9c 	.word	0x20000c9c
	...

080027a0 <read_byte>:
  __NOP();
 // CNTOE_INACTIVE; //DEBUG
  chSysUnlock();
}

static uint8_t read_byte(void){
 80027a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t ret;
  DEBUG_LOW;
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <read_byte+0xac>)
 80027a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027a8:	835a      	strh	r2, [r3, #26]
static uint8_t read_byte(void){
 80027aa:	b083      	sub	sp, #12
 80027ac:	2320      	movs	r3, #32
 80027ae:	f383 8811 	msr	BASEPRI, r3
  if (BUS_in_use == 0){
 80027b2:	4b27      	ldr	r3, [pc, #156]	; (8002850 <read_byte+0xb0>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b153      	cbz	r3, 80027ce <read_byte+0x2e>
  while (palReadLine(BUSFREE) == PAL_LOW);
 80027b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80027bc:	f502 32c2 	add.w	r2, r2, #99328	; 0x18400
 80027c0:	6913      	ldr	r3, [r2, #16]
 80027c2:	0599      	lsls	r1, r3, #22
 80027c4:	d5fc      	bpl.n	80027c0 <read_byte+0x20>
  while (palReadLine(BUSFREE) == PAL_HIGH);
 80027c6:	4a23      	ldr	r2, [pc, #140]	; (8002854 <read_byte+0xb4>)
 80027c8:	6913      	ldr	r3, [r2, #16]
 80027ca:	059b      	lsls	r3, r3, #22
 80027cc:	d4fc      	bmi.n	80027c8 <read_byte+0x28>
  chSysLock();
  wait_for_busfree(); // this adds about 130ns after falling edge of BUSFREE
  DEBUG_HI;
 80027ce:	491f      	ldr	r1, [pc, #124]	; (800284c <read_byte+0xac>)
  CNTOE_ACTIVE; // needs ~ 25ns for the Address to become stable
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <read_byte+0xb4>)
  DEBUG_HI;
 80027d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  CNTOE_ACTIVE; // needs ~ 25ns for the Address to become stable
 80027d6:	2220      	movs	r2, #32
  DEBUG_HI;
 80027d8:	8308      	strh	r0, [r1, #24]
  CNTOE_ACTIVE; // needs ~ 25ns for the Address to become stable
 80027da:	835a      	strh	r2, [r3, #26]
  __NOP();
 80027dc:	bf00      	nop
  __NOP();
 80027de:	bf00      	nop
  DATOE_ACTIVE; // needs ~ 10ns for the Data to become stable
 80027e0:	2104      	movs	r1, #4
 80027e2:	8359      	strh	r1, [r3, #26]
  __NOP();
 80027e4:	bf00      	nop
  PLD_LOAD;
 80027e6:	481c      	ldr	r0, [pc, #112]	; (8002858 <read_byte+0xb8>)
 80027e8:	2402      	movs	r4, #2
 80027ea:	8344      	strh	r4, [r0, #26]
  __NOP();
 80027ec:	bf00      	nop
  PLD_IDLE;
 80027ee:	8304      	strh	r4, [r0, #24]
  DATOE_INACTIVE;
 80027f0:	8319      	strh	r1, [r3, #24]
  __NOP();
 80027f2:	bf00      	nop
 80027f4:	2400      	movs	r4, #0
 80027f6:	f384 8811 	msr	BASEPRI, r4
 80027fa:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 80027fe:	4817      	ldr	r0, [pc, #92]	; (800285c <read_byte+0xbc>)

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002800:	4f17      	ldr	r7, [pc, #92]	; (8002860 <read_byte+0xc0>)
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8002802:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002804:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8002808:	2103      	movs	r1, #3
 800280a:	7001      	strb	r1, [r0, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800280c:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800280e:	6a81      	ldr	r1, [r0, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002810:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002812:	f10d 0507 	add.w	r5, sp, #7
 8002816:	60d5      	str	r5, [r2, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002818:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800281c:	2501      	movs	r5, #1
 800281e:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002820:	6011      	str	r1, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002822:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002824:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8002826:	601e      	str	r6, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8002828:	6811      	ldr	r1, [r2, #0]
 800282a:	4329      	orrs	r1, r5
 800282c:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	432a      	orrs	r2, r5
 8002832:	601a      	str	r2, [r3, #0]
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8002834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002838:	3008      	adds	r0, #8
 800283a:	f7ff fe49 	bl	80024d0 <chThdSuspendTimeoutS>
 800283e:	f384 8811 	msr	BASEPRI, r4
// CNTOE_INACTIVE; //DEBUG
  chSysUnlock();
  spiReceive(SPI_DRIVER, 1, &ret);
  return ret;
}
 8002842:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002846:	b003      	add	sp, #12
 8002848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284a:	bf00      	nop
 800284c:	40020800 	.word	0x40020800
 8002850:	20000c88 	.word	0x20000c88
 8002854:	40020400 	.word	0x40020400
 8002858:	40020000 	.word	0x40020000
 800285c:	200018cc 	.word	0x200018cc
 8002860:	08008c54 	.word	0x08008c54
	...

08002870 <read_single_byte.constprop.0>:
  CPC_HIGH; // Count up
 8002870:	490d      	ldr	r1, [pc, #52]	; (80028a8 <read_single_byte.constprop.0+0x38>)
  MRC_ACTIVE;  // Reset '590
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <read_single_byte.constprop.0+0x3c>)
    TRESET_INACTIVE;
    BUS_in_use = 1;
  }
}

uint8_t read_single_byte(int32_t address, uint8_t reset){
 8002874:	b510      	push	{r4, lr}
  CPC_HIGH; // Count up
 8002876:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  MRC_ACTIVE;  // Reset '590
 800287a:	2408      	movs	r4, #8
  CPC_HIGH; // Count up
 800287c:	830a      	strh	r2, [r1, #24]
  MRC_ACTIVE;  // Reset '590
 800287e:	835c      	strh	r4, [r3, #26]
  __NOP();
 8002880:	bf00      	nop
  MRC_INACTIVE;
 8002882:	831c      	strh	r4, [r3, #24]
  CPC_LOW;  // Latch into Output Register
 8002884:	834a      	strh	r2, [r1, #26]
  __NOP();
 8002886:	bf00      	nop
  for (i=0; i<address; i++){
 8002888:	2800      	cmp	r0, #0
 800288a:	dd07      	ble.n	800289c <read_single_byte.constprop.0+0x2c>
 800288c:	2300      	movs	r3, #0
  CPC_HIGH; // Count up
 800288e:	830a      	strh	r2, [r1, #24]
  __NOP();
 8002890:	bf00      	nop
  CPC_LOW;  // Latch into Output Register
 8002892:	834a      	strh	r2, [r1, #26]
  __NOP();
 8002894:	bf00      	nop
  for (i=0; i<address; i++){
 8002896:	3301      	adds	r3, #1
 8002898:	4283      	cmp	r3, r0
 800289a:	d1f8      	bne.n	800288e <read_single_byte.constprop.0+0x1e>
  uint8_t data = 0;
  setup_address(address);
  check_BUS();
 800289c:	f7fe fa48 	bl	8000d30 <check_BUS>
  if (reset){
    TRESET_INACTIVE;
    BUS_in_use = 1;
  }
  return data;
}
 80028a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  data = read_byte();
 80028a4:	f7ff bf7c 	b.w	80027a0 <read_byte>
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40020400 	.word	0x40020400

080028b0 <write_byte>:
static void write_byte(uint8_t data){
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	2420      	movs	r4, #32
  buf[0] = data;
 80028b6:	f88d 0004 	strb.w	r0, [sp, #4]
 80028ba:	f384 8811 	msr	BASEPRI, r4
  spiStartSendI(spip, n, txbuf);
 80028be:	481f      	ldr	r0, [pc, #124]	; (800293c <write_byte+0x8c>)
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80028c0:	4d1f      	ldr	r5, [pc, #124]	; (8002940 <write_byte+0x90>)
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80028c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80028c4:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 80028c8:	2603      	movs	r6, #3
 80028ca:	7006      	strb	r6, [r0, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80028cc:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80028ce:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80028d0:	6a86      	ldr	r6, [r0, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80028d2:	60d5      	str	r5, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80028d4:	2501      	movs	r5, #1
 80028d6:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80028d8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80028dc:	6016      	str	r6, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80028de:	ae01      	add	r6, sp, #4
 80028e0:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80028e2:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80028e4:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(spip->dmarx);
 80028e6:	6811      	ldr	r1, [r2, #0]
 80028e8:	4329      	orrs	r1, r5
 80028ea:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	432a      	orrs	r2, r5
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028f6:	3008      	adds	r0, #8
 80028f8:	f7ff fdea 	bl	80024d0 <chThdSuspendTimeoutS>
 80028fc:	2300      	movs	r3, #0
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f384 8811 	msr	BASEPRI, r4
  if (BUS_in_use == 0){
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <write_byte+0x94>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b13b      	cbz	r3, 800291c <write_byte+0x6c>
  while (palReadLine(BUSFREE) == PAL_LOW);
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <write_byte+0x98>)
 800290e:	6913      	ldr	r3, [r2, #16]
 8002910:	0599      	lsls	r1, r3, #22
 8002912:	d5fc      	bpl.n	800290e <write_byte+0x5e>
  while (palReadLine(BUSFREE) == PAL_HIGH);
 8002914:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <write_byte+0x98>)
 8002916:	6913      	ldr	r3, [r2, #16]
 8002918:	059b      	lsls	r3, r3, #22
 800291a:	d4fc      	bmi.n	8002916 <write_byte+0x66>
  CNTOE_ACTIVE; // needs ~ 25ns for the Address to become stable
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <write_byte+0x98>)
 800291e:	2220      	movs	r2, #32
 8002920:	835a      	strh	r2, [r3, #26]
  __NOP();
 8002922:	bf00      	nop
  __NOP();
 8002924:	bf00      	nop
  WE_ACTIVE;
 8002926:	2202      	movs	r2, #2
 8002928:	835a      	strh	r2, [r3, #26]
  __NOP();
 800292a:	bf00      	nop
  __NOP();
 800292c:	bf00      	nop
  WE_INACTIVE;
 800292e:	831a      	strh	r2, [r3, #24]
  __NOP();
 8002930:	bf00      	nop
 8002932:	2300      	movs	r3, #0
 8002934:	f383 8811 	msr	BASEPRI, r3
}
 8002938:	b002      	add	sp, #8
 800293a:	bd70      	pop	{r4, r5, r6, pc}
 800293c:	200018cc 	.word	0x200018cc
 8002940:	20001c40 	.word	0x20001c40
 8002944:	20000c88 	.word	0x20000c88
 8002948:	40020400 	.word	0x40020400
 800294c:	00000000 	.word	0x00000000

08002950 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002950:	b508      	push	{r3, lr}
 8002952:	4601      	mov	r1, r0
 8002954:	2320      	movs	r3, #32
 8002956:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800295a:	2008      	movs	r0, #8
 800295c:	f7ff fc38 	bl	80021d0 <chSchGoSleepTimeoutS>
 8002960:	2300      	movs	r3, #0
 8002962:	f383 8811 	msr	BASEPRI, r3
}
 8002966:	bd08      	pop	{r3, pc}
	...

08002970 <chscanf.constprop.0>:
 *                      a failure (either matching or input) occurs before any
 *                      parameters are assigned, the function will return 0.
 *
 * @api
 */
int chscanf(BaseBufferedStream *chp, const char *fmt, ...)
 8002970:	b40e      	push	{r1, r2, r3}
 8002972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c = streamGet(chp);
 8002976:	6803      	ldr	r3, [r0, #0]
int chscanf(BaseBufferedStream *chp, const char *fmt, ...)
 8002978:	b088      	sub	sp, #32
 800297a:	4682      	mov	sl, r0
  c = streamGet(chp);
 800297c:	691b      	ldr	r3, [r3, #16]
{
  va_list ap;
  int     retval;

  va_start(ap, fmt);
 800297e:	ad12      	add	r5, sp, #72	; 0x48
 8002980:	9507      	str	r5, [sp, #28]
  c = streamGet(chp);
 8002982:	4798      	blx	r3
  streamPut(chp, (uint8_t)c); //ROB
 8002984:	f8da 1000 	ldr.w	r1, [sl]
  c = streamGet(chp);
 8002988:	4681      	mov	r9, r0
  streamPut(chp, (uint8_t)c); //ROB
 800298a:	68cc      	ldr	r4, [r1, #12]
 800298c:	b2c1      	uxtb	r1, r0
 800298e:	4650      	mov	r0, sl
 8002990:	47a0      	blx	r4
  while (c != STM_RESET && f != 0) {
 8002992:	f119 0f02 	cmn.w	r9, #2
 8002996:	f000 81ff 	beq.w	8002d98 <chscanf.constprop.0+0x428>
 800299a:	46a8      	mov	r8, r5
  f = *fmt++;
 800299c:	4cab      	ldr	r4, [pc, #684]	; (8002c4c <chscanf.constprop.0+0x2dc>)
 800299e:	4dac      	ldr	r5, [pc, #688]	; (8002c50 <chscanf.constprop.0+0x2e0>)
 80029a0:	4657      	mov	r7, sl
  int   n = 0;
 80029a2:	f04f 0b00 	mov.w	fp, #0
  f = *fmt++;
 80029a6:	2125      	movs	r1, #37	; 0x25
 80029a8:	46c2      	mov	sl, r8
    if (isspace(f)) {
 80029aa:	5c6b      	ldrb	r3, [r5, r1]
 80029ac:	f013 0008 	ands.w	r0, r3, #8
 80029b0:	f040 80d4 	bne.w	8002b5c <chscanf.constprop.0+0x1ec>
    if (f != '%') {
 80029b4:	2925      	cmp	r1, #37	; 0x25
 80029b6:	d011      	beq.n	80029dc <chscanf.constprop.0+0x6c>
      if (f != c) {
 80029b8:	4549      	cmp	r1, r9
 80029ba:	f000 8081 	beq.w	8002ac0 <chscanf.constprop.0+0x150>
 80029be:	46ba      	mov	sl, r7
 80029c0:	fa5f f989 	uxtb.w	r9, r9
  streamUnget(chp, c);
 80029c4:	f8da 3000 	ldr.w	r3, [sl]
 80029c8:	4649      	mov	r1, r9
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	4650      	mov	r0, sl
 80029ce:	4798      	blx	r3
  retval = chvscanf(chp, fmt, ap);
  va_end(ap);

  return retval;
}
 80029d0:	4658      	mov	r0, fp
 80029d2:	b008      	add	sp, #32
 80029d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d8:	b003      	add	sp, #12
 80029da:	4770      	bx	lr
    f = *fmt++;
 80029dc:	7823      	ldrb	r3, [r4, #0]
    if (f == '%') {
 80029de:	2b25      	cmp	r3, #37	; 0x25
 80029e0:	d10a      	bne.n	80029f8 <chscanf.constprop.0+0x88>
      if (f != c) {
 80029e2:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
 80029e6:	d1ea      	bne.n	80029be <chscanf.constprop.0+0x4e>
        c = streamGet(chp);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4638      	mov	r0, r7
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	4798      	blx	r3
        f = *fmt++;
 80029f0:	1ca6      	adds	r6, r4, #2
 80029f2:	7861      	ldrb	r1, [r4, #1]
        c = streamGet(chp);
 80029f4:	4681      	mov	r9, r0
 80029f6:	e06b      	b.n	8002ad0 <chscanf.constprop.0+0x160>
    if (f == '*') {
 80029f8:	2b2a      	cmp	r3, #42	; 0x2a
 80029fa:	f000 81c4 	beq.w	8002d86 <chscanf.constprop.0+0x416>
      buf = va_arg(ap, void*);
 80029fe:	f85a 2b04 	ldr.w	r2, [sl], #4
 8002a02:	9201      	str	r2, [sp, #4]
    f = *fmt++;
 8002a04:	1c66      	adds	r6, r4, #1
    while (isdigit(f)) {
 8002a06:	5ce9      	ldrb	r1, [r5, r3]
 8002a08:	074c      	lsls	r4, r1, #29
 8002a0a:	f140 81ca 	bpl.w	8002da2 <chscanf.constprop.0+0x432>
    width = 0;
 8002a0e:	2400      	movs	r4, #0
      width = (width * 10) + (f - '0');
 8002a10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
      f     = *fmt++;
 8002a14:	f816 3b01 	ldrb.w	r3, [r6], #1
    while (isdigit(f)) {
 8002a18:	5ce9      	ldrb	r1, [r5, r3]
      width = (width * 10) + (f - '0');
 8002a1a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    while (isdigit(f)) {
 8002a1e:	0748      	lsls	r0, r1, #29
      width = (width * 10) + (f - '0');
 8002a20:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    while (isdigit(f)) {
 8002a24:	d4f4      	bmi.n	8002a10 <chscanf.constprop.0+0xa0>
      width = -1;
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	bf08      	it	eq
 8002a2a:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
    if (f == 'l' || f == 'L') {
 8002a2e:	f003 00df 	and.w	r0, r3, #223	; 0xdf
 8002a32:	284c      	cmp	r0, #76	; 0x4c
 8002a34:	f000 80a2 	beq.w	8002b7c <chscanf.constprop.0+0x20c>
      is_long = isupper(f);
 8002a38:	f001 0103 	and.w	r1, r1, #3
 8002a3c:	f1a1 0201 	sub.w	r2, r1, #1
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	0952      	lsrs	r2, r2, #5
 8002a46:	e9cd 6202 	strd	r6, r2, [sp, #8]
 8002a4a:	3b44      	subs	r3, #68	; 0x44
 8002a4c:	2b34      	cmp	r3, #52	; 0x34
 8002a4e:	f200 809c 	bhi.w	8002b8a <chscanf.constprop.0+0x21a>
 8002a52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a56:	0164      	.short	0x0164
 8002a58:	009a009a 	.word	0x009a009a
 8002a5c:	009a009a 	.word	0x009a009a
 8002a60:	009a0139 	.word	0x009a0139
 8002a64:	009a009a 	.word	0x009a009a
 8002a68:	009a009a 	.word	0x009a009a
 8002a6c:	00a1011e 	.word	0x00a1011e
 8002a70:	009a009a 	.word	0x009a009a
 8002a74:	009a009a 	.word	0x009a009a
 8002a78:	009a0103 	.word	0x009a0103
 8002a7c:	00a1009a 	.word	0x00a1009a
 8002a80:	009a009a 	.word	0x009a009a
 8002a84:	009a009a 	.word	0x009a009a
 8002a88:	009a009a 	.word	0x009a009a
 8002a8c:	009a009a 	.word	0x009a009a
 8002a90:	009a009a 	.word	0x009a009a
 8002a94:	0164017d 	.word	0x0164017d
 8002a98:	009a009a 	.word	0x009a009a
 8002a9c:	009a009a 	.word	0x009a009a
 8002aa0:	009a0139 	.word	0x009a0139
 8002aa4:	009a009a 	.word	0x009a009a
 8002aa8:	009a009a 	.word	0x009a009a
 8002aac:	00a1011e 	.word	0x00a1011e
 8002ab0:	009a009a 	.word	0x009a009a
 8002ab4:	009a004e 	.word	0x009a004e
 8002ab8:	009a0103 	.word	0x009a0103
 8002abc:	00a1009a 	.word	0x00a1009a
        c = streamGet(chp);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	4798      	blx	r3
        f = *fmt++;
 8002ac8:	4626      	mov	r6, r4
        c = streamGet(chp);
 8002aca:	4681      	mov	r9, r0
        f = *fmt++;
 8002acc:	f816 1b01 	ldrb.w	r1, [r6], #1
  while (c != STM_RESET && f != 0) {
 8002ad0:	f119 0f02 	cmn.w	r9, #2
 8002ad4:	f000 80be 	beq.w	8002c54 <chscanf.constprop.0+0x2e4>
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	f43f af70 	beq.w	80029be <chscanf.constprop.0+0x4e>
 8002ade:	4634      	mov	r4, r6
 8002ae0:	e763      	b.n	80029aa <chscanf.constprop.0+0x3a>
        c = streamGet(chp);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	4798      	blx	r3
        if (c == STM_RESET) {
 8002ae8:	f110 0f02 	cmn.w	r0, #2
        c = streamGet(chp);
 8002aec:	4681      	mov	r9, r0
        if (c == STM_RESET) {
 8002aee:	f43f af6f 	beq.w	80029d0 <chscanf.constprop.0+0x60>
      while (isspace(c)) {
 8002af2:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002af6:	f013 0308 	ands.w	r3, r3, #8
        c = streamGet(chp);
 8002afa:	4638      	mov	r0, r7
      while (isspace(c)) {
 8002afc:	d1f1      	bne.n	8002ae2 <chscanf.constprop.0+0x172>
      for (i = 0; i < width; ++i) {
 8002afe:	2c00      	cmp	r4, #0
 8002b00:	bfc8      	it	gt
 8002b02:	461e      	movgt	r6, r3
 8002b04:	f340 8196 	ble.w	8002e34 <chscanf.constprop.0+0x4c4>
        if (buf) {
 8002b08:	9b01      	ldr	r3, [sp, #4]
        c = streamGet(chp);
 8002b0a:	4638      	mov	r0, r7
        if (buf) {
 8002b0c:	b10b      	cbz	r3, 8002b12 <chscanf.constprop.0+0x1a2>
          ((char*)buf)[i] = c;
 8002b0e:	f803 9006 	strb.w	r9, [r3, r6]
        c = streamGet(chp);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	4798      	blx	r3
 8002b18:	4681      	mov	r9, r0
        if (c == STM_RESET) {
 8002b1a:	f119 0f02 	cmn.w	r9, #2
        streamPut(chp, (uint8_t)c); //ROB
 8002b1e:	b2c1      	uxtb	r1, r0
      for (i = 0; i < width; ++i) {
 8002b20:	f106 0601 	add.w	r6, r6, #1
        streamPut(chp, (uint8_t)c); //ROB
 8002b24:	4638      	mov	r0, r7
        if (c == STM_RESET) {
 8002b26:	f43f af53 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        streamPut(chp, (uint8_t)c); //ROB
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	4798      	blx	r3
      for (i = 0; i < width; ++i) {
 8002b30:	42b4      	cmp	r4, r6
 8002b32:	f000 8182 	beq.w	8002e3a <chscanf.constprop.0+0x4ca>
        if (isspace(c)) {
 8002b36:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002b3a:	0718      	lsls	r0, r3, #28
 8002b3c:	d5e4      	bpl.n	8002b08 <chscanf.constprop.0+0x198>
          if (buf) {
 8002b3e:	9b01      	ldr	r3, [sp, #4]
 8002b40:	b133      	cbz	r3, 8002b50 <chscanf.constprop.0+0x1e0>
            ((char*)buf)[i] = 0;
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	559a      	strb	r2, [r3, r6]
          ((char*)buf)[width] = 0;
 8002b48:	9b01      	ldr	r3, [sp, #4]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	551a      	strb	r2, [r3, r4]
      f = *fmt++;
 8002b50:	9e02      	ldr	r6, [sp, #8]
      ++n;
 8002b52:	f10b 0b01 	add.w	fp, fp, #1
      f = *fmt++;
 8002b56:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002b5a:	e7bd      	b.n	8002ad8 <chscanf.constprop.0+0x168>
      while (isspace(c)) {
 8002b5c:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002b60:	071b      	lsls	r3, r3, #28
 8002b62:	d507      	bpl.n	8002b74 <chscanf.constprop.0+0x204>
        c = streamGet(chp);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4638      	mov	r0, r7
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	4798      	blx	r3
      while (isspace(c)) {
 8002b6c:	5c2b      	ldrb	r3, [r5, r0]
 8002b6e:	071e      	lsls	r6, r3, #28
 8002b70:	d4f8      	bmi.n	8002b64 <chscanf.constprop.0+0x1f4>
 8002b72:	4681      	mov	r9, r0
      f = *fmt++;
 8002b74:	4626      	mov	r6, r4
 8002b76:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002b7a:	e7a9      	b.n	8002ad0 <chscanf.constprop.0+0x160>
      f       = *fmt++;
 8002b7c:	4632      	mov	r2, r6
      is_long = true;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	9303      	str	r3, [sp, #12]
      f       = *fmt++;
 8002b82:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002b86:	9202      	str	r2, [sp, #8]
 8002b88:	e75f      	b.n	8002a4a <chscanf.constprop.0+0xda>
      streamUnget(chp, c);
 8002b8a:	6838      	ldr	r0, [r7, #0]
 8002b8c:	fa5f f189 	uxtb.w	r1, r9
 8002b90:	6943      	ldr	r3, [r0, #20]
 8002b92:	4638      	mov	r0, r7
 8002b94:	4798      	blx	r3
 8002b96:	e71b      	b.n	80029d0 <chscanf.constprop.0+0x60>
      while (isspace(c)) {
 8002b98:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002b9c:	0718      	lsls	r0, r3, #28
 8002b9e:	d507      	bpl.n	8002bb0 <chscanf.constprop.0+0x240>
        c = streamGet(chp);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	4798      	blx	r3
      while (isspace(c)) {
 8002ba8:	5c2b      	ldrb	r3, [r5, r0]
 8002baa:	0719      	lsls	r1, r3, #28
 8002bac:	d4f8      	bmi.n	8002ba0 <chscanf.constprop.0+0x230>
 8002bae:	4681      	mov	r9, r0
      if (c == '+') {
 8002bb0:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8002bb4:	f000 8108 	beq.w	8002dc8 <chscanf.constprop.0+0x458>
      } else if (c == '-') {
 8002bb8:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002bbc:	f000 8167 	beq.w	8002e8e <chscanf.constprop.0+0x51e>
    is_positive = true;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	9304      	str	r3, [sp, #16]
      if (c == '0') {
 8002bc4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002bc8:	d10d      	bne.n	8002be6 <chscanf.constprop.0+0x276>
        if (--width == 0) {
 8002bca:	1e66      	subs	r6, r4, #1
 8002bcc:	f000 818c 	beq.w	8002ee8 <chscanf.constprop.0+0x578>
        c = streamGet(chp);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4798      	blx	r3
        if (c == 'x' || c == 'X') {
 8002bd8:	f020 0320 	bic.w	r3, r0, #32
 8002bdc:	2b58      	cmp	r3, #88	; 0x58
        c = streamGet(chp);
 8002bde:	4681      	mov	r9, r0
        if (c == 'x' || c == 'X') {
 8002be0:	f000 8130 	beq.w	8002e44 <chscanf.constprop.0+0x4d4>
 8002be4:	4634      	mov	r4, r6
      is_signed = false;
 8002be6:	2300      	movs	r3, #0
 8002be8:	9305      	str	r3, [sp, #20]
      base      = 16;
 8002bea:	f04f 0810 	mov.w	r8, #16
    if (sym_to_val(c, base) == -1) {
 8002bee:	fa5f f989 	uxtb.w	r9, r9
 8002bf2:	4641      	mov	r1, r8
 8002bf4:	4648      	mov	r0, r9
 8002bf6:	f7fe f93b 	bl	8000e70 <sym_to_val>
 8002bfa:	1c41      	adds	r1, r0, #1
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f000 8171 	beq.w	8002ee4 <chscanf.constprop.0+0x574>
 8002c02:	3c02      	subs	r4, #2
    vall = 0UL;
 8002c04:	2600      	movs	r6, #0
      c    = streamGet(chp);
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4638      	mov	r0, r7
 8002c0a:	6912      	ldr	r2, [r2, #16]
      vall = (vall * base) + digit;
 8002c0c:	fb06 3608 	mla	r6, r6, r8, r3
      c    = streamGet(chp);
 8002c10:	4790      	blx	r2
    while (width--) {
 8002c12:	1c63      	adds	r3, r4, #1
      c    = streamGet(chp);
 8002c14:	4681      	mov	r9, r0
      digit = sym_to_val(c, base);
 8002c16:	4641      	mov	r1, r8
 8002c18:	b2c0      	uxtb	r0, r0
 8002c1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    while (width--) {
 8002c1e:	d004      	beq.n	8002c2a <chscanf.constprop.0+0x2ba>
      digit = sym_to_val(c, base);
 8002c20:	f7fe f926 	bl	8000e70 <sym_to_val>
      if (digit == -1) {
 8002c24:	1c42      	adds	r2, r0, #1
      digit = sym_to_val(c, base);
 8002c26:	4603      	mov	r3, r0
      if (digit == -1) {
 8002c28:	d1ed      	bne.n	8002c06 <chscanf.constprop.0+0x296>
    if (!is_positive) {
 8002c2a:	9b04      	ldr	r3, [sp, #16]
 8002c2c:	b903      	cbnz	r3, 8002c30 <chscanf.constprop.0+0x2c0>
      vall = -1 * vall;
 8002c2e:	4276      	negs	r6, r6
    if (buf) {
 8002c30:	9b01      	ldr	r3, [sp, #4]
 8002c32:	b12b      	cbz	r3, 8002c40 <chscanf.constprop.0+0x2d0>
      if (is_long && is_signed) {
 8002c34:	9a03      	ldr	r2, [sp, #12]
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	f040 80a9 	bne.w	8002d8e <chscanf.constprop.0+0x41e>
        *((unsigned int*)buf) = vall;
 8002c3c:	9b01      	ldr	r3, [sp, #4]
 8002c3e:	601e      	str	r6, [r3, #0]
    f = *fmt++;
 8002c40:	9e02      	ldr	r6, [sp, #8]
    ++n;
 8002c42:	f10b 0b01 	add.w	fp, fp, #1
    f = *fmt++;
 8002c46:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002c4a:	e741      	b.n	8002ad0 <chscanf.constprop.0+0x160>
 8002c4c:	08008355 	.word	0x08008355
 8002c50:	08008f05 	.word	0x08008f05
 8002c54:	46ba      	mov	sl, r7
  while (c != STM_RESET && f != 0) {
 8002c56:	f04f 09fe 	mov.w	r9, #254	; 0xfe
 8002c5a:	e6b3      	b.n	80029c4 <chscanf.constprop.0+0x54>
      while (isspace(c)) {
 8002c5c:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002c60:	071e      	lsls	r6, r3, #28
 8002c62:	d507      	bpl.n	8002c74 <chscanf.constprop.0+0x304>
        c = streamGet(chp);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4638      	mov	r0, r7
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	4798      	blx	r3
      while (isspace(c)) {
 8002c6c:	5c2b      	ldrb	r3, [r5, r0]
 8002c6e:	071a      	lsls	r2, r3, #28
 8002c70:	d4f8      	bmi.n	8002c64 <chscanf.constprop.0+0x2f4>
 8002c72:	4681      	mov	r9, r0
      if (c == '+') {
 8002c74:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8002c78:	f000 8122 	beq.w	8002ec0 <chscanf.constprop.0+0x550>
      } else if (c == '-') {
 8002c7c:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002c80:	f000 80bc 	beq.w	8002dfc <chscanf.constprop.0+0x48c>
      is_signed = false;
 8002c84:	2601      	movs	r6, #1
 8002c86:	2300      	movs	r3, #0
 8002c88:	e9cd 6304 	strd	r6, r3, [sp, #16]
    base        = 10;
 8002c8c:	f04f 080a 	mov.w	r8, #10
 8002c90:	e7ad      	b.n	8002bee <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 8002c92:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002c96:	0719      	lsls	r1, r3, #28
 8002c98:	d507      	bpl.n	8002caa <chscanf.constprop.0+0x33a>
        c = streamGet(chp);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	4638      	mov	r0, r7
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	4798      	blx	r3
      while (isspace(c)) {
 8002ca2:	5c2b      	ldrb	r3, [r5, r0]
 8002ca4:	071b      	lsls	r3, r3, #28
 8002ca6:	d4f8      	bmi.n	8002c9a <chscanf.constprop.0+0x32a>
 8002ca8:	4681      	mov	r9, r0
      if (c == '+') {
 8002caa:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8002cae:	f000 8110 	beq.w	8002ed2 <chscanf.constprop.0+0x562>
      } else if (c == '-') {
 8002cb2:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002cb6:	f000 80af 	beq.w	8002e18 <chscanf.constprop.0+0x4a8>
      is_signed = false;
 8002cba:	2001      	movs	r0, #1
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e9cd 0304 	strd	r0, r3, [sp, #16]
      base      = 8;
 8002cc2:	f04f 0808 	mov.w	r8, #8
 8002cc6:	e792      	b.n	8002bee <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 8002cc8:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002ccc:	071a      	lsls	r2, r3, #28
 8002cce:	d507      	bpl.n	8002ce0 <chscanf.constprop.0+0x370>
        c = streamGet(chp);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4638      	mov	r0, r7
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	4798      	blx	r3
      while (isspace(c)) {
 8002cd8:	5c2b      	ldrb	r3, [r5, r0]
 8002cda:	071b      	lsls	r3, r3, #28
 8002cdc:	d4f8      	bmi.n	8002cd0 <chscanf.constprop.0+0x360>
 8002cde:	4681      	mov	r9, r0
      if (c == '+') {
 8002ce0:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8002ce4:	d065      	beq.n	8002db2 <chscanf.constprop.0+0x442>
      } else if (c == '-') {
 8002ce6:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002cea:	f000 80c5 	beq.w	8002e78 <chscanf.constprop.0+0x508>
    is_positive = true;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	9304      	str	r3, [sp, #16]
      if (c == '0') {
 8002cf2:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002cf6:	d157      	bne.n	8002da8 <chscanf.constprop.0+0x438>
        if (--width == 0) {
 8002cf8:	1e66      	subs	r6, r4, #1
 8002cfa:	f000 80f5 	beq.w	8002ee8 <chscanf.constprop.0+0x578>
        c = streamGet(chp);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	4638      	mov	r0, r7
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	4798      	blx	r3
        if (c == 'x' || c == 'X') {
 8002d06:	f020 0320 	bic.w	r3, r0, #32
 8002d0a:	2b58      	cmp	r3, #88	; 0x58
        c = streamGet(chp);
 8002d0c:	4681      	mov	r9, r0
        if (c == 'x' || c == 'X') {
 8002d0e:	f000 80a6 	beq.w	8002e5e <chscanf.constprop.0+0x4ee>
    is_signed   = true;
 8002d12:	2301      	movs	r3, #1
        if (c == 'x' || c == 'X') {
 8002d14:	4634      	mov	r4, r6
    is_signed   = true;
 8002d16:	9305      	str	r3, [sp, #20]
          base = 8;
 8002d18:	f04f 0808 	mov.w	r8, #8
 8002d1c:	e767      	b.n	8002bee <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 8002d1e:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002d22:	071b      	lsls	r3, r3, #28
 8002d24:	d507      	bpl.n	8002d36 <chscanf.constprop.0+0x3c6>
        c = streamGet(chp);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	4638      	mov	r0, r7
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4798      	blx	r3
      while (isspace(c)) {
 8002d2e:	5c2b      	ldrb	r3, [r5, r0]
 8002d30:	071e      	lsls	r6, r3, #28
 8002d32:	d4f8      	bmi.n	8002d26 <chscanf.constprop.0+0x3b6>
 8002d34:	4681      	mov	r9, r0
      if (c == '+') {
 8002d36:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8002d3a:	f000 80b3 	beq.w	8002ea4 <chscanf.constprop.0+0x534>
      } else if (c == '-') {
 8002d3e:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002d42:	d04c      	beq.n	8002dde <chscanf.constprop.0+0x46e>
    is_positive = true;
 8002d44:	2301      	movs	r3, #1
    is_signed   = true;
 8002d46:	e9cd 3304 	strd	r3, r3, [sp, #16]
    base        = 10;
 8002d4a:	f04f 080a 	mov.w	r8, #10
 8002d4e:	e74e      	b.n	8002bee <chscanf.constprop.0+0x27e>
      for (i = 0; i < width; ++i) {
 8002d50:	2c00      	cmp	r4, #0
 8002d52:	f77f aefd 	ble.w	8002b50 <chscanf.constprop.0+0x1e0>
 8002d56:	9b01      	ldr	r3, [sp, #4]
 8002d58:	46b8      	mov	r8, r7
 8002d5a:	441c      	add	r4, r3
 8002d5c:	461e      	mov	r6, r3
 8002d5e:	461f      	mov	r7, r3
        c = streamGet(chp);
 8002d60:	4640      	mov	r0, r8
        if (buf) {
 8002d62:	b10f      	cbz	r7, 8002d68 <chscanf.constprop.0+0x3f8>
          ((char*)buf)[i] = c;
 8002d64:	f886 9000 	strb.w	r9, [r6]
        c = streamGet(chp);
 8002d68:	f8d8 3000 	ldr.w	r3, [r8]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	4798      	blx	r3
        if (c == STM_RESET) {
 8002d70:	f110 0f02 	cmn.w	r0, #2
        c = streamGet(chp);
 8002d74:	4681      	mov	r9, r0
 8002d76:	f106 0601 	add.w	r6, r6, #1
        if (c == STM_RESET) {
 8002d7a:	f43f ae29 	beq.w	80029d0 <chscanf.constprop.0+0x60>
      for (i = 0; i < width; ++i) {
 8002d7e:	42b4      	cmp	r4, r6
 8002d80:	d1ee      	bne.n	8002d60 <chscanf.constprop.0+0x3f0>
 8002d82:	4647      	mov	r7, r8
 8002d84:	e6e4      	b.n	8002b50 <chscanf.constprop.0+0x1e0>
      f   = *fmt++;
 8002d86:	7863      	ldrb	r3, [r4, #1]
      buf = NULL;
 8002d88:	9001      	str	r0, [sp, #4]
      f   = *fmt++;
 8002d8a:	1ca6      	adds	r6, r4, #2
 8002d8c:	e63b      	b.n	8002a06 <chscanf.constprop.0+0x96>
      if (is_long && is_signed) {
 8002d8e:	9a05      	ldr	r2, [sp, #20]
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	f43f af53 	beq.w	8002c3c <chscanf.constprop.0+0x2cc>
 8002d96:	e752      	b.n	8002c3e <chscanf.constprop.0+0x2ce>
  while (c != STM_RESET && f != 0) {
 8002d98:	f04f 09fe 	mov.w	r9, #254	; 0xfe
  int   n = 0;
 8002d9c:	f04f 0b00 	mov.w	fp, #0
 8002da0:	e610      	b.n	80029c4 <chscanf.constprop.0+0x54>
      width = -1;
 8002da2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002da6:	e642      	b.n	8002a2e <chscanf.constprop.0+0xbe>
    is_signed   = true;
 8002da8:	2301      	movs	r3, #1
 8002daa:	9305      	str	r3, [sp, #20]
    base        = 10;
 8002dac:	f04f 080a 	mov.w	r8, #10
 8002db0:	e71d      	b.n	8002bee <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002db2:	3c01      	subs	r4, #1
 8002db4:	f43f ae0c 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4638      	mov	r0, r7
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	4798      	blx	r3
    is_positive = true;
 8002dc0:	2301      	movs	r3, #1
        c = streamGet(chp);
 8002dc2:	4681      	mov	r9, r0
    is_positive = true;
 8002dc4:	9304      	str	r3, [sp, #16]
 8002dc6:	e794      	b.n	8002cf2 <chscanf.constprop.0+0x382>
        if (--width == 0) {
 8002dc8:	3c01      	subs	r4, #1
 8002dca:	f43f ae01 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	4638      	mov	r0, r7
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	4798      	blx	r3
    is_positive = true;
 8002dd6:	2301      	movs	r3, #1
        c = streamGet(chp);
 8002dd8:	4681      	mov	r9, r0
    is_positive = true;
 8002dda:	9304      	str	r3, [sp, #16]
 8002ddc:	e6f2      	b.n	8002bc4 <chscanf.constprop.0+0x254>
        if (--width == 0) {
 8002dde:	3c01      	subs	r4, #1
 8002de0:	f43f adf6 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4638      	mov	r0, r7
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	4798      	blx	r3
    is_signed   = true;
 8002dec:	2301      	movs	r3, #1
        c           = streamGet(chp);
 8002dee:	4681      	mov	r9, r0
    is_signed   = true;
 8002df0:	2000      	movs	r0, #0
 8002df2:	e9cd 0304 	strd	r0, r3, [sp, #16]
    base        = 10;
 8002df6:	f04f 080a 	mov.w	r8, #10
 8002dfa:	e6f8      	b.n	8002bee <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002dfc:	3c01      	subs	r4, #1
 8002dfe:	f43f ade7 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	4638      	mov	r0, r7
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	4798      	blx	r3
        is_positive = false;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9304      	str	r3, [sp, #16]
        c           = streamGet(chp);
 8002e0e:	4681      	mov	r9, r0
      is_signed = false;
 8002e10:	9305      	str	r3, [sp, #20]
    base        = 10;
 8002e12:	f04f 080a 	mov.w	r8, #10
 8002e16:	e6ea      	b.n	8002bee <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002e18:	3c01      	subs	r4, #1
 8002e1a:	f43f add9 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	4638      	mov	r0, r7
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	4798      	blx	r3
        is_positive = false;
 8002e26:	2300      	movs	r3, #0
 8002e28:	9304      	str	r3, [sp, #16]
        c           = streamGet(chp);
 8002e2a:	4681      	mov	r9, r0
      is_signed = false;
 8002e2c:	9305      	str	r3, [sp, #20]
      base      = 8;
 8002e2e:	f04f 0808 	mov.w	r8, #8
 8002e32:	e6dc      	b.n	8002bee <chscanf.constprop.0+0x27e>
      if (width != -1) {
 8002e34:	1c61      	adds	r1, r4, #1
 8002e36:	f43f ae8b 	beq.w	8002b50 <chscanf.constprop.0+0x1e0>
        if (buf) {
 8002e3a:	9b01      	ldr	r3, [sp, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f47f ae83 	bne.w	8002b48 <chscanf.constprop.0+0x1d8>
 8002e42:	e685      	b.n	8002b50 <chscanf.constprop.0+0x1e0>
          if (--width == 0) {
 8002e44:	3c02      	subs	r4, #2
 8002e46:	f43f adc3 	beq.w	80029d0 <chscanf.constprop.0+0x60>
          c = streamGet(chp);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	4638      	mov	r0, r7
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	4798      	blx	r3
      is_signed = false;
 8002e52:	2300      	movs	r3, #0
          c = streamGet(chp);
 8002e54:	4681      	mov	r9, r0
      is_signed = false;
 8002e56:	9305      	str	r3, [sp, #20]
      base      = 16;
 8002e58:	f04f 0810 	mov.w	r8, #16
 8002e5c:	e6c7      	b.n	8002bee <chscanf.constprop.0+0x27e>
          if (--width == 0) {
 8002e5e:	3c02      	subs	r4, #2
 8002e60:	f43f adb6 	beq.w	80029d0 <chscanf.constprop.0+0x60>
          c = streamGet(chp);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4638      	mov	r0, r7
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	4798      	blx	r3
    is_signed   = true;
 8002e6c:	2301      	movs	r3, #1
          c = streamGet(chp);
 8002e6e:	4681      	mov	r9, r0
    is_signed   = true;
 8002e70:	9305      	str	r3, [sp, #20]
          base = 16;
 8002e72:	f04f 0810 	mov.w	r8, #16
 8002e76:	e6ba      	b.n	8002bee <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002e78:	3c01      	subs	r4, #1
 8002e7a:	f43f ada9 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	4638      	mov	r0, r7
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4798      	blx	r3
        is_positive = false;
 8002e86:	2300      	movs	r3, #0
        c           = streamGet(chp);
 8002e88:	4681      	mov	r9, r0
        is_positive = false;
 8002e8a:	9304      	str	r3, [sp, #16]
 8002e8c:	e731      	b.n	8002cf2 <chscanf.constprop.0+0x382>
        if (--width == 0) {
 8002e8e:	3c01      	subs	r4, #1
 8002e90:	f43f ad9e 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4638      	mov	r0, r7
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	4798      	blx	r3
        is_positive = false;
 8002e9c:	2300      	movs	r3, #0
        c           = streamGet(chp);
 8002e9e:	4681      	mov	r9, r0
        is_positive = false;
 8002ea0:	9304      	str	r3, [sp, #16]
 8002ea2:	e68f      	b.n	8002bc4 <chscanf.constprop.0+0x254>
        if (--width == 0) {
 8002ea4:	3c01      	subs	r4, #1
 8002ea6:	f43f ad93 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	4638      	mov	r0, r7
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4798      	blx	r3
    is_positive = true;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	9304      	str	r3, [sp, #16]
        c = streamGet(chp);
 8002eb6:	4681      	mov	r9, r0
    is_signed   = true;
 8002eb8:	9305      	str	r3, [sp, #20]
    base        = 10;
 8002eba:	f04f 080a 	mov.w	r8, #10
 8002ebe:	e696      	b.n	8002bee <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002ec0:	3c01      	subs	r4, #1
 8002ec2:	f43f ad85 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	4638      	mov	r0, r7
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4798      	blx	r3
 8002ece:	4681      	mov	r9, r0
 8002ed0:	e6d8      	b.n	8002c84 <chscanf.constprop.0+0x314>
        if (--width == 0) {
 8002ed2:	3c01      	subs	r4, #1
 8002ed4:	f43f ad7c 	beq.w	80029d0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4638      	mov	r0, r7
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	4798      	blx	r3
 8002ee0:	4681      	mov	r9, r0
 8002ee2:	e6ea      	b.n	8002cba <chscanf.constprop.0+0x34a>
 8002ee4:	46ba      	mov	sl, r7
 8002ee6:	e56d      	b.n	80029c4 <chscanf.constprop.0+0x54>
          return ++n;
 8002ee8:	f10b 0b01 	add.w	fp, fp, #1
 8002eec:	e570      	b.n	80029d0 <chscanf.constprop.0+0x60>
 8002eee:	bf00      	nop

08002ef0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002ef0:	b40e      	push	{r1, r2, r3}
 8002ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	ab0f      	add	r3, sp, #60	; 0x3c
 8002efa:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002efe:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8002f00:	4625      	mov	r5, r4
 8002f02:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002f06:	2900      	cmp	r1, #0
 8002f08:	f000 823b 	beq.w	8003382 <chprintf+0x492>
 8002f0c:	4607      	mov	r7, r0
 8002f0e:	4699      	mov	r9, r3
  int n = 0;
 8002f10:	f04f 0800 	mov.w	r8, #0
 8002f14:	e00c      	b.n	8002f30 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	4638      	mov	r0, r7
 8002f1a:	68db      	ldr	r3, [r3, #12]
      n++;
 8002f1c:	f108 0801 	add.w	r8, r8, #1
 8002f20:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 8002f22:	4798      	blx	r3
    c = *fmt++;
 8002f24:	4625      	mov	r5, r4
 8002f26:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	f000 80be 	beq.w	80030ac <chprintf+0x1bc>
    if (c != '%') {
 8002f30:	2925      	cmp	r1, #37	; 0x25
 8002f32:	d1f0      	bne.n	8002f16 <chprintf+0x26>
    if (*fmt == '-') {
 8002f34:	7863      	ldrb	r3, [r4, #1]
 8002f36:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8002f38:	bf04      	itt	eq
 8002f3a:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 8002f3c:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 8002f3e:	782b      	ldrb	r3, [r5, #0]
    left_align = false;
 8002f40:	bf18      	it	ne
 8002f42:	2000      	movne	r0, #0
    if (*fmt == '+') {
 8002f44:	2b2b      	cmp	r3, #43	; 0x2b
 8002f46:	bf03      	ittte	eq
 8002f48:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 8002f4a:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 8002f4e:	4475      	addeq	r5, lr
    do_sign = false;
 8002f50:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 8002f54:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8002f56:	bf05      	ittet	eq
 8002f58:	461e      	moveq	r6, r3
      fmt++;
 8002f5a:	786b      	ldrbeq	r3, [r5, #1]
    filler = ' ';
 8002f5c:	2620      	movne	r6, #32
      fmt++;
 8002f5e:	3501      	addeq	r5, #1
    if ( *fmt == '*') {
 8002f60:	2b2a      	cmp	r3, #42	; 0x2a
 8002f62:	f040 80ac 	bne.w	80030be <chprintf+0x1ce>
      width = va_arg(ap, int);
 8002f66:	f859 1b04 	ldr.w	r1, [r9], #4
      c = *fmt++;
 8002f6a:	786b      	ldrb	r3, [r5, #1]
 8002f6c:	1cac      	adds	r4, r5, #2
    if (c == '.') {
 8002f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f70:	f000 8130 	beq.w	80031d4 <chprintf+0x2e4>
    precision = 0;
 8002f74:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 8002f76:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 8002f7a:	2d4c      	cmp	r5, #76	; 0x4c
 8002f7c:	f000 80b2 	beq.w	80030e4 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 8002f80:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
    switch (c) {
 8002f84:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8002f88:	f200 8198 	bhi.w	80032bc <chprintf+0x3cc>
 8002f8c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8002f90:	0196015e 	.word	0x0196015e
 8002f94:	01960196 	.word	0x01960196
 8002f98:	015e0196 	.word	0x015e0196
 8002f9c:	01960196 	.word	0x01960196
 8002fa0:	01960196 	.word	0x01960196
 8002fa4:	019a0196 	.word	0x019a0196
 8002fa8:	01960035 	.word	0x01960035
 8002fac:	01960196 	.word	0x01960196
 8002fb0:	00940196 	.word	0x00940196
 8002fb4:	01960196 	.word	0x01960196
 8002fb8:	01960035 	.word	0x01960035
 8002fbc:	01960196 	.word	0x01960196
 8002fc0:	01960196 	.word	0x01960196
 8002fc4:	01960196 	.word	0x01960196
 8002fc8:	01960196 	.word	0x01960196
 8002fcc:	014d0196 	.word	0x014d0196
 8002fd0:	0196015e 	.word	0x0196015e
 8002fd4:	01960196 	.word	0x01960196
 8002fd8:	015e0196 	.word	0x015e0196
 8002fdc:	01960196 	.word	0x01960196
 8002fe0:	01960196 	.word	0x01960196
 8002fe4:	019a0196 	.word	0x019a0196
 8002fe8:	01960035 	.word	0x01960035
 8002fec:	012d0196 	.word	0x012d0196
 8002ff0:	00940196 	.word	0x00940196
 8002ff4:	01960196 	.word	0x01960196
 8002ff8:	0035      	.short	0x0035
      if (c == 0) {
 8002ffa:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 8002ffe:	f859 5b04 	ldr.w	r5, [r9], #4
  q = p + MAX_FILLER;
 8003002:	f10d 0317 	add.w	r3, sp, #23
 8003006:	e000      	b.n	800300a <chprintf+0x11a>
  } while ((ll /= radix) != 0);
 8003008:	4663      	mov	r3, ip
    i = (int)(l % radix);
 800300a:	46aa      	mov	sl, r5
 800300c:	fbb5 f5fe 	udiv	r5, r5, lr
 8003010:	fb0e ab15 	mls	fp, lr, r5, sl
    i += '0';
 8003014:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 8003018:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 800301a:	bfc8      	it	gt
 800301c:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 8003020:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8003022:	45f2      	cmp	sl, lr
    *--q = i;
 8003024:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8003028:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 800302c:	d2ec      	bcs.n	8003008 <chprintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 800302e:	f10d 0a0c 	add.w	sl, sp, #12
 8003032:	f10d 0517 	add.w	r5, sp, #23
 8003036:	eba5 050c 	sub.w	r5, r5, ip
 800303a:	46d6      	mov	lr, sl
 800303c:	f10d 0c17 	add.w	ip, sp, #23
 8003040:	e001      	b.n	8003046 <chprintf+0x156>
 8003042:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 8003046:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 800304a:	4563      	cmp	r3, ip
 800304c:	d1f9      	bne.n	8003042 <chprintf+0x152>
 800304e:	1b49      	subs	r1, r1, r5
 8003050:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8003052:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8003056:	b920      	cbnz	r0, 8003062 <chprintf+0x172>
    if (width < 0) {
 8003058:	2900      	cmp	r1, #0
      width = -width;
 800305a:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 800305e:	f300 8145 	bgt.w	80032ec <chprintf+0x3fc>
    while (--i >= 0) {
 8003062:	2d00      	cmp	r5, #0
 8003064:	db0f      	blt.n	8003086 <chprintf+0x196>
 8003066:	1c6b      	adds	r3, r5, #1
 8003068:	4453      	add	r3, sl
 800306a:	9401      	str	r4, [sp, #4]
 800306c:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003074:	68d2      	ldr	r2, [r2, #12]
 8003076:	4638      	mov	r0, r7
 8003078:	4790      	blx	r2
    while (--i >= 0) {
 800307a:	45a2      	cmp	sl, r4
 800307c:	d1f7      	bne.n	800306e <chprintf+0x17e>
 800307e:	f108 0801 	add.w	r8, r8, #1
 8003082:	9c01      	ldr	r4, [sp, #4]
 8003084:	44a8      	add	r8, r5
    while (width) {
 8003086:	f1bb 0f00 	cmp.w	fp, #0
 800308a:	f43f af4b 	beq.w	8002f24 <chprintf+0x34>
 800308e:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4631      	mov	r1, r6
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4638      	mov	r0, r7
 8003098:	4798      	blx	r3
    while (width) {
 800309a:	3d01      	subs	r5, #1
 800309c:	d1f8      	bne.n	8003090 <chprintf+0x1a0>
    c = *fmt++;
 800309e:	4625      	mov	r5, r4
 80030a0:	44d8      	add	r8, fp
 80030a2:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80030a6:	2900      	cmp	r1, #0
 80030a8:	f47f af42 	bne.w	8002f30 <chprintf+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80030ac:	4640      	mov	r0, r8
 80030ae:	b006      	add	sp, #24
 80030b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b4:	b003      	add	sp, #12
 80030b6:	4770      	bx	lr
      if (c == 0) {
 80030b8:	f04f 0e0a 	mov.w	lr, #10
 80030bc:	e79f      	b.n	8002ffe <chprintf+0x10e>
        c = *fmt++;
 80030be:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f3      	beq.n	80030ac <chprintf+0x1bc>
      width = 0;
 80030c4:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 80030c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 80030ce:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 80030d2:	f63f af4c 	bhi.w	8002f6e <chprintf+0x7e>
        c = *fmt++;
 80030d6:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 80030da:	eb02 0145 	add.w	r1, r2, r5, lsl #1
        if (c == 0) {
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f1      	bne.n	80030c6 <chprintf+0x1d6>
 80030e2:	e7e3      	b.n	80030ac <chprintf+0x1bc>
      c = *fmt++;
 80030e4:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0df      	beq.n	80030ac <chprintf+0x1bc>
    switch (c) {
 80030ec:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 80030f0:	2d34      	cmp	r5, #52	; 0x34
 80030f2:	f200 80e3 	bhi.w	80032bc <chprintf+0x3cc>
 80030f6:	f20f 0c08 	addw	ip, pc, #8
 80030fa:	f85c f025 	ldr.w	pc, [ip, r5, lsl #2]
 80030fe:	bf00      	nop
 8003100:	0800324d 	.word	0x0800324d
 8003104:	080032bd 	.word	0x080032bd
 8003108:	080032bd 	.word	0x080032bd
 800310c:	080032bd 	.word	0x080032bd
 8003110:	080032bd 	.word	0x080032bd
 8003114:	0800324d 	.word	0x0800324d
 8003118:	080032bd 	.word	0x080032bd
 800311c:	080032bd 	.word	0x080032bd
 8003120:	080032bd 	.word	0x080032bd
 8003124:	080032bd 	.word	0x080032bd
 8003128:	080032bd 	.word	0x080032bd
 800312c:	080032c5 	.word	0x080032c5
 8003130:	08002ffb 	.word	0x08002ffb
 8003134:	080032bd 	.word	0x080032bd
 8003138:	080032bd 	.word	0x080032bd
 800313c:	080032bd 	.word	0x080032bd
 8003140:	080032bd 	.word	0x080032bd
 8003144:	080030b9 	.word	0x080030b9
 8003148:	080032bd 	.word	0x080032bd
 800314c:	080032bd 	.word	0x080032bd
 8003150:	08002ffb 	.word	0x08002ffb
 8003154:	080032bd 	.word	0x080032bd
 8003158:	080032bd 	.word	0x080032bd
 800315c:	080032bd 	.word	0x080032bd
 8003160:	080032bd 	.word	0x080032bd
 8003164:	080032bd 	.word	0x080032bd
 8003168:	080032bd 	.word	0x080032bd
 800316c:	080032bd 	.word	0x080032bd
 8003170:	080032bd 	.word	0x080032bd
 8003174:	080032bd 	.word	0x080032bd
 8003178:	080032bd 	.word	0x080032bd
 800317c:	0800322b 	.word	0x0800322b
 8003180:	0800324d 	.word	0x0800324d
 8003184:	080032bd 	.word	0x080032bd
 8003188:	080032bd 	.word	0x080032bd
 800318c:	080032bd 	.word	0x080032bd
 8003190:	080032bd 	.word	0x080032bd
 8003194:	0800324d 	.word	0x0800324d
 8003198:	080032bd 	.word	0x080032bd
 800319c:	080032bd 	.word	0x080032bd
 80031a0:	080032bd 	.word	0x080032bd
 80031a4:	080032bd 	.word	0x080032bd
 80031a8:	080032bd 	.word	0x080032bd
 80031ac:	080032c5 	.word	0x080032c5
 80031b0:	08002ffb 	.word	0x08002ffb
 80031b4:	080032bd 	.word	0x080032bd
 80031b8:	080032bd 	.word	0x080032bd
 80031bc:	080031eb 	.word	0x080031eb
 80031c0:	080032bd 	.word	0x080032bd
 80031c4:	080030b9 	.word	0x080030b9
 80031c8:	080032bd 	.word	0x080032bd
 80031cc:	080032bd 	.word	0x080032bd
 80031d0:	08002ffb 	.word	0x08002ffb
      c = *fmt++;
 80031d4:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f43f af68 	beq.w	80030ac <chprintf+0x1bc>
      if (c == '*') {
 80031dc:	2b2a      	cmp	r3, #42	; 0x2a
 80031de:	d174      	bne.n	80032ca <chprintf+0x3da>
        c = *fmt++;
 80031e0:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 80031e2:	f859 2b04 	ldr.w	r2, [r9], #4
        c = *fmt++;
 80031e6:	3402      	adds	r4, #2
 80031e8:	e6c5      	b.n	8002f76 <chprintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 80031ea:	f859 ab04 	ldr.w	sl, [r9], #4
 80031ee:	f1ba 0f00 	cmp.w	sl, #0
 80031f2:	f000 80bc 	beq.w	800336e <chprintf+0x47e>
 80031f6:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	f040 80aa 	bne.w	8003354 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80ab 	beq.w	800335c <chprintf+0x46c>
 8003206:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800320a:	4655      	mov	r5, sl
 800320c:	e001      	b.n	8003212 <chprintf+0x322>
 800320e:	42d3      	cmn	r3, r2
 8003210:	d405      	bmi.n	800321e <chprintf+0x32e>
 8003212:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003216:	ebaa 0305 	sub.w	r3, sl, r5
 800321a:	2e00      	cmp	r6, #0
 800321c:	d1f7      	bne.n	800320e <chprintf+0x31e>
 800321e:	eba5 050a 	sub.w	r5, r5, sl
 8003222:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8003224:	2620      	movs	r6, #32
 8003226:	3d01      	subs	r5, #1
 8003228:	e713      	b.n	8003052 <chprintf+0x162>
      *p++ = va_arg(ap, int);
 800322a:	f859 3b04 	ldr.w	r3, [r9], #4
 800322e:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8003232:	3901      	subs	r1, #1
      filler = ' ';
 8003234:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8003236:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 800323a:	b918      	cbnz	r0, 8003244 <chprintf+0x354>
    if (width < 0) {
 800323c:	2900      	cmp	r1, #0
      width = -width;
 800323e:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8003242:	dc72      	bgt.n	800332a <chprintf+0x43a>
    if (left_align == false) {
 8003244:	2500      	movs	r5, #0
 8003246:	f10d 0a0c 	add.w	sl, sp, #12
 800324a:	e70c      	b.n	8003066 <chprintf+0x176>
        l = va_arg(ap, int);
 800324c:	f859 cb04 	ldr.w	ip, [r9], #4
      if (l < 0) {
 8003250:	f1bc 0f00 	cmp.w	ip, #0
 8003254:	db5f      	blt.n	8003316 <chprintf+0x426>
        if (do_sign) {
 8003256:	f1be 0f00 	cmp.w	lr, #0
 800325a:	f000 808e 	beq.w	800337a <chprintf+0x48a>
          *p++ = '+';
 800325e:	232b      	movs	r3, #43	; 0x2b
 8003260:	f88d 300c 	strb.w	r3, [sp, #12]
 8003264:	f10d 050d 	add.w	r5, sp, #13
 8003268:	f10d 0a0c 	add.w	sl, sp, #12
  q = p + MAX_FILLER;
 800326c:	f105 030b 	add.w	r3, r5, #11
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8003274:	4b47      	ldr	r3, [pc, #284]	; (8003394 <chprintf+0x4a4>)
 8003276:	fba3 e30c 	umull	lr, r3, r3, ip
 800327a:	08db      	lsrs	r3, r3, #3
 800327c:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003280:	469e      	mov	lr, r3
 8003282:	ebac 034b 	sub.w	r3, ip, fp, lsl #1
    i += '0';
 8003286:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8003288:	46e3      	mov	fp, ip
    *--q = i;
 800328a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 800328c:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 8003290:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8003294:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 8003296:	dced      	bgt.n	8003274 <chprintf+0x384>
 8003298:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 800329a:	9b01      	ldr	r3, [sp, #4]
 800329c:	eba3 0c02 	sub.w	ip, r3, r2
 80032a0:	44ac      	add	ip, r5
 80032a2:	4673      	mov	r3, lr
 80032a4:	e001      	b.n	80032aa <chprintf+0x3ba>
 80032a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 80032aa:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 80032ae:	4565      	cmp	r5, ip
 80032b0:	d1f9      	bne.n	80032a6 <chprintf+0x3b6>
 80032b2:	eba5 050a 	sub.w	r5, r5, sl
 80032b6:	1b49      	subs	r1, r1, r5
 80032b8:	3d01      	subs	r5, #1
 80032ba:	e6ca      	b.n	8003052 <chprintf+0x162>
      *p++ = c;
 80032bc:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 80032c0:	3901      	subs	r1, #1
 80032c2:	e7b8      	b.n	8003236 <chprintf+0x346>
      if (c == 0) {
 80032c4:	f04f 0e08 	mov.w	lr, #8
 80032c8:	e699      	b.n	8002ffe <chprintf+0x10e>
      c = *fmt++;
 80032ca:	3401      	adds	r4, #1
    precision = 0;
 80032cc:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 80032ce:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80032d2:	b2ed      	uxtb	r5, r5
 80032d4:	2d09      	cmp	r5, #9
          precision = precision * 10 + c;
 80032d6:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 80032da:	f63f ae4c 	bhi.w	8002f76 <chprintf+0x86>
          c = *fmt++;
 80032de:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 80032e2:	eb05 024c 	add.w	r2, r5, ip, lsl #1
          if (c == 0) {
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f1      	bne.n	80032ce <chprintf+0x3de>
 80032ea:	e6df      	b.n	80030ac <chprintf+0x1bc>
      width = -width;
 80032ec:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 80032f0:	f89a 1000 	ldrb.w	r1, [sl]
 80032f4:	292d      	cmp	r1, #45	; 0x2d
 80032f6:	d021      	beq.n	800333c <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4631      	mov	r1, r6
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	4638      	mov	r0, r7
 8003300:	4798      	blx	r3
      } while (++width != 0);
 8003302:	f11b 0b01 	adds.w	fp, fp, #1
 8003306:	d1f7      	bne.n	80032f8 <chprintf+0x408>
 8003308:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 800330a:	2d00      	cmp	r5, #0
 800330c:	eba8 0803 	sub.w	r8, r8, r3
 8003310:	f6bf aea9 	bge.w	8003066 <chprintf+0x176>
 8003314:	e606      	b.n	8002f24 <chprintf+0x34>
        *p++ = '-';
 8003316:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8003318:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 800331c:	f88d 300c 	strb.w	r3, [sp, #12]
 8003320:	f10d 050d 	add.w	r5, sp, #13
 8003324:	f10d 0a0c 	add.w	sl, sp, #12
 8003328:	e7a0      	b.n	800326c <chprintf+0x37c>
      if (*s == '-' && filler == '0') {
 800332a:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 800332e:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8003332:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8003334:	f10d 0a0c 	add.w	sl, sp, #12
 8003338:	4605      	mov	r5, r0
      if (*s == '-' && filler == '0') {
 800333a:	d1dd      	bne.n	80032f8 <chprintf+0x408>
 800333c:	2e30      	cmp	r6, #48	; 0x30
 800333e:	d1db      	bne.n	80032f8 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	4638      	mov	r0, r7
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	4790      	blx	r2
 8003348:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 800334c:	f108 0801 	add.w	r8, r8, #1
        i--;
 8003350:	3d01      	subs	r5, #1
 8003352:	e7d1      	b.n	80032f8 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8003354:	b113      	cbz	r3, 800335c <chprintf+0x46c>
 8003356:	3a01      	subs	r2, #1
 8003358:	f57f af57 	bpl.w	800320a <chprintf+0x31a>
    if ((width -= i) < 0) {
 800335c:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8003360:	b918      	cbnz	r0, 800336a <chprintf+0x47a>
    if (width < 0) {
 8003362:	2900      	cmp	r1, #0
      width = -width;
 8003364:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8003368:	dc0d      	bgt.n	8003386 <chprintf+0x496>
    if (left_align == false) {
 800336a:	2620      	movs	r6, #32
 800336c:	e68b      	b.n	8003086 <chprintf+0x196>
        s = "(null)";
 800336e:	f8df a028 	ldr.w	sl, [pc, #40]	; 8003398 <chprintf+0x4a8>
      if (precision == 0) {
 8003372:	2a00      	cmp	r2, #0
 8003374:	f43f af47 	beq.w	8003206 <chprintf+0x316>
 8003378:	e7ed      	b.n	8003356 <chprintf+0x466>
    p = tmpbuf;
 800337a:	f10d 0a0c 	add.w	sl, sp, #12
 800337e:	4655      	mov	r5, sl
 8003380:	e774      	b.n	800326c <chprintf+0x37c>
  int n = 0;
 8003382:	4688      	mov	r8, r1
  return formatted_bytes;
 8003384:	e692      	b.n	80030ac <chprintf+0x1bc>
      width = -width;
 8003386:	f8cd b004 	str.w	fp, [sp, #4]
    if (width < 0) {
 800338a:	2620      	movs	r6, #32
 800338c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003390:	e7ae      	b.n	80032f0 <chprintf+0x400>
 8003392:	bf00      	nop
 8003394:	cccccccd 	.word	0xcccccccd
 8003398:	0800835c 	.word	0x0800835c
 800339c:	00000000 	.word	0x00000000

080033a0 <CharacterInputThread>:
    break;
  }
}

static THD_WORKING_AREA(waCharacterInputThread, 256);
static THD_FUNCTION(CharacterInputThread, arg) {
 80033a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80033a4:	4da3      	ldr	r5, [pc, #652]	; (8003634 <CharacterInputThread+0x294>)
 80033a6:	4ea4      	ldr	r6, [pc, #656]	; (8003638 <CharacterInputThread+0x298>)
 80033a8:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8003664 <CharacterInputThread+0x2c4>
 80033ac:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8003668 <CharacterInputThread+0x2c8>
 80033b0:	f04f 0b00 	mov.w	fp, #0
 80033b4:	b08b      	sub	sp, #44	; 0x2c
  uint8_t c;
  static uint32_t cnt_idx, count, chunk_cnt, start_address;
  uint16_t func;
  char_state_t state = IDLE;
 80033b6:	46da      	mov	sl, fp
  static uint8_t cs, idx;

  (void)arg;
  while (true){
#ifdef OSTRICHUSB
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80033b8:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d16a      	bne.n	800349a <CharacterInputThread+0xfa>
#else
    if (1){
#endif
      c=streamGet(&OSTRICHPORT);
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	489b      	ldr	r0, [pc, #620]	; (8003634 <CharacterInputThread+0x294>)
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	4798      	blx	r3
 80033cc:	2220      	movs	r2, #32
 80033ce:	b2c3      	uxtb	r3, r0
 80033d0:	f382 8811 	msr	BASEPRI, r2
 80033d4:	2100      	movs	r1, #0
 80033d6:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80033da:	f381 8811 	msr	BASEPRI, r1
      start = chVTGetSystemTime();

      if (start > end){
 80033de:	4294      	cmp	r4, r2
 80033e0:	d322      	bcc.n	8003428 <CharacterInputThread+0x88>
  return systime + (systime_t)interval;
 80033e2:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 80033e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80033ea:	3408      	adds	r4, #8
      //sdAsynchronousRead(&OSTRICHPORT, (uint8_t *)&c, 1);
      if (state == IDLE){
        debug_print_state("------------ State0: ------------ ", state);
      }

      switch (state){
 80033ec:	f1ba 0f0b 	cmp.w	sl, #11
 80033f0:	d81d      	bhi.n	800342e <CharacterInputThread+0x8e>
 80033f2:	e8df f01a 	tbh	[pc, sl, lsl #1]
 80033f6:	02f9      	.short	0x02f9
 80033f8:	017a014e 	.word	0x017a014e
 80033fc:	01cf01a6 	.word	0x01cf01a6
 8003400:	022601fb 	.word	0x022601fb
 8003404:	026400c8 	.word	0x026400c8
 8003408:	007600f0 	.word	0x007600f0
 800340c:	02dd      	.short	0x02dd
      c=streamGet(&OSTRICHPORT);
 800340e:	682b      	ldr	r3, [r5, #0]
 8003410:	4888      	ldr	r0, [pc, #544]	; (8003634 <CharacterInputThread+0x294>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	4798      	blx	r3
 8003416:	2220      	movs	r2, #32
 8003418:	b2c3      	uxtb	r3, r0
 800341a:	f382 8811 	msr	BASEPRI, r2
 800341e:	2100      	movs	r1, #0
 8003420:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003424:	f381 8811 	msr	BASEPRI, r1
 8003428:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 800342c:	3408      	adds	r4, #8
    chprintf(dbg, "%s %04x\r\n", text, val);
 800342e:	4a83      	ldr	r2, [pc, #524]	; (800363c <CharacterInputThread+0x29c>)
 8003430:	4983      	ldr	r1, [pc, #524]	; (8003640 <CharacterInputThread+0x2a0>)
 8003432:	4884      	ldr	r0, [pc, #528]	; (8003644 <CharacterInputThread+0x2a4>)
        //#######################  FUNCTION ##########################
        case IDLE:
          cs = c;
 8003434:	7033      	strb	r3, [r6, #0]
          cnt_idx = 0;
 8003436:	f04f 0a00 	mov.w	sl, #0
          //end = chTimeAddX(chVTGetSystemTimeX(), TIME_MS2I(5));
          state = START_H;
          func = c;
 800343a:	fa1f fb83 	uxth.w	fp, r3
          cnt_idx = 0;
 800343e:	f8c9 a000 	str.w	sl, [r9]
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003442:	f7ff fd55 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003446:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b04      	cmp	r3, #4
 8003450:	f000 82b8 	beq.w	80039c4 <CharacterInputThread+0x624>
        state = IDLE;
        break;
      }
    }
    else{
      chThdSleepMilliseconds(100);
 8003454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003458:	f7ff fa7a 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800345c:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b04      	cmp	r3, #4
 8003466:	f000 82ad 	beq.w	80039c4 <CharacterInputThread+0x624>
      chThdSleepMilliseconds(100);
 800346a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800346e:	f7ff fa6f 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003472:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b04      	cmp	r3, #4
 800347c:	f000 82a2 	beq.w	80039c4 <CharacterInputThread+0x624>
      chThdSleepMilliseconds(100);
 8003480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003484:	f7ff fa64 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003488:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b04      	cmp	r3, #4
 8003492:	f000 8297 	beq.w	80039c4 <CharacterInputThread+0x624>
          state = START_H;
 8003496:	f04f 0a01 	mov.w	sl, #1
      chThdSleepMilliseconds(100);
 800349a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800349e:	f7ff fa57 	bl	8002950 <chThdSleep>
 80034a2:	e789      	b.n	80033b8 <CharacterInputThread+0x18>
    chprintf(dbg, "%s %04x\r\n", text, val);
 80034a4:	4613      	mov	r3, r2
 80034a6:	4966      	ldr	r1, [pc, #408]	; (8003640 <CharacterInputThread+0x2a0>)
 80034a8:	4a67      	ldr	r2, [pc, #412]	; (8003648 <CharacterInputThread+0x2a8>)
 80034aa:	4866      	ldr	r0, [pc, #408]	; (8003644 <CharacterInputThread+0x2a4>)
 80034ac:	f7ff fd20 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80034b0:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	f040 85ff 	bne.w	80040bc <CharacterInputThread+0xd1c>
      c=streamGet(&OSTRICHPORT);
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	485c      	ldr	r0, [pc, #368]	; (8003634 <CharacterInputThread+0x294>)
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	4798      	blx	r3
 80034c6:	2220      	movs	r2, #32
 80034c8:	b2c3      	uxtb	r3, r0
 80034ca:	f382 8811 	msr	BASEPRI, r2
 80034ce:	2100      	movs	r1, #0
 80034d0:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80034d4:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 80034d8:	42a2      	cmp	r2, r4
 80034da:	d8a5      	bhi.n	8003428 <CharacterInputThread+0x88>
 80034dc:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 80034e0:	3408      	adds	r4, #8
          if (c == cs){
 80034e2:	7832      	ldrb	r2, [r6, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f000 854f 	beq.w	8003f88 <CharacterInputThread+0xbe8>
            chprintf(ost, "X"); // Checksum or Programming Error
 80034ea:	4958      	ldr	r1, [pc, #352]	; (800364c <CharacterInputThread+0x2ac>)
 80034ec:	4851      	ldr	r0, [pc, #324]	; (8003634 <CharacterInputThread+0x294>)
 80034ee:	f7ff fcff 	bl	8002ef0 <chprintf>
            chprintf(dbg, "Checksum ERROR L\r\n");
 80034f2:	4957      	ldr	r1, [pc, #348]	; (8003650 <CharacterInputThread+0x2b0>)
            chprintf(dbg, "Checksum ERROR S\r\n");
 80034f4:	4853      	ldr	r0, [pc, #332]	; (8003644 <CharacterInputThread+0x2a4>)
 80034f6:	f7ff fcfb 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80034fa:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b04      	cmp	r3, #4
 8003504:	d083      	beq.n	800340e <CharacterInputThread+0x6e>
      chThdSleepMilliseconds(100);
 8003506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800350a:	f7ff fa21 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800350e:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b04      	cmp	r3, #4
 8003518:	f43f af79 	beq.w	800340e <CharacterInputThread+0x6e>
      chThdSleepMilliseconds(100);
 800351c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003520:	f7ff fa16 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003524:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b04      	cmp	r3, #4
 800352e:	f43f af6e 	beq.w	800340e <CharacterInputThread+0x6e>
      chThdSleepMilliseconds(100);
 8003532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003536:	f7ff fa0b 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800353a:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b04      	cmp	r3, #4
 8003544:	f43f af63 	beq.w	800340e <CharacterInputThread+0x6e>
          state = IDLE;
 8003548:	f04f 0a00 	mov.w	sl, #0
 800354c:	e7a5      	b.n	800349a <CharacterInputThread+0xfa>
    chprintf(dbg, "%s %04x\r\n", text, val);
 800354e:	f7ff fccf 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003552:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b04      	cmp	r3, #4
 800355c:	f040 8546 	bne.w	8003fec <CharacterInputThread+0xc4c>
      c=streamGet(&OSTRICHPORT);
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	4834      	ldr	r0, [pc, #208]	; (8003634 <CharacterInputThread+0x294>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	4798      	blx	r3
 8003568:	2220      	movs	r2, #32
 800356a:	b2c3      	uxtb	r3, r0
 800356c:	f382 8811 	msr	BASEPRI, r2
 8003570:	2100      	movs	r1, #0
 8003572:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003576:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 800357a:	42a2      	cmp	r2, r4
 800357c:	f63f af54 	bhi.w	8003428 <CharacterInputThread+0x88>
 8003580:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 8003584:	3408      	adds	r4, #8
          cs += c;
 8003586:	7832      	ldrb	r2, [r6, #0]
          idx = c;
 8003588:	4f32      	ldr	r7, [pc, #200]	; (8003654 <CharacterInputThread+0x2b4>)
    chprintf(dbg, "%s %04x\r\n", text, val);
 800358a:	492d      	ldr	r1, [pc, #180]	; (8003640 <CharacterInputThread+0x2a0>)
 800358c:	482d      	ldr	r0, [pc, #180]	; (8003644 <CharacterInputThread+0x2a4>)
          idx = c;
 800358e:	703b      	strb	r3, [r7, #0]
          cs += c;
 8003590:	441a      	add	r2, r3
          if (func < 128){ // Below 128 are Read Functions (no data)
 8003592:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
          cs += c;
 8003596:	7032      	strb	r2, [r6, #0]
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003598:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <CharacterInputThread+0x2b8>)
          if (func < 128){ // Below 128 are Read Functions (no data)
 800359a:	f240 81ed 	bls.w	8003978 <CharacterInputThread+0x5d8>
    chprintf(dbg, "%s %04x\r\n", text, val);
 800359e:	f7ff fca7 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80035a2:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	f040 831e 	bne.w	8003bec <CharacterInputThread+0x84c>
      c=streamGet(&OSTRICHPORT);
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	4820      	ldr	r0, [pc, #128]	; (8003634 <CharacterInputThread+0x294>)
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	4798      	blx	r3
 80035b8:	2220      	movs	r2, #32
 80035ba:	b2c3      	uxtb	r3, r0
 80035bc:	f382 8811 	msr	BASEPRI, r2
 80035c0:	2100      	movs	r1, #0
 80035c2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80035c6:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 80035ca:	42a2      	cmp	r2, r4
 80035cc:	f63f af2c 	bhi.w	8003428 <CharacterInputThread+0x88>
 80035d0:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 80035d4:	3408      	adds	r4, #8
 80035d6:	f04f 0a20 	mov.w	sl, #32
          if (cnt_idx == count){
 80035da:	4820      	ldr	r0, [pc, #128]	; (800365c <CharacterInputThread+0x2bc>)
          short_buf.tbuf[cnt_idx++] = c;
 80035dc:	f8d9 2000 	ldr.w	r2, [r9]
          if (cnt_idx == count){
 80035e0:	6807      	ldr	r7, [r0, #0]
          short_buf.tbuf[cnt_idx++] = c;
 80035e2:	481f      	ldr	r0, [pc, #124]	; (8003660 <CharacterInputThread+0x2c0>)
          cs += c;
 80035e4:	7831      	ldrb	r1, [r6, #0]
          short_buf.tbuf[cnt_idx++] = c;
 80035e6:	eb00 0c02 	add.w	ip, r0, r2
 80035ea:	3201      	adds	r2, #1
          cs += c;
 80035ec:	4419      	add	r1, r3
          if (cnt_idx == count){
 80035ee:	42ba      	cmp	r2, r7
      c=streamGet(&OSTRICHPORT);
 80035f0:	4810      	ldr	r0, [pc, #64]	; (8003634 <CharacterInputThread+0x294>)
          short_buf.tbuf[cnt_idx++] = c;
 80035f2:	f88c 300d 	strb.w	r3, [ip, #13]
 80035f6:	f8c9 2000 	str.w	r2, [r9]
          cs += c;
 80035fa:	7031      	strb	r1, [r6, #0]
          if (cnt_idx == count){
 80035fc:	f000 81b4 	beq.w	8003968 <CharacterInputThread+0x5c8>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003600:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	f040 8303 	bne.w	8003c14 <CharacterInputThread+0x874>
      c=streamGet(&OSTRICHPORT);
 800360e:	682b      	ldr	r3, [r5, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	4798      	blx	r3
 8003614:	b2c3      	uxtb	r3, r0
 8003616:	f38a 8811 	msr	BASEPRI, sl
 800361a:	2100      	movs	r1, #0
 800361c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003620:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003624:	42a2      	cmp	r2, r4
 8003626:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 800362a:	f63f aefd 	bhi.w	8003428 <CharacterInputThread+0x88>
 800362e:	3408      	adds	r4, #8
      switch (state){
 8003630:	e7d3      	b.n	80035da <CharacterInputThread+0x23a>
 8003632:	bf00      	nop
 8003634:	2000143c 	.word	0x2000143c
 8003638:	20001b9c 	.word	0x20001b9c
 800363c:	08008364 	.word	0x08008364
 8003640:	0800836c 	.word	0x0800836c
 8003644:	20000f84 	.word	0x20000f84
 8003648:	080083ec 	.word	0x080083ec
 800364c:	08008448 	.word	0x08008448
 8003650:	0800844c 	.word	0x0800844c
 8003654:	20001e8c 	.word	0x20001e8c
 8003658:	080083c4 	.word	0x080083c4
 800365c:	20001b98 	.word	0x20001b98
 8003660:	20005eac 	.word	0x20005eac
 8003664:	20001b84 	.word	0x20001b84
 8003668:	40000c00 	.word	0x40000c00
      c=streamGet(&OSTRICHPORT);
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	48af      	ldr	r0, [pc, #700]	; (800392c <CharacterInputThread+0x58c>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	4798      	blx	r3
 8003674:	2220      	movs	r2, #32
 8003676:	b2c3      	uxtb	r3, r0
 8003678:	f382 8811 	msr	BASEPRI, r2
 800367c:	2100      	movs	r1, #0
 800367e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003682:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003686:	42a2      	cmp	r2, r4
 8003688:	f63f aece 	bhi.w	8003428 <CharacterInputThread+0x88>
 800368c:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 8003690:	3408      	adds	r4, #8
          start_address += (uint32_t)c * 256;
 8003692:	4aa7      	ldr	r2, [pc, #668]	; (8003930 <CharacterInputThread+0x590>)
          cs += c;
 8003694:	f896 c000 	ldrb.w	ip, [r6]
          start_address += (uint32_t)c * 256;
 8003698:	6811      	ldr	r1, [r2, #0]
    chprintf(dbg, "%s %04x\r\n", text, val);
 800369a:	48a6      	ldr	r0, [pc, #664]	; (8003934 <CharacterInputThread+0x594>)
 800369c:	4aa6      	ldr	r2, [pc, #664]	; (8003938 <CharacterInputThread+0x598>)
          start_address += (uint32_t)c * 256;
 800369e:	460f      	mov	r7, r1
 80036a0:	eb07 2e03 	add.w	lr, r7, r3, lsl #8
 80036a4:	4fa2      	ldr	r7, [pc, #648]	; (8003930 <CharacterInputThread+0x590>)
    chprintf(dbg, "%s %04x\r\n", text, val);
 80036a6:	49a5      	ldr	r1, [pc, #660]	; (800393c <CharacterInputThread+0x59c>)
          start_address += (uint32_t)c * 256;
 80036a8:	f8c7 e000 	str.w	lr, [r7]
          cs += c;
 80036ac:	449c      	add	ip, r3
 80036ae:	f886 c000 	strb.w	ip, [r6]
    chprintf(dbg, "%s %04x\r\n", text, val);
 80036b2:	f7ff fc1d 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80036b6:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	f040 824f 	bne.w	8003b62 <CharacterInputThread+0x7c2>
      c=streamGet(&OSTRICHPORT);
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	4899      	ldr	r0, [pc, #612]	; (800392c <CharacterInputThread+0x58c>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	4798      	blx	r3
 80036cc:	2220      	movs	r2, #32
 80036ce:	b2c3      	uxtb	r3, r0
 80036d0:	f382 8811 	msr	BASEPRI, r2
 80036d4:	2100      	movs	r1, #0
 80036d6:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80036da:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 80036de:	42a2      	cmp	r2, r4
 80036e0:	f63f aea2 	bhi.w	8003428 <CharacterInputThread+0x88>
 80036e4:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 80036e8:	3408      	adds	r4, #8
          start_address += (uint32_t)c;
 80036ea:	4f91      	ldr	r7, [pc, #580]	; (8003930 <CharacterInputThread+0x590>)
          cs += c;
 80036ec:	f896 c000 	ldrb.w	ip, [r6]
          start_address += (uint32_t)c;
 80036f0:	683a      	ldr	r2, [r7, #0]
    chprintf(dbg, "%s %04x\r\n", text, val);
 80036f2:	4992      	ldr	r1, [pc, #584]	; (800393c <CharacterInputThread+0x59c>)
 80036f4:	488f      	ldr	r0, [pc, #572]	; (8003934 <CharacterInputThread+0x594>)
          start_address += (uint32_t)c;
 80036f6:	4617      	mov	r7, r2
 80036f8:	eb07 0e03 	add.w	lr, r7, r3
 80036fc:	4f8c      	ldr	r7, [pc, #560]	; (8003930 <CharacterInputThread+0x590>)
    chprintf(dbg, "%s %04x\r\n", text, val);
 80036fe:	4a90      	ldr	r2, [pc, #576]	; (8003940 <CharacterInputThread+0x5a0>)
          start_address += (uint32_t)c;
 8003700:	f8c7 e000 	str.w	lr, [r7]
          cs += c;
 8003704:	449c      	add	ip, r3
 8003706:	f886 c000 	strb.w	ip, [r6]
    chprintf(dbg, "%s %04x\r\n", text, val);
 800370a:	f7ff fbf1 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800370e:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b04      	cmp	r3, #4
 8003718:	f040 8202 	bne.w	8003b20 <CharacterInputThread+0x780>
      c=streamGet(&OSTRICHPORT);
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	4883      	ldr	r0, [pc, #524]	; (800392c <CharacterInputThread+0x58c>)
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	4798      	blx	r3
 8003724:	2220      	movs	r2, #32
 8003726:	b2c3      	uxtb	r3, r0
 8003728:	f382 8811 	msr	BASEPRI, r2
 800372c:	2100      	movs	r1, #0
 800372e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003732:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003736:	42a2      	cmp	r2, r4
 8003738:	f63f ae76 	bhi.w	8003428 <CharacterInputThread+0x88>
 800373c:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 8003740:	3408      	adds	r4, #8
          cs += c;
 8003742:	f896 c000 	ldrb.w	ip, [r6]
          count = (uint32_t)c * 65536;
 8003746:	4f7f      	ldr	r7, [pc, #508]	; (8003944 <CharacterInputThread+0x5a4>)
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003748:	4a7f      	ldr	r2, [pc, #508]	; (8003948 <CharacterInputThread+0x5a8>)
 800374a:	497c      	ldr	r1, [pc, #496]	; (800393c <CharacterInputThread+0x59c>)
 800374c:	4879      	ldr	r0, [pc, #484]	; (8003934 <CharacterInputThread+0x594>)
          cs += c;
 800374e:	449c      	add	ip, r3
 8003750:	f886 c000 	strb.w	ip, [r6]
          count = (uint32_t)c * 65536;
 8003754:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8003758:	f8c7 c000 	str.w	ip, [r7]
    chprintf(dbg, "%s %04x\r\n", text, val);
 800375c:	f7ff fbc8 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003760:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b04      	cmp	r3, #4
 800376a:	f040 821e 	bne.w	8003baa <CharacterInputThread+0x80a>
      c=streamGet(&OSTRICHPORT);
 800376e:	682b      	ldr	r3, [r5, #0]
 8003770:	486e      	ldr	r0, [pc, #440]	; (800392c <CharacterInputThread+0x58c>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	4798      	blx	r3
 8003776:	2220      	movs	r2, #32
 8003778:	b2c3      	uxtb	r3, r0
 800377a:	f382 8811 	msr	BASEPRI, r2
 800377e:	2100      	movs	r1, #0
 8003780:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003784:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003788:	42a2      	cmp	r2, r4
 800378a:	f63f ae4d 	bhi.w	8003428 <CharacterInputThread+0x88>
 800378e:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 8003792:	3408      	adds	r4, #8
          count += (uint32_t)c * 256;
 8003794:	4f6b      	ldr	r7, [pc, #428]	; (8003944 <CharacterInputThread+0x5a4>)
          cs += c;
 8003796:	f896 c000 	ldrb.w	ip, [r6]
          count += (uint32_t)c * 256;
 800379a:	683a      	ldr	r2, [r7, #0]
    chprintf(dbg, "%s %04x\r\n", text, val);
 800379c:	4967      	ldr	r1, [pc, #412]	; (800393c <CharacterInputThread+0x59c>)
 800379e:	4865      	ldr	r0, [pc, #404]	; (8003934 <CharacterInputThread+0x594>)
          count += (uint32_t)c * 256;
 80037a0:	4617      	mov	r7, r2
 80037a2:	eb07 2e03 	add.w	lr, r7, r3, lsl #8
 80037a6:	4f67      	ldr	r7, [pc, #412]	; (8003944 <CharacterInputThread+0x5a4>)
    chprintf(dbg, "%s %04x\r\n", text, val);
 80037a8:	4a68      	ldr	r2, [pc, #416]	; (800394c <CharacterInputThread+0x5ac>)
          count += (uint32_t)c * 256;
 80037aa:	f8c7 e000 	str.w	lr, [r7]
          cs += c;
 80037ae:	449c      	add	ip, r3
 80037b0:	f886 c000 	strb.w	ip, [r6]
    chprintf(dbg, "%s %04x\r\n", text, val);
 80037b4:	f7ff fb9c 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80037b8:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	f040 8189 	bne.w	8003ad8 <CharacterInputThread+0x738>
      c=streamGet(&OSTRICHPORT);
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	4858      	ldr	r0, [pc, #352]	; (800392c <CharacterInputThread+0x58c>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	4798      	blx	r3
 80037ce:	2220      	movs	r2, #32
 80037d0:	b2c3      	uxtb	r3, r0
 80037d2:	f382 8811 	msr	BASEPRI, r2
 80037d6:	2100      	movs	r1, #0
 80037d8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80037dc:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 80037e0:	42a2      	cmp	r2, r4
 80037e2:	f63f ae21 	bhi.w	8003428 <CharacterInputThread+0x88>
 80037e6:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 80037ea:	3408      	adds	r4, #8
          count += (uint32_t)c;
 80037ec:	4f55      	ldr	r7, [pc, #340]	; (8003944 <CharacterInputThread+0x5a4>)
          cs += c;
 80037ee:	7830      	ldrb	r0, [r6, #0]
          count += (uint32_t)c;
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	18d1      	adds	r1, r2, r3
          if ((func > 128) && (func < 192)) state = IDX_L; // 129-191 are long buffer functions
 80037f4:	f1ab 0281 	sub.w	r2, fp, #129	; 0x81
          cs += c;
 80037f8:	4418      	add	r0, r3
          if ((func > 128) && (func < 192)) state = IDX_L; // 129-191 are long buffer functions
 80037fa:	2a3e      	cmp	r2, #62	; 0x3e
          cs += c;
 80037fc:	7030      	strb	r0, [r6, #0]
          count += (uint32_t)c;
 80037fe:	6039      	str	r1, [r7, #0]
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003800:	4a53      	ldr	r2, [pc, #332]	; (8003950 <CharacterInputThread+0x5b0>)
 8003802:	494e      	ldr	r1, [pc, #312]	; (800393c <CharacterInputThread+0x59c>)
 8003804:	484b      	ldr	r0, [pc, #300]	; (8003934 <CharacterInputThread+0x594>)
          if ((func > 128) && (func < 192)) state = IDX_L; // 129-191 are long buffer functions
 8003806:	f63f aea2 	bhi.w	800354e <CharacterInputThread+0x1ae>
    chprintf(dbg, "%s %04x\r\n", text, val);
 800380a:	f7ff fb71 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800380e:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b04      	cmp	r3, #4
 8003818:	f040 840a 	bne.w	8004030 <CharacterInputThread+0xc90>
      c=streamGet(&OSTRICHPORT);
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	4843      	ldr	r0, [pc, #268]	; (800392c <CharacterInputThread+0x58c>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4798      	blx	r3
 8003824:	2220      	movs	r2, #32
 8003826:	b2c3      	uxtb	r3, r0
 8003828:	f382 8811 	msr	BASEPRI, r2
 800382c:	2100      	movs	r1, #0
 800382e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003832:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003836:	42a2      	cmp	r2, r4
 8003838:	f63f adf6 	bhi.w	8003428 <CharacterInputThread+0x88>
 800383c:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 8003840:	3408      	adds	r4, #8
          cs += c;
 8003842:	7832      	ldrb	r2, [r6, #0]
          idx = c;
 8003844:	4943      	ldr	r1, [pc, #268]	; (8003954 <CharacterInputThread+0x5b4>)
          cs += c;
 8003846:	441a      	add	r2, r3
          idx = c;
 8003848:	700b      	strb	r3, [r1, #0]
          cs += c;
 800384a:	7032      	strb	r2, [r6, #0]
          if (idx == 0){
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 813a 	beq.w	8003ac6 <CharacterInputThread+0x726>
 8003852:	4a41      	ldr	r2, [pc, #260]	; (8003958 <CharacterInputThread+0x5b8>)
 8003854:	6912      	ldr	r2, [r2, #16]
          if (long_buf.tsize < BUFFSIZE){ // If we have only one chunk
 8003856:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800385a:	f0c0 80ff 	bcc.w	8003a5c <CharacterInputThread+0x6bc>
            if ((long_buf.tsize - ((idx) * BUFFSIZE)) >= BUFFSIZE){ // Rest is >=  BUFFSIZE
 800385e:	eba2 3243 	sub.w	r2, r2, r3, lsl #13
 8003862:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003866:	f0c0 80f9 	bcc.w	8003a5c <CharacterInputThread+0x6bc>
          chunk_cnt = BUFFSIZE; // usually we fill the buffer full
 800386a:	493c      	ldr	r1, [pc, #240]	; (800395c <CharacterInputThread+0x5bc>)
 800386c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003870:	600a      	str	r2, [r1, #0]
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003872:	4a3b      	ldr	r2, [pc, #236]	; (8003960 <CharacterInputThread+0x5c0>)
 8003874:	4931      	ldr	r1, [pc, #196]	; (800393c <CharacterInputThread+0x59c>)
 8003876:	482f      	ldr	r0, [pc, #188]	; (8003934 <CharacterInputThread+0x594>)
 8003878:	f7ff fb3a 	bl	8002ef0 <chprintf>
 800387c:	4b37      	ldr	r3, [pc, #220]	; (800395c <CharacterInputThread+0x5bc>)
 800387e:	4a39      	ldr	r2, [pc, #228]	; (8003964 <CharacterInputThread+0x5c4>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	492e      	ldr	r1, [pc, #184]	; (800393c <CharacterInputThread+0x59c>)
 8003884:	482b      	ldr	r0, [pc, #172]	; (8003934 <CharacterInputThread+0x594>)
 8003886:	f7ff fb33 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800388a:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b04      	cmp	r3, #4
 8003894:	f040 80e5 	bne.w	8003a62 <CharacterInputThread+0x6c2>
      c=streamGet(&OSTRICHPORT);
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	4824      	ldr	r0, [pc, #144]	; (800392c <CharacterInputThread+0x58c>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	4798      	blx	r3
 80038a0:	2220      	movs	r2, #32
 80038a2:	b2c3      	uxtb	r3, r0
 80038a4:	f382 8811 	msr	BASEPRI, r2
 80038a8:	2100      	movs	r1, #0
 80038aa:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80038ae:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 80038b2:	42a2      	cmp	r2, r4
 80038b4:	f63f adb8 	bhi.w	8003428 <CharacterInputThread+0x88>
 80038b8:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 80038bc:	3408      	adds	r4, #8
 80038be:	f04f 0a20 	mov.w	sl, #32
          cs += c;
 80038c2:	4a24      	ldr	r2, [pc, #144]	; (8003954 <CharacterInputThread+0x5b4>)
          long_buf.tbuf[(BUFFSIZE * (idx & 1)) + cnt_idx++] = c;
 80038c4:	4824      	ldr	r0, [pc, #144]	; (8003958 <CharacterInputThread+0x5b8>)
 80038c6:	7812      	ldrb	r2, [r2, #0]
 80038c8:	f8d9 1000 	ldr.w	r1, [r9]
          cs += c;
 80038cc:	f896 c000 	ldrb.w	ip, [r6]
 80038d0:	f002 0201 	and.w	r2, r2, #1
          long_buf.tbuf[(BUFFSIZE * (idx & 1)) + cnt_idx++] = c;
 80038d4:	eb00 3e42 	add.w	lr, r0, r2, lsl #13
 80038d8:	448e      	add	lr, r1
          cs += c;
 80038da:	449c      	add	ip, r3
          long_buf.tbuf[(BUFFSIZE * (idx & 1)) + cnt_idx++] = c;
 80038dc:	f88e 3018 	strb.w	r3, [lr, #24]
          if (cnt_idx == chunk_cnt){
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <CharacterInputThread+0x5bc>)
      c=streamGet(&OSTRICHPORT);
 80038e2:	4812      	ldr	r0, [pc, #72]	; (800392c <CharacterInputThread+0x58c>)
          if (cnt_idx == chunk_cnt){
 80038e4:	681b      	ldr	r3, [r3, #0]
          cs += c;
 80038e6:	f886 c000 	strb.w	ip, [r6]
          long_buf.tbuf[(BUFFSIZE * (idx & 1)) + cnt_idx++] = c;
 80038ea:	3101      	adds	r1, #1
          if (cnt_idx == chunk_cnt){
 80038ec:	4299      	cmp	r1, r3
          long_buf.tbuf[(BUFFSIZE * (idx & 1)) + cnt_idx++] = c;
 80038ee:	ea4f 3242 	mov.w	r2, r2, lsl #13
 80038f2:	f8c9 1000 	str.w	r1, [r9]
          if (cnt_idx == chunk_cnt){
 80038f6:	f43f add5 	beq.w	80034a4 <CharacterInputThread+0x104>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80038fa:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b04      	cmp	r3, #4
 8003904:	f040 80c1 	bne.w	8003a8a <CharacterInputThread+0x6ea>
      c=streamGet(&OSTRICHPORT);
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	4798      	blx	r3
 800390e:	b2c3      	uxtb	r3, r0
 8003910:	f38a 8811 	msr	BASEPRI, sl
 8003914:	2100      	movs	r1, #0
 8003916:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800391a:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 800391e:	42a2      	cmp	r2, r4
 8003920:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 8003924:	f63f ad80 	bhi.w	8003428 <CharacterInputThread+0x88>
 8003928:	3408      	adds	r4, #8
      switch (state){
 800392a:	e7ca      	b.n	80038c2 <CharacterInputThread+0x522>
 800392c:	2000143c 	.word	0x2000143c
 8003930:	20005fbc 	.word	0x20005fbc
 8003934:	20000f84 	.word	0x20000f84
 8003938:	08008388 	.word	0x08008388
 800393c:	0800836c 	.word	0x0800836c
 8003940:	08008394 	.word	0x08008394
 8003944:	20001b98 	.word	0x20001b98
 8003948:	080083a0 	.word	0x080083a0
 800394c:	080083ac 	.word	0x080083ac
 8003950:	080083b8 	.word	0x080083b8
 8003954:	20001e8c 	.word	0x20001e8c
 8003958:	20001e90 	.word	0x20001e90
 800395c:	20001b80 	.word	0x20001b80
 8003960:	080083cc 	.word	0x080083cc
 8003964:	080083dc 	.word	0x080083dc
            debug_print_val1("Offset: ", (BUFFSIZE * (idx & 1)));
 8003968:	4bc2      	ldr	r3, [pc, #776]	; (8003c74 <CharacterInputThread+0x8d4>)
    chprintf(dbg, "%s %04x\r\n", text, val);
 800396a:	49c3      	ldr	r1, [pc, #780]	; (8003c78 <CharacterInputThread+0x8d8>)
            debug_print_val1("Offset: ", (BUFFSIZE * (idx & 1)));
 800396c:	781b      	ldrb	r3, [r3, #0]
    chprintf(dbg, "%s %04x\r\n", text, val);
 800396e:	48c3      	ldr	r0, [pc, #780]	; (8003c7c <CharacterInputThread+0x8dc>)
 8003970:	4ac3      	ldr	r2, [pc, #780]	; (8003c80 <CharacterInputThread+0x8e0>)
            debug_print_val1("Offset: ", (BUFFSIZE * (idx & 1)));
 8003972:	f003 0301 	and.w	r3, r3, #1
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003976:	035b      	lsls	r3, r3, #13
 8003978:	f7ff faba 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800397c:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	f040 81c0 	bne.w	8003d0a <CharacterInputThread+0x96a>
      c=streamGet(&OSTRICHPORT);
 800398a:	682b      	ldr	r3, [r5, #0]
 800398c:	48bd      	ldr	r0, [pc, #756]	; (8003c84 <CharacterInputThread+0x8e4>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	4798      	blx	r3
 8003992:	2220      	movs	r2, #32
 8003994:	b2c3      	uxtb	r3, r0
 8003996:	f382 8811 	msr	BASEPRI, r2
 800399a:	2100      	movs	r1, #0
 800399c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80039a0:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 80039a4:	42a2      	cmp	r2, r4
 80039a6:	f63f ad3f 	bhi.w	8003428 <CharacterInputThread+0x88>
 80039aa:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 80039ae:	3408      	adds	r4, #8
          if (c == cs){
 80039b0:	7832      	ldrb	r2, [r6, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	f000 81ce 	beq.w	8003d54 <CharacterInputThread+0x9b4>
            chprintf(ost, "X"); // Checksum or Programming Error (resend)
 80039b8:	49b3      	ldr	r1, [pc, #716]	; (8003c88 <CharacterInputThread+0x8e8>)
 80039ba:	48b2      	ldr	r0, [pc, #712]	; (8003c84 <CharacterInputThread+0x8e4>)
 80039bc:	f7ff fa98 	bl	8002ef0 <chprintf>
            chprintf(dbg, "Checksum ERROR S\r\n");
 80039c0:	49b2      	ldr	r1, [pc, #712]	; (8003c8c <CharacterInputThread+0x8ec>)
 80039c2:	e597      	b.n	80034f4 <CharacterInputThread+0x154>
      c=streamGet(&OSTRICHPORT);
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	48af      	ldr	r0, [pc, #700]	; (8003c84 <CharacterInputThread+0x8e4>)
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	4798      	blx	r3
 80039cc:	2220      	movs	r2, #32
 80039ce:	b2c3      	uxtb	r3, r0
 80039d0:	f382 8811 	msr	BASEPRI, r2
 80039d4:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80039d8:	f38a 8811 	msr	BASEPRI, sl
      if (start > end){
 80039dc:	4294      	cmp	r4, r2
 80039de:	f4ff ad23 	bcc.w	8003428 <CharacterInputThread+0x88>
 80039e2:	f502 549c 	add.w	r4, r2, #4992	; 0x1380
 80039e6:	3408      	adds	r4, #8
          cs += c;
 80039e8:	f896 c000 	ldrb.w	ip, [r6]
          start_address = (uint32_t)c * 65536;
 80039ec:	4fa8      	ldr	r7, [pc, #672]	; (8003c90 <CharacterInputThread+0x8f0>)
    chprintf(dbg, "%s %04x\r\n", text, val);
 80039ee:	4aa9      	ldr	r2, [pc, #676]	; (8003c94 <CharacterInputThread+0x8f4>)
 80039f0:	49a1      	ldr	r1, [pc, #644]	; (8003c78 <CharacterInputThread+0x8d8>)
 80039f2:	48a2      	ldr	r0, [pc, #648]	; (8003c7c <CharacterInputThread+0x8dc>)
          cs += c;
 80039f4:	449c      	add	ip, r3
 80039f6:	f886 c000 	strb.w	ip, [r6]
          start_address = (uint32_t)c * 65536;
 80039fa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80039fe:	f8c7 c000 	str.w	ip, [r7]
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003a02:	f7ff fa75 	bl	8002ef0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a06:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	f43f ae2c 	beq.w	800366c <CharacterInputThread+0x2cc>
      chThdSleepMilliseconds(100);
 8003a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a18:	f7fe ff9a 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a1c:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	f43f ae21 	beq.w	800366c <CharacterInputThread+0x2cc>
      chThdSleepMilliseconds(100);
 8003a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a2e:	f7fe ff8f 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a32:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	f43f ae16 	beq.w	800366c <CharacterInputThread+0x2cc>
      chThdSleepMilliseconds(100);
 8003a40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a44:	f7fe ff84 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a48:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	f43f ae0b 	beq.w	800366c <CharacterInputThread+0x2cc>
          state = START_M;
 8003a56:	f04f 0a02 	mov.w	sl, #2
 8003a5a:	e51e      	b.n	800349a <CharacterInputThread+0xfa>
              chunk_cnt = (long_buf.tsize - ((idx) * BUFFSIZE)); // Buffer partially full
 8003a5c:	498e      	ldr	r1, [pc, #568]	; (8003c98 <CharacterInputThread+0x8f8>)
 8003a5e:	600a      	str	r2, [r1, #0]
 8003a60:	e707      	b.n	8003872 <CharacterInputThread+0x4d2>
      chThdSleepMilliseconds(100);
 8003a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a66:	f7fe ff73 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a6a:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d016      	beq.n	8003aa4 <CharacterInputThread+0x704>
      chThdSleepMilliseconds(100);
 8003a76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a7a:	f7fe ff69 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a7e:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d00c      	beq.n	8003aa4 <CharacterInputThread+0x704>
      chThdSleepMilliseconds(100);
 8003a8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a8e:	f7fe ff5f 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a92:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d002      	beq.n	8003aa4 <CharacterInputThread+0x704>
          state = DATA_L;
 8003a9e:	f04f 0a09 	mov.w	sl, #9
 8003aa2:	e4fa      	b.n	800349a <CharacterInputThread+0xfa>
      c=streamGet(&OSTRICHPORT);
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	4877      	ldr	r0, [pc, #476]	; (8003c84 <CharacterInputThread+0x8e4>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	4798      	blx	r3
 8003aac:	2220      	movs	r2, #32
 8003aae:	b2c3      	uxtb	r3, r0
 8003ab0:	f382 8811 	msr	BASEPRI, r2
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003aba:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003abe:	4294      	cmp	r4, r2
 8003ac0:	f4ff acb2 	bcc.w	8003428 <CharacterInputThread+0x88>
 8003ac4:	e6f8      	b.n	80038b8 <CharacterInputThread+0x518>
            long_buf.tsize = count; // This is the total size of the upload
 8003ac6:	4a75      	ldr	r2, [pc, #468]	; (8003c9c <CharacterInputThread+0x8fc>)
            long_buf.tstart = start_address; // Start Address for RAM
 8003ac8:	4971      	ldr	r1, [pc, #452]	; (8003c90 <CharacterInputThread+0x8f0>)
            long_buf.bytes_written = 0;
 8003aca:	4875      	ldr	r0, [pc, #468]	; (8003ca0 <CharacterInputThread+0x900>)
            long_buf.tsize = count; // This is the total size of the upload
 8003acc:	6812      	ldr	r2, [r2, #0]
            long_buf.tstart = start_address; // Start Address for RAM
 8003ace:	6809      	ldr	r1, [r1, #0]
            long_buf.bytes_written = 0;
 8003ad0:	6043      	str	r3, [r0, #4]
            long_buf.tstart = start_address; // Start Address for RAM
 8003ad2:	e9c0 2104 	strd	r2, r1, [r0, #16]
 8003ad6:	e6be      	b.n	8003856 <CharacterInputThread+0x4b6>
      chThdSleepMilliseconds(100);
 8003ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003adc:	f7fe ff38 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ae0:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	f000 80b1 	beq.w	8003c50 <CharacterInputThread+0x8b0>
      chThdSleepMilliseconds(100);
 8003aee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003af2:	f7fe ff2d 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003af6:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	f000 80a6 	beq.w	8003c50 <CharacterInputThread+0x8b0>
      chThdSleepMilliseconds(100);
 8003b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b08:	f7fe ff22 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b0c:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	f000 809b 	beq.w	8003c50 <CharacterInputThread+0x8b0>
          state = LEN_L;
 8003b1a:	f04f 0a06 	mov.w	sl, #6
 8003b1e:	e4bc      	b.n	800349a <CharacterInputThread+0xfa>
      chThdSleepMilliseconds(100);
 8003b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b24:	f7fe ff14 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b28:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d07c      	beq.n	8003c2e <CharacterInputThread+0x88e>
      chThdSleepMilliseconds(100);
 8003b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b38:	f7fe ff0a 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b3c:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d072      	beq.n	8003c2e <CharacterInputThread+0x88e>
      chThdSleepMilliseconds(100);
 8003b48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b4c:	f7fe ff00 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b50:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d068      	beq.n	8003c2e <CharacterInputThread+0x88e>
          state = LEN_H;
 8003b5c:	f04f 0a04 	mov.w	sl, #4
 8003b60:	e49b      	b.n	800349a <CharacterInputThread+0xfa>
      chThdSleepMilliseconds(100);
 8003b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b66:	f7fe fef3 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b6a:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	f000 80a7 	beq.w	8003cc6 <CharacterInputThread+0x926>
      chThdSleepMilliseconds(100);
 8003b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b7c:	f7fe fee8 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b80:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	f000 809c 	beq.w	8003cc6 <CharacterInputThread+0x926>
      chThdSleepMilliseconds(100);
 8003b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b92:	f7fe fedd 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b96:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	f000 8091 	beq.w	8003cc6 <CharacterInputThread+0x926>
          state = START_L;
 8003ba4:	f04f 0a03 	mov.w	sl, #3
 8003ba8:	e477      	b.n	800349a <CharacterInputThread+0xfa>
      chThdSleepMilliseconds(100);
 8003baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bae:	f7fe fecf 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003bb2:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d072      	beq.n	8003ca4 <CharacterInputThread+0x904>
      chThdSleepMilliseconds(100);
 8003bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bc2:	f7fe fec5 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003bc6:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d068      	beq.n	8003ca4 <CharacterInputThread+0x904>
      chThdSleepMilliseconds(100);
 8003bd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bd6:	f7fe febb 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003bda:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d05e      	beq.n	8003ca4 <CharacterInputThread+0x904>
          state = LEN_M;
 8003be6:	f04f 0a05 	mov.w	sl, #5
 8003bea:	e456      	b.n	800349a <CharacterInputThread+0xfa>
      chThdSleepMilliseconds(100);
 8003bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf0:	f7fe feae 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003bf4:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d073      	beq.n	8003ce8 <CharacterInputThread+0x948>
      chThdSleepMilliseconds(100);
 8003c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c04:	f7fe fea4 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c08:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d069      	beq.n	8003ce8 <CharacterInputThread+0x948>
      chThdSleepMilliseconds(100);
 8003c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c18:	f7fe fe9a 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c1c:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d05f      	beq.n	8003ce8 <CharacterInputThread+0x948>
            state = DATA_S;
 8003c28:	f04f 0a0a 	mov.w	sl, #10
 8003c2c:	e435      	b.n	800349a <CharacterInputThread+0xfa>
      c=streamGet(&OSTRICHPORT);
 8003c2e:	682b      	ldr	r3, [r5, #0]
 8003c30:	4814      	ldr	r0, [pc, #80]	; (8003c84 <CharacterInputThread+0x8e4>)
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	4798      	blx	r3
 8003c36:	2220      	movs	r2, #32
 8003c38:	b2c3      	uxtb	r3, r0
 8003c3a:	f382 8811 	msr	BASEPRI, r2
 8003c3e:	2100      	movs	r1, #0
 8003c40:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003c44:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003c48:	4294      	cmp	r4, r2
 8003c4a:	f4ff abed 	bcc.w	8003428 <CharacterInputThread+0x88>
 8003c4e:	e575      	b.n	800373c <CharacterInputThread+0x39c>
      c=streamGet(&OSTRICHPORT);
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	480c      	ldr	r0, [pc, #48]	; (8003c84 <CharacterInputThread+0x8e4>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	4798      	blx	r3
 8003c58:	2220      	movs	r2, #32
 8003c5a:	b2c3      	uxtb	r3, r0
 8003c5c:	f382 8811 	msr	BASEPRI, r2
 8003c60:	2100      	movs	r1, #0
 8003c62:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003c66:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003c6a:	4294      	cmp	r4, r2
 8003c6c:	f4ff abdc 	bcc.w	8003428 <CharacterInputThread+0x88>
 8003c70:	e5b9      	b.n	80037e6 <CharacterInputThread+0x446>
 8003c72:	bf00      	nop
 8003c74:	20001e8c 	.word	0x20001e8c
 8003c78:	0800836c 	.word	0x0800836c
 8003c7c:	20000f84 	.word	0x20000f84
 8003c80:	080083ec 	.word	0x080083ec
 8003c84:	2000143c 	.word	0x2000143c
 8003c88:	08008448 	.word	0x08008448
 8003c8c:	080084e4 	.word	0x080084e4
 8003c90:	20005fbc 	.word	0x20005fbc
 8003c94:	08008378 	.word	0x08008378
 8003c98:	20001b80 	.word	0x20001b80
 8003c9c:	20001b98 	.word	0x20001b98
 8003ca0:	20001e90 	.word	0x20001e90
      c=streamGet(&OSTRICHPORT);
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	48ab      	ldr	r0, [pc, #684]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	4798      	blx	r3
 8003cac:	2220      	movs	r2, #32
 8003cae:	b2c3      	uxtb	r3, r0
 8003cb0:	f382 8811 	msr	BASEPRI, r2
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003cba:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003cbe:	4294      	cmp	r4, r2
 8003cc0:	f4ff abb2 	bcc.w	8003428 <CharacterInputThread+0x88>
 8003cc4:	e563      	b.n	800378e <CharacterInputThread+0x3ee>
      c=streamGet(&OSTRICHPORT);
 8003cc6:	682b      	ldr	r3, [r5, #0]
 8003cc8:	48a2      	ldr	r0, [pc, #648]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	4798      	blx	r3
 8003cce:	2220      	movs	r2, #32
 8003cd0:	b2c3      	uxtb	r3, r0
 8003cd2:	f382 8811 	msr	BASEPRI, r2
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003cdc:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003ce0:	4294      	cmp	r4, r2
 8003ce2:	f4ff aba1 	bcc.w	8003428 <CharacterInputThread+0x88>
 8003ce6:	e4fd      	b.n	80036e4 <CharacterInputThread+0x344>
      c=streamGet(&OSTRICHPORT);
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	489a      	ldr	r0, [pc, #616]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	4798      	blx	r3
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	b2c3      	uxtb	r3, r0
 8003cf4:	f382 8811 	msr	BASEPRI, r2
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003cfe:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003d02:	4294      	cmp	r4, r2
 8003d04:	f4ff ab90 	bcc.w	8003428 <CharacterInputThread+0x88>
 8003d08:	e462      	b.n	80035d0 <CharacterInputThread+0x230>
      chThdSleepMilliseconds(100);
 8003d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d0e:	f7fe fe1f 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d12:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	f000 8155 	beq.w	8003fca <CharacterInputThread+0xc2a>
      chThdSleepMilliseconds(100);
 8003d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d24:	f7fe fe14 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d28:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	f000 814a 	beq.w	8003fca <CharacterInputThread+0xc2a>
      chThdSleepMilliseconds(100);
 8003d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d3a:	f7fe fe09 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d3e:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	f000 813f 	beq.w	8003fca <CharacterInputThread+0xc2a>
            state = CHECKSUM_S;
 8003d4c:	f04f 0a0c 	mov.w	sl, #12
 8003d50:	f7ff bba3 	b.w	800349a <CharacterInputThread+0xfa>
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003d54:	4a80      	ldr	r2, [pc, #512]	; (8003f58 <CharacterInputThread+0xbb8>)
 8003d56:	4981      	ldr	r1, [pc, #516]	; (8003f5c <CharacterInputThread+0xbbc>)
 8003d58:	4881      	ldr	r0, [pc, #516]	; (8003f60 <CharacterInputThread+0xbc0>)
 8003d5a:	f7ff f8c9 	bl	8002ef0 <chprintf>
            short_buf.tindex = idx;
 8003d5e:	4b81      	ldr	r3, [pc, #516]	; (8003f64 <CharacterInputThread+0xbc4>)
            short_buf.func = func;
 8003d60:	4881      	ldr	r0, [pc, #516]	; (8003f68 <CharacterInputThread+0xbc8>)
            short_buf.tindex = idx;
 8003d62:	f893 c000 	ldrb.w	ip, [r3]
            short_buf.tsize = count;
 8003d66:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <CharacterInputThread+0xbcc>)
            short_buf.func = func;
 8003d68:	f880 b000 	strb.w	fp, [r0]
            short_buf.tsize = count;
 8003d6c:	681a      	ldr	r2, [r3, #0]
            short_buf.tstart = start_address;
 8003d6e:	4b80      	ldr	r3, [pc, #512]	; (8003f70 <CharacterInputThread+0xbd0>)
            chprintf(ost, "O"); // Checksum OK.
 8003d70:	4980      	ldr	r1, [pc, #512]	; (8003f74 <CharacterInputThread+0xbd4>)
            short_buf.tstart = start_address;
 8003d72:	681b      	ldr	r3, [r3, #0]
            short_buf.func = func;
 8003d74:	4607      	mov	r7, r0
            chprintf(ost, "O"); // Checksum OK.
 8003d76:	4877      	ldr	r0, [pc, #476]	; (8003f54 <CharacterInputThread+0xbb4>)
            short_buf.tindex = idx;
 8003d78:	f887 c00c 	strb.w	ip, [r7, #12]
            short_buf.tstart = start_address;
 8003d7c:	e9c7 2301 	strd	r2, r3, [r7, #4]
            chprintf(ost, "O"); // Checksum OK.
 8003d80:	f7ff f8b6 	bl	8002ef0 <chprintf>
  switch (short_buf.func){
 8003d84:	f997 2000 	ldrsb.w	r2, [r7]
 8003d88:	783b      	ldrb	r3, [r7, #0]
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	db6b      	blt.n	8003e66 <CharacterInputThread+0xac6>
 8003d8e:	2b7a      	cmp	r3, #122	; 0x7a
 8003d90:	f67f abb3 	bls.w	80034fa <CharacterInputThread+0x15a>
 8003d94:	3b7c      	subs	r3, #124	; 0x7c
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	f200 823c 	bhi.w	8004214 <CharacterInputThread+0xe74>
 8003d9c:	e8df f003 	tbb	[pc, r3]
 8003da0:	5a022040 	.word	0x5a022040
    send_three_byte(&cs, long_buf.bytes_written);
 8003da4:	4b74      	ldr	r3, [pc, #464]	; (8003f78 <CharacterInputThread+0xbd8>)
 8003da6:	685b      	ldr	r3, [r3, #4]
  buf[2] = (uint8_t)((val&0x000000FF));
 8003da8:	f88d 301e 	strb.w	r3, [sp, #30]
  buf[0] = (uint8_t)((val&0x00FF0000) >> 16);
 8003dac:	f3c3 4107 	ubfx	r1, r3, #16, #8
  buf[1] = (uint8_t)((val&0x0000FF00) >> 8);
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f88d 301d 	strb.w	r3, [sp, #29]
  cs = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	4627      	mov	r7, r4
  buf[0] = (uint8_t)((val&0x00FF0000) >> 16);
 8003dba:	f88d 101c 	strb.w	r1, [sp, #28]
  for (i=0; i<3; i++){
 8003dbe:	f10d 0a1d 	add.w	sl, sp, #29
  cs = 0;
 8003dc2:	461c      	mov	r4, r3
    streamPut(ost, buf[i]);
 8003dc4:	682a      	ldr	r2, [r5, #0]
 8003dc6:	4863      	ldr	r0, [pc, #396]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003dc8:	68d2      	ldr	r2, [r2, #12]
    *cs += buf[i];
 8003dca:	440c      	add	r4, r1
    streamPut(ost, buf[i]);
 8003dcc:	4790      	blx	r2
  for (i=0; i<3; i++){
 8003dce:	f10d 031f 	add.w	r3, sp, #31
 8003dd2:	4553      	cmp	r3, sl
    *cs += buf[i];
 8003dd4:	b2e4      	uxtb	r4, r4
  for (i=0; i<3; i++){
 8003dd6:	f000 81b9 	beq.w	800414c <CharacterInputThread+0xdac>
 8003dda:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003dde:	e7f1      	b.n	8003dc4 <CharacterInputThread+0xa24>
  streamPut(ost, buf);
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	485c      	ldr	r0, [pc, #368]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2155      	movs	r1, #85	; 0x55
 8003de8:	4798      	blx	r3
 8003dea:	682b      	ldr	r3, [r5, #0]
 8003dec:	4859      	ldr	r0, [pc, #356]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2143      	movs	r1, #67	; 0x43
 8003df2:	4798      	blx	r3
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	4857      	ldr	r0, [pc, #348]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2133      	movs	r1, #51	; 0x33
 8003dfc:	4798      	blx	r3
 8003dfe:	682b      	ldr	r3, [r5, #0]
 8003e00:	4854      	ldr	r0, [pc, #336]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	211e      	movs	r1, #30
 8003e06:	4798      	blx	r3
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	4852      	ldr	r0, [pc, #328]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4798      	blx	r3
    streamPut(ost, cs);
 8003e12:	682b      	ldr	r3, [r5, #0]
 8003e14:	21e9      	movs	r1, #233	; 0xe9
    streamPut(ost, cs);
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	484e      	ldr	r0, [pc, #312]	; (8003f54 <CharacterInputThread+0xbb4>)
 8003e1a:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e1c:	f7ff bb6d 	b.w	80034fa <CharacterInputThread+0x15a>
  	read_clock(short_buf.tbuf); // 9 bytes
 8003e20:	4856      	ldr	r0, [pc, #344]	; (8003f7c <CharacterInputThread+0xbdc>)
 8003e22:	1e43      	subs	r3, r0, #1
 8003e24:	9303      	str	r3, [sp, #12]
 8003e26:	f7fe fc3b 	bl	80026a0 <read_clock>
  cs = 0;
 8003e2a:	9b03      	ldr	r3, [sp, #12]
 8003e2c:	4627      	mov	r7, r4
 8003e2e:	f04f 0a00 	mov.w	sl, #0
 8003e32:	461c      	mov	r4, r3
    streamPut(ost, buf[i]);
 8003e34:	682a      	ldr	r2, [r5, #0]
    *cs += buf[i];
 8003e36:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    streamPut(ost, buf[i]);
 8003e3a:	68d2      	ldr	r2, [r2, #12]
 8003e3c:	4845      	ldr	r0, [pc, #276]	; (8003f54 <CharacterInputThread+0xbb4>)
    *cs += buf[i];
 8003e3e:	448a      	add	sl, r1
    streamPut(ost, buf[i]);
 8003e40:	4790      	blx	r2
  for (i=0; i<len; i++){
 8003e42:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <CharacterInputThread+0xbe0>)
 8003e44:	42a3      	cmp	r3, r4
    *cs += buf[i];
 8003e46:	fa5f fa8a 	uxtb.w	sl, sl
  for (i=0; i<len; i++){
 8003e4a:	d1f3      	bne.n	8003e34 <CharacterInputThread+0xa94>
 8003e4c:	463c      	mov	r4, r7
    streamPut(ost, cs);
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	4651      	mov	r1, sl
 8003e52:	e7e0      	b.n	8003e16 <CharacterInputThread+0xa76>
    chprintf(dbg, "Progress %d \r\n", short_buf.tsize);
 8003e54:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <CharacterInputThread+0xbc8>)
 8003e56:	494b      	ldr	r1, [pc, #300]	; (8003f84 <CharacterInputThread+0xbe4>)
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4841      	ldr	r0, [pc, #260]	; (8003f60 <CharacterInputThread+0xbc0>)
 8003e5c:	f7ff f848 	bl	8002ef0 <chprintf>
    streamPut(ost, cs);
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	2100      	movs	r1, #0
 8003e64:	e7d7      	b.n	8003e16 <CharacterInputThread+0xa76>
  switch (short_buf.func){
 8003e66:	2bc0      	cmp	r3, #192	; 0xc0
 8003e68:	f000 8163 	beq.w	8004132 <CharacterInputThread+0xd92>
 8003e6c:	2bc1      	cmp	r3, #193	; 0xc1
 8003e6e:	f47f ab44 	bne.w	80034fa <CharacterInputThread+0x15a>

void write_clock(uint8_t* buf){
 uint8_t oldval[9];
 read_clock(oldval);
 8003e72:	a807      	add	r0, sp, #28
 8003e74:	f7fe fc14 	bl	80026a0 <read_clock>
 if (DEBUGLEVEL == 5){
    chprintf(dbg, "Old:       %02d, %02X, %02X, %02X, %02X, %02X, %02X, %02X, %02X\r\n", oldval[0], oldval[1], oldval[2], oldval[3], oldval[4], oldval[5], oldval[6], oldval[7], oldval[8]);
}
 if ((buf[1]  != oldval[1]) ) set_offset(buf[1]);
 8003e78:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <CharacterInputThread+0xbc8>)
 8003e7a:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8003e7e:	7b9b      	ldrb	r3, [r3, #14]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d00a      	beq.n	8003e9a <CharacterInputThread+0xafa>
    temp[1] = val & 0x1F;
 8003e84:	f003 031f 	and.w	r3, r3, #31
    temp[0] = DS1085_OFFSET;
 8003e88:	220e      	movs	r2, #14
    WriteDev(temp, 2);
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	a806      	add	r0, sp, #24
    temp[1] = val & 0x1F;
 8003e8e:	f88d 3019 	strb.w	r3, [sp, #25]
    temp[0] = DS1085_OFFSET;
 8003e92:	f88d 2018 	strb.w	r2, [sp, #24]
    WriteDev(temp, 2);
 8003e96:	f7fe fc4b 	bl	8002730 <WriteDev>
 if ((buf[2]  != oldval[2]) ) set_address(buf[2]);
 8003e9a:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <CharacterInputThread+0xbc8>)
 8003e9c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8003ea0:	7bdb      	ldrb	r3, [r3, #15]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d00a      	beq.n	8003ebc <CharacterInputThread+0xb1c>
    temp[1] = val & 0x0F;
 8003ea6:	f003 030f 	and.w	r3, r3, #15
    temp[0] = DS1085_ADDR;
 8003eaa:	220d      	movs	r2, #13
    WriteDev(temp, 2);
 8003eac:	2102      	movs	r1, #2
 8003eae:	a806      	add	r0, sp, #24
    temp[1] = val & 0x0F;
 8003eb0:	f88d 3019 	strb.w	r3, [sp, #25]
    temp[0] = DS1085_ADDR;
 8003eb4:	f88d 2018 	strb.w	r2, [sp, #24]
    WriteDev(temp, 2);
 8003eb8:	f7fe fc3a 	bl	8002730 <WriteDev>
 if ((buf[3]  != oldval[3]) || (buf[4] != oldval[4]) ) set_two_byte(DS1085_MUX, (uint16_t)((buf[3] << 8) | buf[4]));
 8003ebc:	492a      	ldr	r1, [pc, #168]	; (8003f68 <CharacterInputThread+0xbc8>)
 8003ebe:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003ec2:	7c0a      	ldrb	r2, [r1, #16]
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	f000 8186 	beq.w	80041d6 <CharacterInputThread+0xe36>
 8003eca:	7c4b      	ldrb	r3, [r1, #17]
 8003ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    conv.x = val << 6;
 8003ed0:	0199      	lsls	r1, r3, #6
    tx[0] = reg;
 8003ed2:	2202      	movs	r2, #2
    tx[1] = conv.b[1];
 8003ed4:	f3c3 0387 	ubfx	r3, r3, #2, #8
    tx[2] = conv.b[0];
 8003ed8:	f88d 101a 	strb.w	r1, [sp, #26]
    WriteDev(tx, 3);
 8003edc:	a806      	add	r0, sp, #24
 8003ede:	2103      	movs	r1, #3
    tx[1] = conv.b[1];
 8003ee0:	f88d 3019 	strb.w	r3, [sp, #25]
    tx[0] = reg;
 8003ee4:	f88d 2018 	strb.w	r2, [sp, #24]
    WriteDev(tx, 3);
 8003ee8:	f7fe fc22 	bl	8002730 <WriteDev>
 if ((buf[5]  != oldval[5]) || (buf[6] != oldval[6]) ) set_two_byte(DS1085_DAC, (uint16_t)((buf[5] << 8) | buf[6]));
 8003eec:	491e      	ldr	r1, [pc, #120]	; (8003f68 <CharacterInputThread+0xbc8>)
 8003eee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8003ef2:	7c8a      	ldrb	r2, [r1, #18]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	f000 8158 	beq.w	80041aa <CharacterInputThread+0xe0a>
 8003efa:	7ccb      	ldrb	r3, [r1, #19]
 8003efc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    conv.x = val << 6;
 8003f00:	0199      	lsls	r1, r3, #6
    tx[0] = reg;
 8003f02:	2208      	movs	r2, #8
    tx[1] = conv.b[1];
 8003f04:	f3c3 0387 	ubfx	r3, r3, #2, #8
    tx[2] = conv.b[0];
 8003f08:	f88d 101a 	strb.w	r1, [sp, #26]
    WriteDev(tx, 3);
 8003f0c:	a806      	add	r0, sp, #24
 8003f0e:	2103      	movs	r1, #3
    tx[1] = conv.b[1];
 8003f10:	f88d 3019 	strb.w	r3, [sp, #25]
    tx[0] = reg;
 8003f14:	f88d 2018 	strb.w	r2, [sp, #24]
    WriteDev(tx, 3);
 8003f18:	f7fe fc0a 	bl	8002730 <WriteDev>
 if ((buf[7]  != oldval[7]) || (buf[8] != oldval[8]) ) set_two_byte(DS1085_DIV, (uint16_t)((buf[7] << 8) | buf[8]));
 8003f1c:	4912      	ldr	r1, [pc, #72]	; (8003f68 <CharacterInputThread+0xbc8>)
 8003f1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f22:	7d0a      	ldrb	r2, [r1, #20]
 8003f24:	4293      	cmp	r3, r2
 8003f26:	f000 814e 	beq.w	80041c6 <CharacterInputThread+0xe26>
 8003f2a:	7d4b      	ldrb	r3, [r1, #21]
 8003f2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    conv.x = val << 6;
 8003f30:	0199      	lsls	r1, r3, #6
    tx[0] = reg;
 8003f32:	2201      	movs	r2, #1
    tx[1] = conv.b[1];
 8003f34:	f3c3 0387 	ubfx	r3, r3, #2, #8
    tx[2] = conv.b[0];
 8003f38:	f88d 101a 	strb.w	r1, [sp, #26]
    WriteDev(tx, 3);
 8003f3c:	a806      	add	r0, sp, #24
 8003f3e:	2103      	movs	r1, #3
    tx[1] = conv.b[1];
 8003f40:	f88d 3019 	strb.w	r3, [sp, #25]
    tx[0] = reg;
 8003f44:	f88d 2018 	strb.w	r2, [sp, #24]
    WriteDev(tx, 3);
 8003f48:	f7fe fbf2 	bl	8002730 <WriteDev>
    streamPut(ost, 'Y');
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	2159      	movs	r1, #89	; 0x59
 8003f50:	e761      	b.n	8003e16 <CharacterInputThread+0xa76>
 8003f52:	bf00      	nop
 8003f54:	2000143c 	.word	0x2000143c
 8003f58:	08008460 	.word	0x08008460
 8003f5c:	0800836c 	.word	0x0800836c
 8003f60:	20000f84 	.word	0x20000f84
 8003f64:	20001e8c 	.word	0x20001e8c
 8003f68:	20005eac 	.word	0x20005eac
 8003f6c:	20001b98 	.word	0x20001b98
 8003f70:	20005fbc 	.word	0x20005fbc
 8003f74:	08008444 	.word	0x08008444
 8003f78:	20001e90 	.word	0x20001e90
 8003f7c:	20005eb9 	.word	0x20005eb9
 8003f80:	20005ec1 	.word	0x20005ec1
 8003f84:	08008470 	.word	0x08008470
            long_buf.index = idx;
 8003f88:	4ba5      	ldr	r3, [pc, #660]	; (8004220 <CharacterInputThread+0xe80>)
            long_buf.bsize[(idx & 1)] = chunk_cnt;
 8003f8a:	48a6      	ldr	r0, [pc, #664]	; (8004224 <CharacterInputThread+0xe84>)
            long_buf.index = idx;
 8003f8c:	f893 c000 	ldrb.w	ip, [r3]
            long_buf.bsize[(idx & 1)] = chunk_cnt;
 8003f90:	4ba5      	ldr	r3, [pc, #660]	; (8004228 <CharacterInputThread+0xe88>)
            chprintf(dbg, "BufferSize: 0: %d 1: %d, Index: %d\r\n", long_buf.bsize[0], long_buf.bsize[1], idx);
 8003f92:	49a6      	ldr	r1, [pc, #664]	; (800422c <CharacterInputThread+0xe8c>)
            long_buf.bsize[(idx & 1)] = chunk_cnt;
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	f8cd c000 	str.w	ip, [sp]
 8003f9a:	f00c 0301 	and.w	r3, ip, #1
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            chprintf(dbg, "BufferSize: 0: %d 1: %d, Index: %d\r\n", long_buf.bsize[0], long_buf.bsize[1], idx);
 8003fa4:	4607      	mov	r7, r0
            long_buf.bsize[(idx & 1)] = chunk_cnt;
 8003fa6:	805a      	strh	r2, [r3, #2]
            chprintf(dbg, "BufferSize: 0: %d 1: %d, Index: %d\r\n", long_buf.bsize[0], long_buf.bsize[1], idx);
 8003fa8:	8983      	ldrh	r3, [r0, #12]
 8003faa:	8942      	ldrh	r2, [r0, #10]
            long_buf.index = idx;
 8003fac:	f887 c008 	strb.w	ip, [r7, #8]
            chprintf(dbg, "BufferSize: 0: %d 1: %d, Index: %d\r\n", long_buf.bsize[0], long_buf.bsize[1], idx);
 8003fb0:	489f      	ldr	r0, [pc, #636]	; (8004230 <CharacterInputThread+0xe90>)
 8003fb2:	f7fe ff9d 	bl	8002ef0 <chprintf>
            if (long_buf.bsize[0] && long_buf.bsize[1]){
 8003fb6:	897b      	ldrh	r3, [r7, #10]
 8003fb8:	b11b      	cbz	r3, 8003fc2 <CharacterInputThread+0xc22>
 8003fba:	89bb      	ldrh	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f040 80b1 	bne.w	8004124 <CharacterInputThread+0xd84>
              chprintf(ost, "O"); // Checksum OK.
 8003fc2:	499c      	ldr	r1, [pc, #624]	; (8004234 <CharacterInputThread+0xe94>)
 8003fc4:	489c      	ldr	r0, [pc, #624]	; (8004238 <CharacterInputThread+0xe98>)
 8003fc6:	f7ff ba96 	b.w	80034f6 <CharacterInputThread+0x156>
      c=streamGet(&OSTRICHPORT);
 8003fca:	682b      	ldr	r3, [r5, #0]
 8003fcc:	489a      	ldr	r0, [pc, #616]	; (8004238 <CharacterInputThread+0xe98>)
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4798      	blx	r3
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	b2c3      	uxtb	r3, r0
 8003fd6:	f382 8811 	msr	BASEPRI, r2
 8003fda:	2100      	movs	r1, #0
 8003fdc:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003fe0:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 8003fe4:	4294      	cmp	r4, r2
 8003fe6:	f4ff aa1f 	bcc.w	8003428 <CharacterInputThread+0x88>
 8003fea:	e4de      	b.n	80039aa <CharacterInputThread+0x60a>
      chThdSleepMilliseconds(100);
 8003fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ff0:	f7fe fcae 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ff4:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d039      	beq.n	8004074 <CharacterInputThread+0xcd4>
      chThdSleepMilliseconds(100);
 8004000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004004:	f7fe fca4 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004008:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d02f      	beq.n	8004074 <CharacterInputThread+0xcd4>
      chThdSleepMilliseconds(100);
 8004014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004018:	f7fe fc9a 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800401c:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d025      	beq.n	8004074 <CharacterInputThread+0xcd4>
          state = IDX_S;                // below 128 are short buffer functions
 8004028:	f04f 0a08 	mov.w	sl, #8
 800402c:	f7ff ba35 	b.w	800349a <CharacterInputThread+0xfa>
      chThdSleepMilliseconds(100);
 8004030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004034:	f7fe fc8c 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004038:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d029      	beq.n	8004098 <CharacterInputThread+0xcf8>
      chThdSleepMilliseconds(100);
 8004044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004048:	f7fe fc82 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800404c:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d01f      	beq.n	8004098 <CharacterInputThread+0xcf8>
      chThdSleepMilliseconds(100);
 8004058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800405c:	f7fe fc78 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004060:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d015      	beq.n	8004098 <CharacterInputThread+0xcf8>
          if ((func > 128) && (func < 192)) state = IDX_L; // 129-191 are long buffer functions
 800406c:	f04f 0a07 	mov.w	sl, #7
 8004070:	f7ff ba13 	b.w	800349a <CharacterInputThread+0xfa>
      c=streamGet(&OSTRICHPORT);
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	4870      	ldr	r0, [pc, #448]	; (8004238 <CharacterInputThread+0xe98>)
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	4798      	blx	r3
 800407c:	2220      	movs	r2, #32
 800407e:	b2c3      	uxtb	r3, r0
 8004080:	f382 8811 	msr	BASEPRI, r2
 8004084:	2100      	movs	r1, #0
 8004086:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800408a:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 800408e:	4294      	cmp	r4, r2
 8004090:	f4ff a9ca 	bcc.w	8003428 <CharacterInputThread+0x88>
 8004094:	f7ff ba74 	b.w	8003580 <CharacterInputThread+0x1e0>
      c=streamGet(&OSTRICHPORT);
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	4867      	ldr	r0, [pc, #412]	; (8004238 <CharacterInputThread+0xe98>)
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	4798      	blx	r3
 80040a0:	2220      	movs	r2, #32
 80040a2:	b2c3      	uxtb	r3, r0
 80040a4:	f382 8811 	msr	BASEPRI, r2
 80040a8:	2100      	movs	r1, #0
 80040aa:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80040ae:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 80040b2:	4294      	cmp	r4, r2
 80040b4:	f4ff a9b8 	bcc.w	8003428 <CharacterInputThread+0x88>
 80040b8:	f7ff bbc0 	b.w	800383c <CharacterInputThread+0x49c>
      chThdSleepMilliseconds(100);
 80040bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040c0:	f7fe fc46 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040c4:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d017      	beq.n	8004100 <CharacterInputThread+0xd60>
      chThdSleepMilliseconds(100);
 80040d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040d4:	f7fe fc3c 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040d8:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d00d      	beq.n	8004100 <CharacterInputThread+0xd60>
      chThdSleepMilliseconds(100);
 80040e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040e8:	f7fe fc32 	bl	8002950 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040ec:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d003      	beq.n	8004100 <CharacterInputThread+0xd60>
            state = CHECKSUM_L;
 80040f8:	f04f 0a0b 	mov.w	sl, #11
 80040fc:	f7ff b9cd 	b.w	800349a <CharacterInputThread+0xfa>
      c=streamGet(&OSTRICHPORT);
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	484d      	ldr	r0, [pc, #308]	; (8004238 <CharacterInputThread+0xe98>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	4798      	blx	r3
 8004108:	2220      	movs	r2, #32
 800410a:	b2c3      	uxtb	r3, r0
 800410c:	f382 8811 	msr	BASEPRI, r2
 8004110:	2100      	movs	r1, #0
 8004112:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004116:	f381 8811 	msr	BASEPRI, r1
      if (start > end){
 800411a:	4294      	cmp	r4, r2
 800411c:	f4ff a984 	bcc.w	8003428 <CharacterInputThread+0x88>
 8004120:	f7ff b9dc 	b.w	80034dc <CharacterInputThread+0x13c>
              chprintf(ost, "W"); // Checksum OK, Buffer full.
 8004124:	4945      	ldr	r1, [pc, #276]	; (800423c <CharacterInputThread+0xe9c>)
 8004126:	4844      	ldr	r0, [pc, #272]	; (8004238 <CharacterInputThread+0xe98>)
 8004128:	f7fe fee2 	bl	8002ef0 <chprintf>
              chprintf(dbg, "Buffer Full, Wake Thread up.\r\n");
 800412c:	4944      	ldr	r1, [pc, #272]	; (8004240 <CharacterInputThread+0xea0>)
 800412e:	f7ff b9e1 	b.w	80034f4 <CharacterInputThread+0x154>
  	temp = short_buf.tbuf[0];
 8004132:	4b44      	ldr	r3, [pc, #272]	; (8004244 <CharacterInputThread+0xea4>)
 8004134:	7b5b      	ldrb	r3, [r3, #13]
void write_config(uint8_t* buf){

}

void write_pins(uint8_t data){
  switch (data){
 8004136:	2b01      	cmp	r3, #1
 8004138:	d063      	beq.n	8004202 <CharacterInputThread+0xe62>
 800413a:	2b02      	cmp	r3, #2
 800413c:	d05c      	beq.n	80041f8 <CharacterInputThread+0xe58>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d051      	beq.n	80041e6 <CharacterInputThread+0xe46>
    break;
  case 2:
    chprintf(dbg, "in Reset onoff... \r\n");
    break;
  default:
    chprintf(dbg, "in Reset unhandled... \r\n");
 8004142:	4941      	ldr	r1, [pc, #260]	; (8004248 <CharacterInputThread+0xea8>)
 8004144:	483a      	ldr	r0, [pc, #232]	; (8004230 <CharacterInputThread+0xe90>)
 8004146:	f7fe fed3 	bl	8002ef0 <chprintf>
    streamPut(ost, 'Y');
 800414a:	e6ff      	b.n	8003f4c <CharacterInputThread+0xbac>
    send_two_byte(&cs, long_buf.bsize[0]);
 800414c:	9403      	str	r4, [sp, #12]
 800414e:	463c      	mov	r4, r7
 8004150:	4f34      	ldr	r7, [pc, #208]	; (8004224 <CharacterInputThread+0xe84>)
    streamPut(ost, buf[i]);
 8004152:	682a      	ldr	r2, [r5, #0]
    send_two_byte(&cs, long_buf.bsize[0]);
 8004154:	f8b7 a00a 	ldrh.w	sl, [r7, #10]
    streamPut(ost, buf[i]);
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	4837      	ldr	r0, [pc, #220]	; (8004238 <CharacterInputThread+0xe98>)
  buf[0] = (uint8_t)((val&0xFF00) >> 8);
 800415c:	ea4f 231a 	mov.w	r3, sl, lsr #8
    streamPut(ost, buf[i]);
 8004160:	4619      	mov	r1, r3
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	4790      	blx	r2
 8004166:	682a      	ldr	r2, [r5, #0]
 8004168:	4833      	ldr	r0, [pc, #204]	; (8004238 <CharacterInputThread+0xe98>)
 800416a:	68d2      	ldr	r2, [r2, #12]
  buf[1] = (uint8_t)((val&0x00FF));
 800416c:	fa5f fa8a 	uxtb.w	sl, sl
    streamPut(ost, buf[i]);
 8004170:	4651      	mov	r1, sl
 8004172:	4790      	blx	r2
    send_two_byte(&cs, long_buf.bsize[1]);
 8004174:	89b9      	ldrh	r1, [r7, #12]
  buf[1] = (uint8_t)((val&0x00FF));
 8004176:	9b05      	ldr	r3, [sp, #20]
    streamPut(ost, buf[i]);
 8004178:	6828      	ldr	r0, [r5, #0]
  buf[1] = (uint8_t)((val&0x00FF));
 800417a:	b2ca      	uxtb	r2, r1
    *cs += buf[i];
 800417c:	4492      	add	sl, r2
 800417e:	449a      	add	sl, r3
 8004180:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
    streamPut(ost, buf[i]);
 8004184:	68c3      	ldr	r3, [r0, #12]
 8004186:	482c      	ldr	r0, [pc, #176]	; (8004238 <CharacterInputThread+0xe98>)
 8004188:	9204      	str	r2, [sp, #16]
 800418a:	0a09      	lsrs	r1, r1, #8
 800418c:	4798      	blx	r3
    *cs += buf[i];
 800418e:	9a03      	ldr	r2, [sp, #12]
    streamPut(ost, buf[i]);
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	4829      	ldr	r0, [pc, #164]	; (8004238 <CharacterInputThread+0xe98>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	fa5f fa8a 	uxtb.w	sl, sl
    *cs += buf[i];
 800419a:	4452      	add	r2, sl
 800419c:	4692      	mov	sl, r2
    streamPut(ost, buf[i]);
 800419e:	9a04      	ldr	r2, [sp, #16]
 80041a0:	4611      	mov	r1, r2
    *cs += buf[i];
 80041a2:	fa5f fa8a 	uxtb.w	sl, sl
    streamPut(ost, buf[i]);
 80041a6:	4798      	blx	r3
 80041a8:	e651      	b.n	8003e4e <CharacterInputThread+0xaae>
 if ((buf[5]  != oldval[5]) || (buf[6] != oldval[6]) ) set_two_byte(DS1085_DAC, (uint16_t)((buf[5] << 8) | buf[6]));
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <CharacterInputThread+0xea4>)
 80041ac:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 80041b0:	7cdb      	ldrb	r3, [r3, #19]
 80041b2:	4299      	cmp	r1, r3
 80041b4:	f47f aea2 	bne.w	8003efc <CharacterInputThread+0xb5c>
 if ((buf[7]  != oldval[7]) || (buf[8] != oldval[8]) ) set_two_byte(DS1085_DIV, (uint16_t)((buf[7] << 8) | buf[8]));
 80041b8:	4922      	ldr	r1, [pc, #136]	; (8004244 <CharacterInputThread+0xea4>)
 80041ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041be:	7d0a      	ldrb	r2, [r1, #20]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	f47f aeb2 	bne.w	8003f2a <CharacterInputThread+0xb8a>
 80041c6:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <CharacterInputThread+0xea4>)
 80041c8:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 80041cc:	7d5b      	ldrb	r3, [r3, #21]
 80041ce:	4299      	cmp	r1, r3
 80041d0:	f47f aeac 	bne.w	8003f2c <CharacterInputThread+0xb8c>
 80041d4:	e6ba      	b.n	8003f4c <CharacterInputThread+0xbac>
 if ((buf[3]  != oldval[3]) || (buf[4] != oldval[4]) ) set_two_byte(DS1085_MUX, (uint16_t)((buf[3] << 8) | buf[4]));
 80041d6:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <CharacterInputThread+0xea4>)
 80041d8:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80041dc:	7c5b      	ldrb	r3, [r3, #17]
 80041de:	4299      	cmp	r1, r3
 80041e0:	f47f ae74 	bne.w	8003ecc <CharacterInputThread+0xb2c>
 80041e4:	e682      	b.n	8003eec <CharacterInputThread+0xb4c>
    chprintf(dbg, "in Reset inactive... \r\n");
 80041e6:	4919      	ldr	r1, [pc, #100]	; (800424c <CharacterInputThread+0xeac>)
 80041e8:	4811      	ldr	r0, [pc, #68]	; (8004230 <CharacterInputThread+0xe90>)
 80041ea:	f7fe fe81 	bl	8002ef0 <chprintf>
    TRESET_INACTIVE;
 80041ee:	4a18      	ldr	r2, [pc, #96]	; (8004250 <CharacterInputThread+0xeb0>)
 80041f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f4:	8353      	strh	r3, [r2, #26]
    break;
 80041f6:	e6a9      	b.n	8003f4c <CharacterInputThread+0xbac>
    chprintf(dbg, "in Reset onoff... \r\n");
 80041f8:	4916      	ldr	r1, [pc, #88]	; (8004254 <CharacterInputThread+0xeb4>)
 80041fa:	480d      	ldr	r0, [pc, #52]	; (8004230 <CharacterInputThread+0xe90>)
 80041fc:	f7fe fe78 	bl	8002ef0 <chprintf>
    break;
 8004200:	e6a4      	b.n	8003f4c <CharacterInputThread+0xbac>
    chprintf(dbg, "in Reset active... \r\n");
 8004202:	4915      	ldr	r1, [pc, #84]	; (8004258 <CharacterInputThread+0xeb8>)
 8004204:	480a      	ldr	r0, [pc, #40]	; (8004230 <CharacterInputThread+0xe90>)
 8004206:	f7fe fe73 	bl	8002ef0 <chprintf>
    TRESET_ACTIVE;
 800420a:	4a11      	ldr	r2, [pc, #68]	; (8004250 <CharacterInputThread+0xeb0>)
 800420c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004210:	8313      	strh	r3, [r2, #24]
    break;
 8004212:	e69b      	b.n	8003f4c <CharacterInputThread+0xbac>
  	if (short_buf.tindex == 0){
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <CharacterInputThread+0xea4>)
 8004216:	7b1b      	ldrb	r3, [r3, #12]
 8004218:	b303      	cbz	r3, 800425c <CharacterInputThread+0xebc>
  cs = 0;
 800421a:	f04f 0a00 	mov.w	sl, #0
 800421e:	e02a      	b.n	8004276 <CharacterInputThread+0xed6>
 8004220:	20001e8c 	.word	0x20001e8c
 8004224:	20001e90 	.word	0x20001e90
 8004228:	20001b80 	.word	0x20001b80
 800422c:	080083f8 	.word	0x080083f8
 8004230:	20000f84 	.word	0x20000f84
 8004234:	08008444 	.word	0x08008444
 8004238:	2000143c 	.word	0x2000143c
 800423c:	08008420 	.word	0x08008420
 8004240:	08008424 	.word	0x08008424
 8004244:	20005eac 	.word	0x20005eac
 8004248:	080084c8 	.word	0x080084c8
 800424c:	08008480 	.word	0x08008480
 8004250:	40020400 	.word	0x40020400
 8004254:	080084b0 	.word	0x080084b0
 8004258:	08008498 	.word	0x08008498
  		cs = read_single_byte(short_buf.tstart, 0);
 800425c:	4f16      	ldr	r7, [pc, #88]	; (80042b8 <CharacterInputThread+0xf18>)
 800425e:	68b8      	ldr	r0, [r7, #8]
 8004260:	f7fe fb06 	bl	8002870 <read_single_byte.constprop.0>
  		short_buf.tsize--;
 8004264:	687b      	ldr	r3, [r7, #4]
  		streamPut(ost, cs);
 8004266:	682a      	ldr	r2, [r5, #0]
  		short_buf.tsize--;
 8004268:	3b01      	subs	r3, #1
  		cs = read_single_byte(short_buf.tstart, 0);
 800426a:	4682      	mov	sl, r0
  		streamPut(ost, cs);
 800426c:	4601      	mov	r1, r0
  		short_buf.tsize--;
 800426e:	607b      	str	r3, [r7, #4]
  		streamPut(ost, cs);
 8004270:	4812      	ldr	r0, [pc, #72]	; (80042bc <CharacterInputThread+0xf1c>)
 8004272:	68d3      	ldr	r3, [r2, #12]
 8004274:	4798      	blx	r3
	while (short_buf.tsize--){ 
 8004276:	4910      	ldr	r1, [pc, #64]	; (80042b8 <CharacterInputThread+0xf18>)
 8004278:	684b      	ldr	r3, [r1, #4]
 800427a:	1e5a      	subs	r2, r3, #1
 800427c:	604a      	str	r2, [r1, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f43f ade5 	beq.w	8003e4e <CharacterInputThread+0xaae>
  CPC_HIGH; // Count up
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <CharacterInputThread+0xf20>)
 8004286:	f248 0200 	movw	r2, #32768	; 0x8000
 800428a:	831a      	strh	r2, [r3, #24]
  __NOP();
 800428c:	bf00      	nop
  CPC_LOW;  // Latch into Output Register
 800428e:	835a      	strh	r2, [r3, #26]
  __NOP();
 8004290:	bf00      	nop
  __NOP();
 8004292:	bf00      	nop
  data = read_byte();
 8004294:	f7fe fa84 	bl	80027a0 <read_byte>
		streamPut(ost, temp);
 8004298:	682a      	ldr	r2, [r5, #0]
 800429a:	4601      	mov	r1, r0
 800429c:	68d2      	ldr	r2, [r2, #12]
		cs += temp;
 800429e:	4482      	add	sl, r0
		streamPut(ost, temp);
 80042a0:	4806      	ldr	r0, [pc, #24]	; (80042bc <CharacterInputThread+0xf1c>)
 80042a2:	4790      	blx	r2
	while (short_buf.tsize--){ 
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <CharacterInputThread+0xf18>)
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	1e51      	subs	r1, r2, #1
 80042aa:	6059      	str	r1, [r3, #4]
		cs += temp;
 80042ac:	fa5f fa8a 	uxtb.w	sl, sl
	while (short_buf.tsize--){ 
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <CharacterInputThread+0xf20>)
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d1e7      	bne.n	8004286 <CharacterInputThread+0xee6>
 80042b6:	e5ca      	b.n	8003e4e <CharacterInputThread+0xaae>
 80042b8:	20005eac 	.word	0x20005eac
 80042bc:	2000143c 	.word	0x2000143c
 80042c0:	40020000 	.word	0x40020000
	...

080042d0 <cmd_xhelp>:
      ccnt = 0;
    }
  }
}

void cmd_xhelp(BaseSequentialStream *chp, int argc, char *argv[]) {
 80042d0:	b538      	push	{r3, r4, r5, lr}
  (void)* argv;
  (void)argc;

  chprintf(chp, "#######################################\r\n", VMAJOR, VMINOR);
 80042d2:	4d1a      	ldr	r5, [pc, #104]	; (800433c <cmd_xhelp+0x6c>)
void cmd_xhelp(BaseSequentialStream *chp, int argc, char *argv[]) {
 80042d4:	4604      	mov	r4, r0
  chprintf(chp, "#######################################\r\n", VMAJOR, VMINOR);
 80042d6:	4629      	mov	r1, r5
 80042d8:	2300      	movs	r3, #0
 80042da:	221e      	movs	r2, #30
 80042dc:	f7fe fe08 	bl	8002ef0 <chprintf>
  chprintf(chp, "# Unicomp RAMROM v%i.%i Extended Help. #\r\n", VMAJOR, VMINOR);
 80042e0:	4917      	ldr	r1, [pc, #92]	; (8004340 <cmd_xhelp+0x70>)
 80042e2:	4620      	mov	r0, r4
 80042e4:	2300      	movs	r3, #0
 80042e6:	221e      	movs	r2, #30
 80042e8:	f7fe fe02 	bl	8002ef0 <chprintf>
  chprintf(chp, "#######################################\r\n", VMAJOR, VMINOR);
 80042ec:	2300      	movs	r3, #0
 80042ee:	221e      	movs	r2, #30
 80042f0:	4629      	mov	r1, r5
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7fe fdfc 	bl	8002ef0 <chprintf>
  chprintf(chp, "rb - Reads byte from address\r\n");
 80042f8:	4912      	ldr	r1, [pc, #72]	; (8004344 <cmd_xhelp+0x74>)
 80042fa:	4620      	mov	r0, r4
 80042fc:	f7fe fdf8 	bl	8002ef0 <chprintf>
  chprintf(chp, "wb - Writes byte to address\r\n");
 8004300:	4911      	ldr	r1, [pc, #68]	; (8004348 <cmd_xhelp+0x78>)
 8004302:	4620      	mov	r0, r4
 8004304:	f7fe fdf4 	bl	8002ef0 <chprintf>
  chprintf(chp, "fill - Fills block with bytes from address\r\n");
 8004308:	4910      	ldr	r1, [pc, #64]	; (800434c <cmd_xhelp+0x7c>)
 800430a:	4620      	mov	r0, r4
 800430c:	f7fe fdf0 	bl	8002ef0 <chprintf>
  chprintf(chp, "br - Prints block of bytes from address\r\n");
 8004310:	490f      	ldr	r1, [pc, #60]	; (8004350 <cmd_xhelp+0x80>)
 8004312:	4620      	mov	r0, r4
 8004314:	f7fe fdec 	bl	8002ef0 <chprintf>
  chprintf(chp, "freq - Changes Low Frequency TIC Output\r\n");
 8004318:	490e      	ldr	r1, [pc, #56]	; (8004354 <cmd_xhelp+0x84>)
 800431a:	4620      	mov	r0, r4
 800431c:	f7fe fde8 	bl	8002ef0 <chprintf>
  chprintf(chp, "dc - Changes Duty Cycle of Low Frequency TIC Output.\r\n");
 8004320:	490d      	ldr	r1, [pc, #52]	; (8004358 <cmd_xhelp+0x88>)
 8004322:	4620      	mov	r0, r4
 8004324:	f7fe fde4 	bl	8002ef0 <chprintf>
  chprintf(chp, "For more help just type the name of the command.\r\n");
 8004328:	490c      	ldr	r1, [pc, #48]	; (800435c <cmd_xhelp+0x8c>)
 800432a:	4620      	mov	r0, r4
 800432c:	f7fe fde0 	bl	8002ef0 <chprintf>
  chprintf(chp, "\r\n");
 8004330:	4620      	mov	r0, r4
 8004332:	490b      	ldr	r1, [pc, #44]	; (8004360 <cmd_xhelp+0x90>)
}
 8004334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "\r\n");
 8004338:	f7fe bdda 	b.w	8002ef0 <chprintf>
 800433c:	080084f8 	.word	0x080084f8
 8004340:	08008524 	.word	0x08008524
 8004344:	08008550 	.word	0x08008550
 8004348:	08008570 	.word	0x08008570
 800434c:	08008590 	.word	0x08008590
 8004350:	080085c0 	.word	0x080085c0
 8004354:	080085ec 	.word	0x080085ec
 8004358:	08008618 	.word	0x08008618
 800435c:	08008650 	.word	0x08008650
 8004360:	08008954 	.word	0x08008954
	...

08004370 <cmd_wc>:
void cmd_wc(BaseSequentialStream *chp, int argc, char *argv[]){
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	460d      	mov	r5, r1
  chprintf(chp, "Writes config data\r\n");
 8004374:	490a      	ldr	r1, [pc, #40]	; (80043a0 <cmd_wc+0x30>)
void cmd_wc(BaseSequentialStream *chp, int argc, char *argv[]){
 8004376:	4604      	mov	r4, r0
  chprintf(chp, "Writes config data\r\n");
 8004378:	f7fe fdba 	bl	8002ef0 <chprintf>
  if (argc < 2) {
 800437c:	2d01      	cmp	r5, #1
 800437e:	dd05      	ble.n	800438c <cmd_wc+0x1c>
  chprintf(chp, "Done.\r\n");
 8004380:	4620      	mov	r0, r4
 8004382:	4908      	ldr	r1, [pc, #32]	; (80043a4 <cmd_wc+0x34>)
}
 8004384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "Done.\r\n");
 8004388:	f7fe bdb2 	b.w	8002ef0 <chprintf>
    chprintf(chp, usage);
 800438c:	4906      	ldr	r1, [pc, #24]	; (80043a8 <cmd_wc+0x38>)
 800438e:	4620      	mov	r0, r4
 8004390:	f7fe fdae 	bl	8002ef0 <chprintf>
  chprintf(chp, "Done.\r\n");
 8004394:	4620      	mov	r0, r4
 8004396:	4903      	ldr	r1, [pc, #12]	; (80043a4 <cmd_wc+0x34>)
}
 8004398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "Done.\r\n");
 800439c:	f7fe bda8 	b.w	8002ef0 <chprintf>
 80043a0:	08008684 	.word	0x08008684
 80043a4:	080086a8 	.word	0x080086a8
 80043a8:	0800869c 	.word	0x0800869c
 80043ac:	00000000 	.word	0x00000000

080043b0 <cmd_change_pw4>:
  pwmChangePeriod(&PWMD3, freq);
  pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100));
}
void cmd_change_pw4(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc != 1) {
 80043b0:	2901      	cmp	r1, #1
void cmd_change_pw4(BaseSequentialStream *chp, int argc, char *argv[]) {
 80043b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b6:	4604      	mov	r4, r0
  if (argc != 1) {
 80043b8:	d012      	beq.n	80043e0 <cmd_change_pw4+0x30>
    chprintf(chp, "Changes Duty Cycle of Low Frequency TIC Output.\r\n");
 80043ba:	4921      	ldr	r1, [pc, #132]	; (8004440 <cmd_change_pw4+0x90>)
 80043bc:	f7fe fd98 	bl	8002ef0 <chprintf>
    chprintf(chp, "Duty Cycle is: %u%%\r\n", pw4);
 80043c0:	4b20      	ldr	r3, [pc, #128]	; (8004444 <cmd_change_pw4+0x94>)
 80043c2:	4921      	ldr	r1, [pc, #132]	; (8004448 <cmd_change_pw4+0x98>)
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7fe fd92 	bl	8002ef0 <chprintf>
    chprintf(chp, "Enter new Duty Cycle in %% (for 50%% enter 50)\r\n");
 80043cc:	491f      	ldr	r1, [pc, #124]	; (800444c <cmd_change_pw4+0x9c>)
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7fe fd8e 	bl	8002ef0 <chprintf>
    chprintf(chp, "(for example: 25%% is 3/4 low.\r\n");
 80043d4:	4620      	mov	r0, r4
 80043d6:	491e      	ldr	r1, [pc, #120]	; (8004450 <cmd_change_pw4+0xa0>)
    return;
  }
  pw4 = atoi(argv[0]);
  chprintf(chp, "New duty Cycle is: %u or %u%%\r\n", PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100), pw4);
  pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100));
}
 80043d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    chprintf(chp, "(for example: 25%% is 3/4 low.\r\n");
 80043dc:	f7fe bd88 	b.w	8002ef0 <chprintf>
  pw4 = atoi(argv[0]);
 80043e0:	6810      	ldr	r0, [r2, #0]
  chprintf(chp, "New duty Cycle is: %u or %u%%\r\n", PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100), pw4);
 80043e2:	4e1c      	ldr	r6, [pc, #112]	; (8004454 <cmd_change_pw4+0xa4>)
 80043e4:	4f1c      	ldr	r7, [pc, #112]	; (8004458 <cmd_change_pw4+0xa8>)
  pw4 = atoi(argv[0]);
 80043e6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004444 <cmd_change_pw4+0x94>
 80043ea:	f003 fbdb 	bl	8007ba4 <atoi>
  chprintf(chp, "New duty Cycle is: %u or %u%%\r\n", PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100), pw4);
 80043ee:	68b2      	ldr	r2, [r6, #8]
  pw4 = atoi(argv[0]);
 80043f0:	f8a8 0000 	strh.w	r0, [r8]
  chprintf(chp, "New duty Cycle is: %u or %u%%\r\n", PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100), pw4);
 80043f4:	b283      	uxth	r3, r0
 80043f6:	fb02 f203 	mul.w	r2, r2, r3
 80043fa:	2564      	movs	r5, #100	; 0x64
 80043fc:	fb05 f202 	mul.w	r2, r5, r2
 8004400:	fba7 0202 	umull	r0, r2, r7, r2
 8004404:	4915      	ldr	r1, [pc, #84]	; (800445c <cmd_change_pw4+0xac>)
 8004406:	4620      	mov	r0, r4
 8004408:	0b52      	lsrs	r2, r2, #13
 800440a:	f7fe fd71 	bl	8002ef0 <chprintf>
  pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100));
 800440e:	f8b8 2000 	ldrh.w	r2, [r8]
 8004412:	68b3      	ldr	r3, [r6, #8]
 8004414:	fb03 f302 	mul.w	r3, r3, r2
 8004418:	fb05 f503 	mul.w	r5, r5, r3
 800441c:	fba7 3505 	umull	r3, r5, r7, r5
 8004420:	0b6d      	lsrs	r5, r5, #13
 8004422:	2320      	movs	r3, #32
 8004424:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8004428:	68f3      	ldr	r3, [r6, #12]
  pwmp->tim->CCR[channel] = width;
 800442a:	69b2      	ldr	r2, [r6, #24]
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	60f3      	str	r3, [r6, #12]
 8004432:	6355      	str	r5, [r2, #52]	; 0x34
 8004434:	2300      	movs	r3, #0
 8004436:	f383 8811 	msr	BASEPRI, r3
}
 800443a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800443e:	bf00      	nop
 8004440:	080086b0 	.word	0x080086b0
 8004444:	2000080c 	.word	0x2000080c
 8004448:	080086e4 	.word	0x080086e4
 800444c:	080086fc 	.word	0x080086fc
 8004450:	08008730 	.word	0x08008730
 8004454:	20000d0c 	.word	0x20000d0c
 8004458:	d1b71759 	.word	0xd1b71759
 800445c:	08008754 	.word	0x08008754

08004460 <cmd_change_freq>:
  if (argc != 1) {
 8004460:	2901      	cmp	r1, #1
void cmd_change_freq(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004462:	b538      	push	{r3, r4, r5, lr}
  if (argc != 1) {
 8004464:	d00f      	beq.n	8004486 <cmd_change_freq+0x26>
    chprintf(chp, "Changes Low Frequency TIC Output\r\n");
 8004466:	491c      	ldr	r1, [pc, #112]	; (80044d8 <cmd_change_freq+0x78>)
 8004468:	4604      	mov	r4, r0
 800446a:	f7fe fd41 	bl	8002ef0 <chprintf>
    chprintf(chp, "Period is: %u/10 ms\r\n", (uint16_t)(freq));
 800446e:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <cmd_change_freq+0x7c>)
 8004470:	491b      	ldr	r1, [pc, #108]	; (80044e0 <cmd_change_freq+0x80>)
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	4620      	mov	r0, r4
 8004476:	f7fe fd3b 	bl	8002ef0 <chprintf>
    chprintf(chp, "Enter new Period in ms*10 (for 1kHz enter 10)\r\n");
 800447a:	4620      	mov	r0, r4
 800447c:	4919      	ldr	r1, [pc, #100]	; (80044e4 <cmd_change_freq+0x84>)
}
 800447e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chprintf(chp, "Enter new Period in ms*10 (for 1kHz enter 10)\r\n");
 8004482:	f7fe bd35 	b.w	8002ef0 <chprintf>
  freq = atoi(argv[0]);
 8004486:	6810      	ldr	r0, [r2, #0]
 8004488:	f003 fb8c 	bl	8007ba4 <atoi>
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <cmd_change_freq+0x7c>)
 800448e:	2420      	movs	r4, #32
 8004490:	8018      	strh	r0, [r3, #0]
  pwmChangePeriod(&PWMD3, freq);
 8004492:	b280      	uxth	r0, r0
 8004494:	f384 8811 	msr	BASEPRI, r4
  pwmChangePeriodI(pwmp, period);
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <cmd_change_freq+0x88>)
 800449a:	6993      	ldr	r3, [r2, #24]
 800449c:	6090      	str	r0, [r2, #8]
 800449e:	3801      	subs	r0, #1
 80044a0:	62d8      	str	r0, [r3, #44]	; 0x2c
 80044a2:	2000      	movs	r0, #0
 80044a4:	f380 8811 	msr	BASEPRI, r0
  pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100));
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <cmd_change_freq+0x8c>)
 80044aa:	6891      	ldr	r1, [r2, #8]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	4d10      	ldr	r5, [pc, #64]	; (80044f0 <cmd_change_freq+0x90>)
 80044b0:	fb01 f103 	mul.w	r1, r1, r3
 80044b4:	2364      	movs	r3, #100	; 0x64
 80044b6:	fb03 f301 	mul.w	r3, r3, r1
 80044ba:	fba5 1303 	umull	r1, r3, r5, r3
 80044be:	0b5b      	lsrs	r3, r3, #13
 80044c0:	f384 8811 	msr	BASEPRI, r4
  pwmEnableChannelI(pwmp, channel, width);
 80044c4:	68d1      	ldr	r1, [r2, #12]
 80044c6:	6994      	ldr	r4, [r2, #24]
 80044c8:	f041 0101 	orr.w	r1, r1, #1
 80044cc:	60d1      	str	r1, [r2, #12]
 80044ce:	6363      	str	r3, [r4, #52]	; 0x34
 80044d0:	f380 8811 	msr	BASEPRI, r0
}
 80044d4:	bd38      	pop	{r3, r4, r5, pc}
 80044d6:	bf00      	nop
 80044d8:	08008774 	.word	0x08008774
 80044dc:	20000800 	.word	0x20000800
 80044e0:	08008798 	.word	0x08008798
 80044e4:	080087b0 	.word	0x080087b0
 80044e8:	20000d0c 	.word	0x20000d0c
 80044ec:	2000080c 	.word	0x2000080c
 80044f0:	d1b71759 	.word	0xd1b71759
	...

08004500 <cmd_fill>:
void cmd_fill(BaseSequentialStream *chp, int argc, char *argv[]){
 8004500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004504:	460e      	mov	r6, r1
 8004506:	b0c1      	sub	sp, #260	; 0x104
  chprintf(chp, "Fills block with bytes from address\r\n");
 8004508:	4938      	ldr	r1, [pc, #224]	; (80045ec <cmd_fill+0xec>)
void cmd_fill(BaseSequentialStream *chp, int argc, char *argv[]){
 800450a:	4614      	mov	r4, r2
 800450c:	4605      	mov	r5, r0
  chprintf(chp, "Fills block with bytes from address\r\n");
 800450e:	f7fe fcef 	bl	8002ef0 <chprintf>
  if (argc != 3) {
 8004512:	2e03      	cmp	r6, #3
 8004514:	d006      	beq.n	8004524 <cmd_fill+0x24>
    chprintf(chp, usage);
 8004516:	4936      	ldr	r1, [pc, #216]	; (80045f0 <cmd_fill+0xf0>)
 8004518:	4628      	mov	r0, r5
}
 800451a:	b041      	add	sp, #260	; 0x104
 800451c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  chprintf(chp, "OK.\r\n");
 8004520:	f7fe bce6 	b.w	8002ef0 <chprintf>
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8004524:	2200      	movs	r2, #0
 8004526:	4611      	mov	r1, r2
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	f003 fbc5 	bl	8007cb8 <strtol>
  address = (int32_t)strtol(argv[1], NULL, 0);
 800452e:	2200      	movs	r2, #0
 8004530:	4611      	mov	r1, r2
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8004532:	4607      	mov	r7, r0
  address = (int32_t)strtol(argv[1], NULL, 0);
 8004534:	6860      	ldr	r0, [r4, #4]
 8004536:	f003 fbbf 	bl	8007cb8 <strtol>
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 800453a:	2200      	movs	r2, #0
  address = (int32_t)strtol(argv[1], NULL, 0);
 800453c:	4606      	mov	r6, r0
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 800453e:	4611      	mov	r1, r2
 8004540:	68a0      	ldr	r0, [r4, #8]
 8004542:	f003 fbb9 	bl	8007cb8 <strtol>
  if (lcnt > 256){
 8004546:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 800454a:	4604      	mov	r4, r0
  if (lcnt > 256){
 800454c:	dc47      	bgt.n	80045de <cmd_fill+0xde>
  chprintf(chp, "Starting at: %8x blocksize: %8x \r\n", address, lcnt);
 800454e:	4929      	ldr	r1, [pc, #164]	; (80045f4 <cmd_fill+0xf4>)
 8004550:	463b      	mov	r3, r7
 8004552:	4632      	mov	r2, r6
 8004554:	4628      	mov	r0, r5
 8004556:	f7fe fccb 	bl	8002ef0 <chprintf>
  for (acnt = 0; acnt < lcnt; acnt ++){
 800455a:	2f00      	cmp	r7, #0
 800455c:	46e9      	mov	r9, sp
 800455e:	dd07      	ble.n	8004570 <cmd_fill+0x70>
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 8004560:	b2e0      	uxtb	r0, r4
 8004562:	464a      	mov	r2, r9
 8004564:	eb09 0307 	add.w	r3, r9, r7
    data[acnt] = d;
 8004568:	f802 0b01 	strb.w	r0, [r2], #1
  for (acnt = 0; acnt < lcnt; acnt ++){
 800456c:	4293      	cmp	r3, r2
 800456e:	d1fb      	bne.n	8004568 <cmd_fill+0x68>
  CPC_HIGH; // Count up
 8004570:	4c21      	ldr	r4, [pc, #132]	; (80045f8 <cmd_fill+0xf8>)
  MRC_ACTIVE;  // Reset '590
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <cmd_fill+0xfc>)
  CPC_HIGH; // Count up
 8004574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  MRC_ACTIVE;  // Reset '590
 8004578:	2208      	movs	r2, #8
  CPC_HIGH; // Count up
 800457a:	8321      	strh	r1, [r4, #24]
  MRC_ACTIVE;  // Reset '590
 800457c:	835a      	strh	r2, [r3, #26]
  __NOP();
 800457e:	bf00      	nop
  MRC_INACTIVE;
 8004580:	831a      	strh	r2, [r3, #24]
  CPC_LOW;  // Latch into Output Register
 8004582:	8361      	strh	r1, [r4, #26]
  __NOP();
 8004584:	bf00      	nop
  for (i=0; i<address; i++){
 8004586:	2e00      	cmp	r6, #0
 8004588:	dd07      	ble.n	800459a <cmd_fill+0x9a>
 800458a:	2200      	movs	r2, #0
  CPC_HIGH; // Count up
 800458c:	8321      	strh	r1, [r4, #24]
  __NOP();
 800458e:	bf00      	nop
  CPC_LOW;  // Latch into Output Register
 8004590:	8361      	strh	r1, [r4, #26]
  __NOP();
 8004592:	bf00      	nop
  for (i=0; i<address; i++){
 8004594:	3201      	adds	r2, #1
 8004596:	4296      	cmp	r6, r2
 8004598:	d1f8      	bne.n	800458c <cmd_fill+0x8c>
  check_BUS();
 800459a:	f7fc fbc9 	bl	8000d30 <check_BUS>
  write_byte(*data++);
 800459e:	f899 0000 	ldrb.w	r0, [r9]
 80045a2:	f7fe f985 	bl	80028b0 <write_byte>
  while(l--){
 80045a6:	2f01      	cmp	r7, #1
 80045a8:	d012      	beq.n	80045d0 <cmd_fill+0xd0>
  CPC_HIGH; // Count up
 80045aa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80045f8 <cmd_fill+0xf8>
 80045ae:	444f      	add	r7, r9
  write_byte(*data++);
 80045b0:	f10d 0401 	add.w	r4, sp, #1
  CPC_HIGH; // Count up
 80045b4:	f248 0600 	movw	r6, #32768	; 0x8000
 80045b8:	f8a8 6018 	strh.w	r6, [r8, #24]
  __NOP();
 80045bc:	bf00      	nop
  CPC_LOW;  // Latch into Output Register
 80045be:	f8a8 601a 	strh.w	r6, [r8, #26]
  __NOP();
 80045c2:	bf00      	nop
    write_byte(*data++);
 80045c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80045c8:	f7fe f972 	bl	80028b0 <write_byte>
  while(l--){
 80045cc:	42bc      	cmp	r4, r7
 80045ce:	d1f3      	bne.n	80045b8 <cmd_fill+0xb8>
  chprintf(chp, "OK.\r\n");
 80045d0:	490b      	ldr	r1, [pc, #44]	; (8004600 <cmd_fill+0x100>)
 80045d2:	4628      	mov	r0, r5
}
 80045d4:	b041      	add	sp, #260	; 0x104
 80045d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  chprintf(chp, "OK.\r\n");
 80045da:	f7fe bc89 	b.w	8002ef0 <chprintf>
    chprintf(chp, "Only 256 bytes for now\r\n");
 80045de:	4909      	ldr	r1, [pc, #36]	; (8004604 <cmd_fill+0x104>)
 80045e0:	4628      	mov	r0, r5
}
 80045e2:	b041      	add	sp, #260	; 0x104
 80045e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  chprintf(chp, "OK.\r\n");
 80045e8:	f7fe bc82 	b.w	8002ef0 <chprintf>
 80045ec:	080087e0 	.word	0x080087e0
 80045f0:	08008808 	.word	0x08008808
 80045f4:	08008848 	.word	0x08008848
 80045f8:	40020000 	.word	0x40020000
 80045fc:	40020400 	.word	0x40020400
 8004600:	0800886c 	.word	0x0800886c
 8004604:	0800882c 	.word	0x0800882c
	...

08004610 <cmd_wb>:
void cmd_wb(BaseSequentialStream *chp, int argc, char *argv[]){
 8004610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004614:	460e      	mov	r6, r1
  chprintf(chp, "Writes byte to address\r\n");
 8004616:	491d      	ldr	r1, [pc, #116]	; (800468c <cmd_wb+0x7c>)
void cmd_wb(BaseSequentialStream *chp, int argc, char *argv[]){
 8004618:	4614      	mov	r4, r2
 800461a:	4605      	mov	r5, r0
  chprintf(chp, "Writes byte to address\r\n");
 800461c:	f7fe fc68 	bl	8002ef0 <chprintf>
  if (argc != 2) {
 8004620:	2e02      	cmp	r6, #2
 8004622:	d005      	beq.n	8004630 <cmd_wb+0x20>
    chprintf(chp, usage);
 8004624:	4628      	mov	r0, r5
 8004626:	491a      	ldr	r1, [pc, #104]	; (8004690 <cmd_wb+0x80>)
}
 8004628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    chprintf(chp, usage);
 800462c:	f7fe bc60 	b.w	8002ef0 <chprintf>
  address = (int32_t)strtol(argv[0], NULL, 0);
 8004630:	2200      	movs	r2, #0
 8004632:	4611      	mov	r1, r2
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	f003 fb3f 	bl	8007cb8 <strtol>
  data = (uint8_t)strtol(argv[1], NULL, 0);
 800463a:	2200      	movs	r2, #0
 800463c:	4611      	mov	r1, r2
  address = (int32_t)strtol(argv[0], NULL, 0);
 800463e:	4606      	mov	r6, r0
  data = (uint8_t)strtol(argv[1], NULL, 0);
 8004640:	6860      	ldr	r0, [r4, #4]
  CPC_HIGH; // Count up
 8004642:	4c14      	ldr	r4, [pc, #80]	; (8004694 <cmd_wb+0x84>)
 8004644:	f003 fb38 	bl	8007cb8 <strtol>
  MRC_ACTIVE;  // Reset '590
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <cmd_wb+0x88>)
  CPC_HIGH; // Count up
 800464a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  MRC_ACTIVE;  // Reset '590
 800464e:	2208      	movs	r2, #8
  CPC_HIGH; // Count up
 8004650:	8321      	strh	r1, [r4, #24]
 8004652:	b2c7      	uxtb	r7, r0
  MRC_ACTIVE;  // Reset '590
 8004654:	835a      	strh	r2, [r3, #26]
  __NOP();
 8004656:	bf00      	nop
  MRC_INACTIVE;
 8004658:	831a      	strh	r2, [r3, #24]
  CPC_LOW;  // Latch into Output Register
 800465a:	8361      	strh	r1, [r4, #26]
  __NOP();
 800465c:	bf00      	nop
  for (i=0; i<address; i++){
 800465e:	2e00      	cmp	r6, #0
 8004660:	dd07      	ble.n	8004672 <cmd_wb+0x62>
 8004662:	2300      	movs	r3, #0
  CPC_HIGH; // Count up
 8004664:	8321      	strh	r1, [r4, #24]
  __NOP();
 8004666:	bf00      	nop
  CPC_LOW;  // Latch into Output Register
 8004668:	8361      	strh	r1, [r4, #26]
  __NOP();
 800466a:	bf00      	nop
  for (i=0; i<address; i++){
 800466c:	3301      	adds	r3, #1
 800466e:	429e      	cmp	r6, r3
 8004670:	d1f8      	bne.n	8004664 <cmd_wb+0x54>
  check_BUS();
 8004672:	f7fc fb5d 	bl	8000d30 <check_BUS>
  write_byte(data);
 8004676:	4638      	mov	r0, r7
 8004678:	f7fe f91a 	bl	80028b0 <write_byte>
  chprintf(chp, "Data: %02x @ address %08x\r\n", data, address);
 800467c:	4633      	mov	r3, r6
 800467e:	463a      	mov	r2, r7
 8004680:	4628      	mov	r0, r5
 8004682:	4906      	ldr	r1, [pc, #24]	; (800469c <cmd_wb+0x8c>)
}
 8004684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chprintf(chp, "Data: %02x @ address %08x\r\n", data, address);
 8004688:	f7fe bc32 	b.w	8002ef0 <chprintf>
 800468c:	08008874 	.word	0x08008874
 8004690:	08008890 	.word	0x08008890
 8004694:	40020000 	.word	0x40020000
 8004698:	40020400 	.word	0x40020400
 800469c:	080088ac 	.word	0x080088ac

080046a0 <cmd_rb>:
void cmd_rb(BaseSequentialStream *chp, int argc, char *argv[]){
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	460d      	mov	r5, r1
  chprintf(chp, "Reads byte from address\r\n");
 80046a4:	490e      	ldr	r1, [pc, #56]	; (80046e0 <cmd_rb+0x40>)
void cmd_rb(BaseSequentialStream *chp, int argc, char *argv[]){
 80046a6:	4616      	mov	r6, r2
 80046a8:	4604      	mov	r4, r0
  chprintf(chp, "Reads byte from address\r\n");
 80046aa:	f7fe fc21 	bl	8002ef0 <chprintf>
  if (argc != 1) {
 80046ae:	2d01      	cmp	r5, #1
 80046b0:	d005      	beq.n	80046be <cmd_rb+0x1e>
    chprintf(chp, usage);
 80046b2:	4620      	mov	r0, r4
 80046b4:	490b      	ldr	r1, [pc, #44]	; (80046e4 <cmd_rb+0x44>)
}
 80046b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chprintf(chp, usage);
 80046ba:	f7fe bc19 	b.w	8002ef0 <chprintf>
  address = (int32_t)strtol(argv[0], NULL, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	4611      	mov	r1, r2
 80046c2:	6830      	ldr	r0, [r6, #0]
 80046c4:	f003 faf8 	bl	8007cb8 <strtol>
 80046c8:	4605      	mov	r5, r0
  data=read_single_byte(address, 0);
 80046ca:	f7fe f8d1 	bl	8002870 <read_single_byte.constprop.0>
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 80046ce:	462a      	mov	r2, r5
  data=read_single_byte(address, 0);
 80046d0:	4603      	mov	r3, r0
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 80046d2:	4905      	ldr	r1, [pc, #20]	; (80046e8 <cmd_rb+0x48>)
 80046d4:	4620      	mov	r0, r4
}
 80046d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 80046da:	f7fe bc09 	b.w	8002ef0 <chprintf>
 80046de:	bf00      	nop
 80046e0:	080088c8 	.word	0x080088c8
 80046e4:	080088e4 	.word	0x080088e4
 80046e8:	080088fc 	.word	0x080088fc
 80046ec:	00000000 	.word	0x00000000

080046f0 <cmd_spi>:
  if (argc != 1) {
 80046f0:	2901      	cmp	r1, #1
 80046f2:	d002      	beq.n	80046fa <cmd_spi+0xa>
    chprintf(chp, usage);
 80046f4:	4908      	ldr	r1, [pc, #32]	; (8004718 <cmd_spi+0x28>)
 80046f6:	f7fe bbfb 	b.w	8002ef0 <chprintf>
 80046fa:	4613      	mov	r3, r2
void cmd_spi(BaseSequentialStream *chp, int argc, char *argv[]){
 80046fc:	b510      	push	{r4, lr}
  val = (int32_t)strtol(argv[0], NULL, 0);
 80046fe:	2200      	movs	r2, #0
 8004700:	4604      	mov	r4, r0
 8004702:	4611      	mov	r1, r2
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f003 fad7 	bl	8007cb8 <strtol>
  chprintf(chp, "You entered: %08x \r\n", val);
 800470a:	4904      	ldr	r1, [pc, #16]	; (800471c <cmd_spi+0x2c>)
  val = (int32_t)strtol(argv[0], NULL, 0);
 800470c:	4602      	mov	r2, r0
  chprintf(chp, "You entered: %08x \r\n", val);
 800470e:	4620      	mov	r0, r4
}
 8004710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chprintf(chp, "You entered: %08x \r\n", val);
 8004714:	f7fe bbec 	b.w	8002ef0 <chprintf>
 8004718:	08008914 	.word	0x08008914
 800471c:	08008928 	.word	0x08008928

08004720 <cmd_test>:
void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004720:	b510      	push	{r4, lr}
  chprintf(chp, "Enter Number (<256) \r\n");
 8004722:	4911      	ldr	r1, [pc, #68]	; (8004768 <cmd_test+0x48>)
void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004724:	b084      	sub	sp, #16
 8004726:	4604      	mov	r4, r0
  chprintf(chp, "Enter Number (<256) \r\n");
 8004728:	f7fe fbe2 	bl	8002ef0 <chprintf>
  if (chscanf((BaseBufferedStream *)chp, "%10s", &text) != 1){
 800472c:	490f      	ldr	r1, [pc, #60]	; (800476c <cmd_test+0x4c>)
 800472e:	4620      	mov	r0, r4
 8004730:	aa01      	add	r2, sp, #4
 8004732:	f7fe f91d 	bl	8002970 <chscanf.constprop.0>
 8004736:	2801      	cmp	r0, #1
 8004738:	d005      	beq.n	8004746 <cmd_test+0x26>
    chprintf(chp, "Something went wrong\r\n");
 800473a:	490d      	ldr	r1, [pc, #52]	; (8004770 <cmd_test+0x50>)
 800473c:	4620      	mov	r0, r4
 800473e:	f7fe fbd7 	bl	8002ef0 <chprintf>
}
 8004742:	b004      	add	sp, #16
 8004744:	bd10      	pop	{r4, pc}
  val = (uint16_t)strtol(text, NULL, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	4611      	mov	r1, r2
 800474a:	a801      	add	r0, sp, #4
 800474c:	f003 fab4 	bl	8007cb8 <strtol>
  chprintf(chp, "You entered text: %s Val: %04x got: %02x\r\n",
 8004750:	aa01      	add	r2, sp, #4
 8004752:	b283      	uxth	r3, r0
 8004754:	4907      	ldr	r1, [pc, #28]	; (8004774 <cmd_test+0x54>)
 8004756:	4620      	mov	r0, r4
 8004758:	f7fe fbca 	bl	8002ef0 <chprintf>
  chprintf(ost, "OK\r\n");
 800475c:	4906      	ldr	r1, [pc, #24]	; (8004778 <cmd_test+0x58>)
 800475e:	4807      	ldr	r0, [pc, #28]	; (800477c <cmd_test+0x5c>)
 8004760:	f7fe fbc6 	bl	8002ef0 <chprintf>
}
 8004764:	b004      	add	sp, #16
 8004766:	bd10      	pop	{r4, pc}
 8004768:	08008940 	.word	0x08008940
 800476c:	08008354 	.word	0x08008354
 8004770:	08008958 	.word	0x08008958
 8004774:	08008970 	.word	0x08008970
 8004778:	0800899c 	.word	0x0800899c
 800477c:	2000143c 	.word	0x2000143c

08004780 <cmd_br>:
void cmd_br(BaseSequentialStream *chp, int argc, char *argv[]){
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004784:	460e      	mov	r6, r1
 8004786:	b0c5      	sub	sp, #276	; 0x114
  chprintf(chp, "Prints block of bytes from address\r\n");
 8004788:	495f      	ldr	r1, [pc, #380]	; (8004908 <cmd_br+0x188>)
void cmd_br(BaseSequentialStream *chp, int argc, char *argv[]){
 800478a:	4615      	mov	r5, r2
 800478c:	4604      	mov	r4, r0
  chprintf(chp, "Prints block of bytes from address\r\n");
 800478e:	f7fe fbaf 	bl	8002ef0 <chprintf>
  if (argc != 2) {
 8004792:	2e02      	cmp	r6, #2
 8004794:	d006      	beq.n	80047a4 <cmd_br+0x24>
    chprintf(chp, usage);
 8004796:	495d      	ldr	r1, [pc, #372]	; (800490c <cmd_br+0x18c>)
 8004798:	4620      	mov	r0, r4
}
 800479a:	b045      	add	sp, #276	; 0x114
 800479c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    chprintf(chp, "Only 256 bytes for now\r\n");
 80047a0:	f7fe bba6 	b.w	8002ef0 <chprintf>
  memset(data,0,256);
 80047a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047a8:	2100      	movs	r1, #0
 80047aa:	a804      	add	r0, sp, #16
 80047ac:	f003 fa90 	bl	8007cd0 <memset>
  address = (int32_t)strtol(argv[1], NULL, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	4611      	mov	r1, r2
 80047b4:	6868      	ldr	r0, [r5, #4]
 80047b6:	f003 fa7f 	bl	8007cb8 <strtol>
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 80047ba:	2200      	movs	r2, #0
  address = (int32_t)strtol(argv[1], NULL, 0);
 80047bc:	4681      	mov	r9, r0
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 80047be:	4611      	mov	r1, r2
 80047c0:	6828      	ldr	r0, [r5, #0]
 80047c2:	f003 fa79 	bl	8007cb8 <strtol>
  if (lcnt > 256){
 80047c6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 80047ca:	4605      	mov	r5, r0
  if (lcnt > 256){
 80047cc:	f300 8095 	bgt.w	80048fa <cmd_br+0x17a>
  chprintf(chp, "Starting at: %08x\r\n", address);
 80047d0:	464a      	mov	r2, r9
 80047d2:	494f      	ldr	r1, [pc, #316]	; (8004910 <cmd_br+0x190>)
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7fe fb8b 	bl	8002ef0 <chprintf>
  CPC_HIGH; // Count up
 80047da:	494e      	ldr	r1, [pc, #312]	; (8004914 <cmd_br+0x194>)
  MRC_ACTIVE;  // Reset '590
 80047dc:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <cmd_br+0x198>)
  CPC_HIGH; // Count up
 80047de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  MRC_ACTIVE;  // Reset '590
 80047e2:	2008      	movs	r0, #8
  CPC_HIGH; // Count up
 80047e4:	830a      	strh	r2, [r1, #24]
  MRC_ACTIVE;  // Reset '590
 80047e6:	8358      	strh	r0, [r3, #26]
  __NOP();
 80047e8:	bf00      	nop
  MRC_INACTIVE;
 80047ea:	8318      	strh	r0, [r3, #24]
  CPC_LOW;  // Latch into Output Register
 80047ec:	834a      	strh	r2, [r1, #26]
  __NOP();
 80047ee:	bf00      	nop
  for (i=0; i<address; i++){
 80047f0:	f1b9 0f00 	cmp.w	r9, #0
 80047f4:	dd07      	ble.n	8004806 <cmd_br+0x86>
 80047f6:	2300      	movs	r3, #0
  CPC_HIGH; // Count up
 80047f8:	830a      	strh	r2, [r1, #24]
  __NOP();
 80047fa:	bf00      	nop
  CPC_LOW;  // Latch into Output Register
 80047fc:	834a      	strh	r2, [r1, #26]
  __NOP();
 80047fe:	bf00      	nop
  for (i=0; i<address; i++){
 8004800:	3301      	adds	r3, #1
 8004802:	4599      	cmp	r9, r3
 8004804:	d1f8      	bne.n	80047f8 <cmd_br+0x78>
  check_BUS();
 8004806:	f7fc fa93 	bl	8000d30 <check_BUS>
  while(l--){
 800480a:	2d00      	cmp	r5, #0
 800480c:	d072      	beq.n	80048f4 <cmd_br+0x174>
 800480e:	ab04      	add	r3, sp, #16
  CPC_HIGH; // Count up
 8004810:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8004914 <cmd_br+0x194>
 8004814:	eb03 0a05 	add.w	sl, r3, r5
  while(l--){
 8004818:	461e      	mov	r6, r3
  CPC_HIGH; // Count up
 800481a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    *data++ = read_byte();
 800481e:	f7fd ffbf 	bl	80027a0 <read_byte>
 8004822:	f806 0b01 	strb.w	r0, [r6], #1
  CPC_HIGH; // Count up
 8004826:	f8a8 7018 	strh.w	r7, [r8, #24]
  __NOP();
 800482a:	bf00      	nop
  CPC_LOW;  // Latch into Output Register
 800482c:	f8a8 701a 	strh.w	r7, [r8, #26]
  __NOP();
 8004830:	bf00      	nop
  while(l--){
 8004832:	4556      	cmp	r6, sl
 8004834:	d1f3      	bne.n	800481e <cmd_br+0x9e>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8004836:	2d00      	cmp	r5, #0
 8004838:	dd5c      	ble.n	80048f4 <cmd_br+0x174>
    d=data[acnt];
 800483a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    chprintf(chp, "%02x, ", d);
 800483e:	4937      	ldr	r1, [pc, #220]	; (800491c <cmd_br+0x19c>)
    ascii[i++] = d;
 8004840:	f88d 2008 	strb.w	r2, [sp, #8]
    chprintf(chp, "%02x, ", d);
 8004844:	4620      	mov	r0, r4
 8004846:	f10d 070f 	add.w	r7, sp, #15
 800484a:	f7fe fb51 	bl	8002ef0 <chprintf>
    ccnt++;
 800484e:	2601      	movs	r6, #1
 8004850:	197b      	adds	r3, r7, r5
        else chprintf(chp, " ");
 8004852:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800492c <cmd_br+0x1ac>
          chprintf(chp, "%c", ascii[j]);
 8004856:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004930 <cmd_br+0x1b0>
 800485a:	9301      	str	r3, [sp, #4]
    ascii[i++] = d;
 800485c:	46b3      	mov	fp, r6
    chprintf(chp, "%02x, ", d);
 800485e:	ad04      	add	r5, sp, #16
    if (ccnt % 32 == 0){
 8004860:	06f3      	lsls	r3, r6, #27
 8004862:	d015      	beq.n	8004890 <cmd_br+0x110>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8004864:	9b01      	ldr	r3, [sp, #4]
 8004866:	429d      	cmp	r5, r3
 8004868:	d044      	beq.n	80048f4 <cmd_br+0x174>
    ascii[i++] = d;
 800486a:	ab02      	add	r3, sp, #8
    d=data[acnt];
 800486c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    chprintf(chp, "%02x, ", d);
 8004870:	492a      	ldr	r1, [pc, #168]	; (800491c <cmd_br+0x19c>)
    ascii[i++] = d;
 8004872:	f803 200b 	strb.w	r2, [r3, fp]
    chprintf(chp, "%02x, ", d);
 8004876:	4620      	mov	r0, r4
 8004878:	f7fe fb3a 	bl	8002ef0 <chprintf>
    ccnt++;
 800487c:	1c73      	adds	r3, r6, #1
    if (ccnt % 8 == 0){
 800487e:	075a      	lsls	r2, r3, #29
    ccnt++;
 8004880:	b2de      	uxtb	r6, r3
    if (ccnt % 8 == 0){
 8004882:	d01c      	beq.n	80048be <cmd_br+0x13e>
    ascii[i++] = d;
 8004884:	f10b 0b01 	add.w	fp, fp, #1
    if (ccnt % 32 == 0){
 8004888:	06f3      	lsls	r3, r6, #27
    ascii[i++] = d;
 800488a:	fa5f fb8b 	uxtb.w	fp, fp
    if (ccnt % 32 == 0){
 800488e:	d1e9      	bne.n	8004864 <cmd_br+0xe4>
      chprintf(chp, "Address now: %08x\r\n", address+acnt+1);
 8004890:	ab04      	add	r3, sp, #16
 8004892:	f1c3 0201 	rsb	r2, r3, #1
 8004896:	444a      	add	r2, r9
 8004898:	4921      	ldr	r1, [pc, #132]	; (8004920 <cmd_br+0x1a0>)
 800489a:	442a      	add	r2, r5
 800489c:	4620      	mov	r0, r4
 800489e:	f7fe fb27 	bl	8002ef0 <chprintf>
  for (acnt = 0; acnt < lcnt; acnt ++){
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	429d      	cmp	r5, r3
 80048a6:	d025      	beq.n	80048f4 <cmd_br+0x174>
    ascii[i++] = d;
 80048a8:	ab02      	add	r3, sp, #8
    d=data[acnt];
 80048aa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    chprintf(chp, "%02x, ", d);
 80048ae:	491b      	ldr	r1, [pc, #108]	; (800491c <cmd_br+0x19c>)
    ascii[i++] = d;
 80048b0:	f803 200b 	strb.w	r2, [r3, fp]
    chprintf(chp, "%02x, ", d);
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7fe fb1b 	bl	8002ef0 <chprintf>
    ccnt++;
 80048ba:	2601      	movs	r6, #1
 80048bc:	e7e2      	b.n	8004884 <cmd_br+0x104>
 80048be:	f10d 0b07 	add.w	fp, sp, #7
 80048c2:	e003      	b.n	80048cc <cmd_br+0x14c>
          chprintf(chp, "%c", ascii[j]);
 80048c4:	f7fe fb14 	bl	8002ef0 <chprintf>
      for (j = 0; j<8; j++){
 80048c8:	45bb      	cmp	fp, r7
 80048ca:	d00c      	beq.n	80048e6 <cmd_br+0x166>
        if ((ascii[j] > 0x1F) && (ascii[j] < 0x80)){
 80048cc:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 80048d0:	f1a2 0320 	sub.w	r3, r2, #32
 80048d4:	2b5f      	cmp	r3, #95	; 0x5f
          chprintf(chp, "%c", ascii[j]);
 80048d6:	4641      	mov	r1, r8
 80048d8:	4620      	mov	r0, r4
        if ((ascii[j] > 0x1F) && (ascii[j] < 0x80)){
 80048da:	d9f3      	bls.n	80048c4 <cmd_br+0x144>
        else chprintf(chp, " ");
 80048dc:	4651      	mov	r1, sl
 80048de:	f7fe fb07 	bl	8002ef0 <chprintf>
      for (j = 0; j<8; j++){
 80048e2:	45bb      	cmp	fp, r7
 80048e4:	d1f2      	bne.n	80048cc <cmd_br+0x14c>
      chprintf(chp, "\r\n");
 80048e6:	490f      	ldr	r1, [pc, #60]	; (8004924 <cmd_br+0x1a4>)
 80048e8:	4620      	mov	r0, r4
 80048ea:	f7fe fb01 	bl	8002ef0 <chprintf>
      i = 0;
 80048ee:	f04f 0b00 	mov.w	fp, #0
 80048f2:	e7b5      	b.n	8004860 <cmd_br+0xe0>
}
 80048f4:	b045      	add	sp, #276	; 0x114
 80048f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    chprintf(chp, "Only 256 bytes for now\r\n");
 80048fa:	490b      	ldr	r1, [pc, #44]	; (8004928 <cmd_br+0x1a8>)
 80048fc:	4620      	mov	r0, r4
}
 80048fe:	b045      	add	sp, #276	; 0x114
 8004900:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    chprintf(chp, "Only 256 bytes for now\r\n");
 8004904:	f7fe baf4 	b.w	8002ef0 <chprintf>
 8004908:	080089a4 	.word	0x080089a4
 800490c:	080089cc 	.word	0x080089cc
 8004910:	080089e8 	.word	0x080089e8
 8004914:	40020000 	.word	0x40020000
 8004918:	40020400 	.word	0x40020400
 800491c:	080089fc 	.word	0x080089fc
 8004920:	08008a08 	.word	0x08008a08
 8004924:	08008954 	.word	0x08008954
 8004928:	0800882c 	.word	0x0800882c
 800492c:	0800846c 	.word	0x0800846c
 8004930:	08008a04 	.word	0x08008a04
	...

08004940 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 8004940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (epcp->in_state != NULL) {
 8004944:	6953      	ldr	r3, [r2, #20]
 8004946:	eb00 0781 	add.w	r7, r0, r1, lsl #2
                      const USBEndpointConfig *epcp) {
 800494a:	460c      	mov	r4, r1
  usbp->epc[ep] = epcp;
 800494c:	60fa      	str	r2, [r7, #12]
  if (epcp->in_state != NULL) {
 800494e:	fa0f f881 	sxth.w	r8, r1
 8004952:	b123      	cbz	r3, 800495e <usbInitEndpointI+0x1e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8004954:	2100      	movs	r1, #0
 8004956:	6019      	str	r1, [r3, #0]
 8004958:	6059      	str	r1, [r3, #4]
 800495a:	6099      	str	r1, [r3, #8]
 800495c:	60d9      	str	r1, [r3, #12]
  if (epcp->out_state != NULL) {
 800495e:	6993      	ldr	r3, [r2, #24]
 8004960:	b123      	cbz	r3, 800496c <usbInitEndpointI+0x2c>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800496c:	68fb      	ldr	r3, [r7, #12]
  stm32_otg_t *otgp = usbp->otg;
 800496e:	6d45      	ldr	r5, [r0, #84]	; 0x54
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8004970:	681e      	ldr	r6, [r3, #0]
  if (usbp->epc[ep]->out_state != NULL) {
 8004972:	f8d3 c018 	ldr.w	ip, [r3, #24]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8004976:	f006 0603 	and.w	r6, r6, #3
 800497a:	1e72      	subs	r2, r6, #1
 800497c:	2a02      	cmp	r2, #2
 800497e:	bf98      	it	ls
 8004980:	04b6      	lslls	r6, r6, #18
  otgp->oe[ep].DOEPTSIZ = 0;
 8004982:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	bf98      	it	ls
 800498c:	f106 5680 	addls.w	r6, r6, #268435456	; 0x10000000
 8004990:	f8c2 1b10 	str.w	r1, [r2, #2832]	; 0xb10
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8004994:	bf8c      	ite	hi
 8004996:	4e45      	ldrhi	r6, [pc, #276]	; (8004aac <usbInitEndpointI+0x16c>)
 8004998:	f506 4600 	addls.w	r6, r6, #32768	; 0x8000
  otgp->oe[ep].DOEPTSIZ = 0;
 800499c:	0161      	lsls	r1, r4, #5
  if (usbp->epc[ep]->out_state != NULL) {
 800499e:	f1bc 0f00 	cmp.w	ip, #0
 80049a2:	d04b      	beq.n	8004a3c <usbInitEndpointI+0xfc>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 80049a4:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80049a8:	f104 0258 	add.w	r2, r4, #88	; 0x58
 80049ac:	0152      	lsls	r2, r2, #5
 80049ae:	ea4c 0c06 	orr.w	ip, ip, r6
 80049b2:	f845 c002 	str.w	ip, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 80049b6:	f104 0e10 	add.w	lr, r4, #16
 80049ba:	f8d5 c81c 	ldr.w	ip, [r5, #2076]	; 0x81c
 80049be:	2201      	movs	r2, #1
 80049c0:	fa02 f20e 	lsl.w	r2, r2, lr
 80049c4:	ea42 020c 	orr.w	r2, r2, ip
 80049c8:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 80049cc:	186a      	adds	r2, r5, r1
  if (usbp->epc[ep]->in_state != NULL) {
 80049ce:	6959      	ldr	r1, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 80049d0:	f04f 0c00 	mov.w	ip, #0
 80049d4:	f8c2 c910 	str.w	ip, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 80049d8:	2900      	cmp	r1, #0
 80049da:	d044      	beq.n	8004a66 <usbInitEndpointI+0x126>
    if (usbp->epc[ep]->in_multiplier > 1)
 80049dc:	8b99      	ldrh	r1, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80049de:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 80049e0:	2901      	cmp	r1, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80049e2:	ea4f 0392 	mov.w	r3, r2, lsr #2
  next = usbp->pmnext;
 80049e6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 80049e8:	bf88      	it	hi
 80049ea:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 80049ec:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  usbp->pmnext += size;
 80049f0:	eb03 0c02 	add.w	ip, r3, r2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 80049f4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80049f8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80049fc:	01a2      	lsls	r2, r4, #6
 80049fe:	f042 0220 	orr.w	r2, r2, #32
  usbp->pmnext += size;
 8004a02:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004a06:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004a08:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8004a0a:	692b      	ldr	r3, [r5, #16]
 8004a0c:	069a      	lsls	r2, r3, #26
 8004a0e:	d4fc      	bmi.n	8004a0a <usbInitEndpointI+0xca>
  chSysPolledDelayX(cycles);
 8004a10:	2012      	movs	r0, #18
 8004a12:	f7fc fcb5 	bl	8001380 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8a1b      	ldrh	r3, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 8004a1a:	f104 0248 	add.w	r2, r4, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 8004a1e:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8004a22:	0152      	lsls	r2, r2, #5
                           DIEPCTL_TXFNUM(ep) |
 8004a24:	431e      	orrs	r6, r3
    otgp->ie[ep].DIEPCTL = ctl |
 8004a26:	50ae      	str	r6, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8004a28:	2101      	movs	r1, #1
 8004a2a:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 8004a2e:	fa01 f404 	lsl.w	r4, r1, r4
 8004a32:	431c      	orrs	r4, r3
 8004a34:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
}
 8004a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8004a3c:	eb05 1248 	add.w	r2, r5, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8004a40:	f104 0910 	add.w	r9, r4, #16
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8004a44:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8004a48:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 8004a4c:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8004a50:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8004a54:	f04f 0c01 	mov.w	ip, #1
 8004a58:	fa0c fc09 	lsl.w	ip, ip, r9
 8004a5c:	ea22 020c 	bic.w	r2, r2, ip
 8004a60:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 8004a64:	e7b2      	b.n	80049cc <usbInitEndpointI+0x8c>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8004a66:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 8004a6a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004a6e:	01a3      	lsls	r3, r4, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8004a70:	490f      	ldr	r1, [pc, #60]	; (8004ab0 <usbInitEndpointI+0x170>)
 8004a72:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004a74:	f043 0320 	orr.w	r3, r3, #32
 8004a78:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8004a7a:	692b      	ldr	r3, [r5, #16]
 8004a7c:	069b      	lsls	r3, r3, #26
 8004a7e:	d4fc      	bmi.n	8004a7a <usbInitEndpointI+0x13a>
 8004a80:	eb05 1848 	add.w	r8, r5, r8, lsl #5
 8004a84:	2012      	movs	r0, #18
 8004a86:	f7fc fc7b 	bl	8001380 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8004a8a:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8004a8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a92:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8004a96:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	fa01 f404 	lsl.w	r4, r1, r4
 8004aa0:	ea23 0404 	bic.w	r4, r3, r4
 8004aa4:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
 8004aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aac:	10008000 	.word	0x10008000
 8004ab0:	02000400 	.word	0x02000400
	...

08004ac0 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8004ac0:	b530      	push	{r4, r5, lr}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	2905      	cmp	r1, #5
 8004ac6:	d80f      	bhi.n	8004ae8 <usb_event+0x28>
 8004ac8:	e8df f001 	tbb	[pc, r1]
 8004acc:	10030e10 	.word	0x10030e10
 8004ad0:	2910      	.short	0x2910
 8004ad2:	2320      	movs	r3, #32
 8004ad4:	f383 8811 	msr	BASEPRI, r3
    if (usbp->state == USB_ACTIVE) {
 8004ad8:	7803      	ldrb	r3, [r0, #0]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d02f      	beq.n	8004b3e <usb_event+0x7e>
    else if (usbp->state == USB_SELECTED) {
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d059      	beq.n	8004b96 <usb_event+0xd6>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f383 8811 	msr	BASEPRI, r3
}
 8004ae8:	b003      	add	sp, #12
 8004aea:	bd30      	pop	{r4, r5, pc}
 8004aec:	2320      	movs	r3, #32
 8004aee:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8004af2:	4c2a      	ldr	r4, [pc, #168]	; (8004b9c <usb_event+0xdc>)
 8004af4:	7d23      	ldrb	r3, [r4, #20]
 8004af6:	b11b      	cbz	r3, 8004b00 <usb_event+0x40>
 8004af8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <usb_event+0x22>
  chEvtBroadcastFlagsI(esp, flags);
 8004b00:	2102      	movs	r1, #2
 8004b02:	4827      	ldr	r0, [pc, #156]	; (8004ba0 <usb_event+0xe0>)
 8004b04:	f7fc fb0c 	bl	8001120 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 8004b08:	2501      	movs	r5, #1
  chThdDequeueAllI(tqp, msg);
 8004b0a:	4826      	ldr	r0, [pc, #152]	; (8004ba4 <usb_event+0xe4>)
 8004b0c:	7525      	strb	r5, [r4, #20]
 8004b0e:	f7fc fadf 	bl	80010d0 <chThdDequeueAllI.constprop.0>
 8004b12:	4825      	ldr	r0, [pc, #148]	; (8004ba8 <usb_event+0xe8>)
  bqSuspendI(&sdup->obqueue);
 8004b14:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8004b18:	f7fc fada 	bl	80010d0 <chThdDequeueAllI.constprop.0>
 8004b1c:	e7e1      	b.n	8004ae2 <usb_event+0x22>
 8004b1e:	2320      	movs	r3, #32
 8004b20:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8004b24:	4c1d      	ldr	r4, [pc, #116]	; (8004b9c <usb_event+0xdc>)
 8004b26:	2101      	movs	r1, #1
 8004b28:	1d20      	adds	r0, r4, #4
 8004b2a:	f7fc faf9 	bl	8001120 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8004b32:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	b003      	add	sp, #12
 8004b3c:	bd30      	pop	{r4, r5, pc}
  ibqp->bcounter  = 0;
 8004b3e:	4c17      	ldr	r4, [pc, #92]	; (8004b9c <usb_event+0xdc>)
      usbInitEndpointI(usbp, USB_INTERRUPT_REQUEST_EP_A, &ep1config);
 8004b40:	4a1a      	ldr	r2, [pc, #104]	; (8004bac <usb_event+0xec>)
 8004b42:	9001      	str	r0, [sp, #4]
 8004b44:	2101      	movs	r1, #1
 8004b46:	f7ff fefb 	bl	8004940 <usbInitEndpointI>
      usbInitEndpointI(usbp, USB_DATA_REQUEST_EP_A, &ep2config);
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	9801      	ldr	r0, [sp, #4]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <usb_event+0xf0>)
 8004b50:	f7ff fef6 	bl	8004940 <usbInitEndpointI>
 8004b54:	2500      	movs	r5, #0
  ibqp->brdptr    = ibqp->buffers;
 8004b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b58:	6223      	str	r3, [r4, #32]
  chThdDequeueAllI(tqp, msg);
 8004b5a:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 8004b5e:	61e3      	str	r3, [r4, #28]
  ibqp->top       = NULL;
 8004b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 8004b64:	61a5      	str	r5, [r4, #24]
 8004b66:	f7fc fab3 	bl	80010d0 <chThdDequeueAllI.constprop.0>
  obqp->brdptr    = obqp->buffers;
 8004b6a:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8004b6e:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bwrptr    = obqp->buffers;
 8004b72:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->bcounter  = bqSizeX(obqp);
 8004b76:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->top       = NULL;
 8004b78:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  bqResumeX(&sdup->ibqueue);
 8004b7c:	7525      	strb	r5, [r4, #20]
 8004b7e:	f7fc faa7 	bl	80010d0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 8004b82:	1d20      	adds	r0, r4, #4
 8004b84:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 8004b86:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8004b8a:	f7fc fac9 	bl	8001120 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f7fd f8fe 	bl	8001d90 <sdu_start_receive>
 8004b94:	e7a5      	b.n	8004ae2 <usb_event+0x22>
      usbDisableEndpointsI(usbp);
 8004b96:	f7fd f8ab 	bl	8001cf0 <usbDisableEndpointsI>
 8004b9a:	e7a2      	b.n	8004ae2 <usb_event+0x22>
 8004b9c:	2000143c 	.word	0x2000143c
 8004ba0:	20001440 	.word	0x20001440
 8004ba4:	20001448 	.word	0x20001448
 8004ba8:	20001480 	.word	0x20001480
 8004bac:	08008c7c 	.word	0x08008c7c
 8004bb0:	08008ca0 	.word	0x08008ca0
	...

08004bc0 <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 8004bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 8004bc4:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
 8004bc8:	42b4      	cmp	r4, r6
static int get_history(ShellHistory *shp, char *line, int dir) {
 8004bca:	4607      	mov	r7, r0
 8004bcc:	4688      	mov	r8, r1
  while (idx != shp->sh_end) {
 8004bce:	d053      	beq.n	8004c78 <get_history+0xb8>
    idx += *(shp->sh_buffer + idx) + 1;
    if (idx >= shp->sh_size)
 8004bd0:	e9d0 c000 	ldrd	ip, r0, [r0]
 8004bd4:	4623      	mov	r3, r4
  int count=0;
 8004bd6:	2100      	movs	r1, #0
    idx += *(shp->sh_buffer + idx) + 1;
 8004bd8:	f81c 5003 	ldrb.w	r5, [ip, r3]
 8004bdc:	3501      	adds	r5, #1
 8004bde:	442b      	add	r3, r5
    if (idx >= shp->sh_size)
 8004be0:	4298      	cmp	r0, r3
      idx -= shp->sh_size;
 8004be2:	bfd8      	it	le
 8004be4:	1a1b      	suble	r3, r3, r0
  while (idx != shp->sh_end) {
 8004be6:	42b3      	cmp	r3, r6
    count++;
 8004be8:	f101 0101 	add.w	r1, r1, #1
  while (idx != shp->sh_end) {
 8004bec:	d1f4      	bne.n	8004bd8 <get_history+0x18>
  }

  if (dir == SHELL_HIST_DIR_FW) {
 8004bee:	2a01      	cmp	r2, #1
    if (shp->sh_cur > 0)
 8004bf0:	693d      	ldr	r5, [r7, #16]
  if (dir == SHELL_HIST_DIR_FW) {
 8004bf2:	d03c      	beq.n	8004c6e <get_history+0xae>
      shp->sh_cur -= 2;
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 8004bf4:	42a9      	cmp	r1, r5
 8004bf6:	db53      	blt.n	8004ca0 <get_history+0xe0>
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8004bf8:	42b4      	cmp	r4, r6
 8004bfa:	d054      	beq.n	8004ca6 <get_history+0xe6>
 8004bfc:	1e4b      	subs	r3, r1, #1
 8004bfe:	429d      	cmp	r5, r3
 8004c00:	d054      	beq.n	8004cac <get_history+0xec>
      idx += *(shp->sh_buffer + idx) + 1;
      if (idx >= shp->sh_size)
 8004c02:	e9d7 ec00 	ldrd	lr, ip, [r7]
    int i = 0;
 8004c06:	2000      	movs	r0, #0
 8004c08:	e001      	b.n	8004c0e <get_history+0x4e>
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8004c0a:	429d      	cmp	r5, r3
 8004c0c:	d017      	beq.n	8004c3e <get_history+0x7e>
      idx += *(shp->sh_buffer + idx) + 1;
 8004c0e:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8004c12:	3301      	adds	r3, #1
 8004c14:	441c      	add	r4, r3
      if (idx >= shp->sh_size)
 8004c16:	45a4      	cmp	ip, r4
        idx -= shp->sh_size;
      i++;
 8004c18:	f100 0001 	add.w	r0, r0, #1
        idx -= shp->sh_size;
 8004c1c:	bfd8      	it	le
 8004c1e:	eba4 040c 	suble.w	r4, r4, ip
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8004c22:	43c3      	mvns	r3, r0
 8004c24:	42b4      	cmp	r4, r6
 8004c26:	440b      	add	r3, r1
 8004c28:	d1ef      	bne.n	8004c0a <get_history+0x4a>
    }

    int length = *(shp->sh_buffer + idx);
 8004c2a:	f81e 4006 	ldrb.w	r4, [lr, r6]

    if (length > 0) {
 8004c2e:	b95c      	cbnz	r4, 8004c48 <get_history+0x88>
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
      }
      return length;
    }
    else if (dir == SHELL_HIST_DIR_FW) {
 8004c30:	2a01      	cmp	r2, #1
 8004c32:	d135      	bne.n	8004ca0 <get_history+0xe0>
      shp->sh_cur++;
 8004c34:	3501      	adds	r5, #1
 8004c36:	613d      	str	r5, [r7, #16]
      return 0;
    }
  }
  return -1;
}
 8004c38:	4620      	mov	r0, r4
 8004c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8004c3e:	4626      	mov	r6, r4
    int length = *(shp->sh_buffer + idx);
 8004c40:	f81e 4006 	ldrb.w	r4, [lr, r6]
    if (length > 0) {
 8004c44:	2c00      	cmp	r4, #0
 8004c46:	d0f3      	beq.n	8004c30 <get_history+0x70>
      shp->sh_cur++;
 8004c48:	3501      	adds	r5, #1
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8004c4a:	2240      	movs	r2, #64	; 0x40
      shp->sh_cur++;
 8004c4c:	613d      	str	r5, [r7, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4640      	mov	r0, r8
 8004c52:	f003 f83d 	bl	8007cd0 <memset>
      if ((idx + length) < shp->sh_size) {
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	19a2      	adds	r2, r4, r6
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	da10      	bge.n	8004c80 <get_history+0xc0>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	3601      	adds	r6, #1
 8004c62:	4431      	add	r1, r6
 8004c64:	4640      	mov	r0, r8
 8004c66:	4622      	mov	r2, r4
 8004c68:	f7fb fb50 	bl	800030c <memcpy>
 8004c6c:	e7e4      	b.n	8004c38 <get_history+0x78>
    if (shp->sh_cur > 0)
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	dd04      	ble.n	8004c7c <get_history+0xbc>
      shp->sh_cur -= 2;
 8004c72:	3d02      	subs	r5, #2
 8004c74:	613d      	str	r5, [r7, #16]
 8004c76:	e7bd      	b.n	8004bf4 <get_history+0x34>
  int count=0;
 8004c78:	2100      	movs	r1, #0
 8004c7a:	e7b8      	b.n	8004bee <get_history+0x2e>
      return 0;
 8004c7c:	2400      	movs	r4, #0
 8004c7e:	e7db      	b.n	8004c38 <get_history+0x78>
        int part_len = shp->sh_size - idx - 1;
 8004c80:	1b9b      	subs	r3, r3, r6
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8004c82:	6839      	ldr	r1, [r7, #0]
        int part_len = shp->sh_size - idx - 1;
 8004c84:	1e5d      	subs	r5, r3, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8004c86:	3601      	adds	r6, #1
 8004c88:	4431      	add	r1, r6
 8004c8a:	462a      	mov	r2, r5
 8004c8c:	4640      	mov	r0, r8
 8004c8e:	f7fb fb3d 	bl	800030c <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	eb08 0005 	add.w	r0, r8, r5
 8004c98:	1b62      	subs	r2, r4, r5
 8004c9a:	f7fb fb37 	bl	800030c <memcpy>
 8004c9e:	e7cb      	b.n	8004c38 <get_history+0x78>
  return -1;
 8004ca0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ca4:	e7c8      	b.n	8004c38 <get_history+0x78>
 8004ca6:	f8d7 e000 	ldr.w	lr, [r7]
 8004caa:	e7be      	b.n	8004c2a <get_history+0x6a>
 8004cac:	f8d7 e000 	ldr.w	lr, [r7]
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8004cb0:	4626      	mov	r6, r4
 8004cb2:	e7ba      	b.n	8004c2a <get_history+0x6a>
	...

08004cc0 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8004cc0:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8004cc2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8004cc6:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8004cc8:	b113      	cbz	r3, 8004cd0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8004cd0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
 8004cd4:	6862      	ldr	r2, [r4, #4]
 8004cd6:	68cb      	ldr	r3, [r1, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	64a3      	str	r3, [r4, #72]	; 0x48
 8004ce0:	6461      	str	r1, [r4, #68]	; 0x44
 8004ce2:	6893      	ldr	r3, [r2, #8]
 8004ce4:	b36b      	cbz	r3, 8004d42 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8004cea:	b350      	cbz	r0, 8004d42 <_usb_ep0setup+0x82>
 8004cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cee:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 8004cf2:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8004cf6:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  max = (size_t)get_hword(&usbp->setup[6]);
 8004cfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
 8004cfe:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8004d00:	bf3c      	itt	cc
 8004d02:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 8004d04:	4613      	movcc	r3, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8004d06:	0602      	lsls	r2, r0, #24
 8004d08:	f100 80df 	bmi.w	8004eca <_usb_ep0setup+0x20a>
    if (usbp->ep0n != 0U) {
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 808f 	beq.w	8004e30 <_usb_ep0setup+0x170>
      usbp->ep0state = USB_EP0_OUT_RX;
 8004d12:	2315      	movs	r3, #21
 8004d14:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004d18:	2320      	movs	r3, #32
 8004d1a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8004d1e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004d20:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8004d22:	699b      	ldr	r3, [r3, #24]
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8004d24:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004d28:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8004d2c:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004d2e:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8004d30:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8004d32:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8004d36:	4629      	mov	r1, r5
 8004d38:	f7fc fd3a 	bl	80017b0 <usb_lld_start_out>
 8004d3c:	f385 8811 	msr	BASEPRI, r5
}
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8004d42:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8004d46:	f010 0660 	ands.w	r6, r0, #96	; 0x60
 8004d4a:	d11c      	bne.n	8004d86 <_usb_ep0setup+0xc6>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8004d4c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004d50:	f000 037f 	and.w	r3, r0, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8004d54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004d58:	f240 3202 	movw	r2, #770	; 0x302
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	f000 8113 	beq.w	8004f88 <_usb_ep0setup+0x2c8>
 8004d62:	d844      	bhi.n	8004dee <_usb_ep0setup+0x12e>
 8004d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d68:	f000 8125 	beq.w	8004fb6 <_usb_ep0setup+0x2f6>
 8004d6c:	d922      	bls.n	8004db4 <_usb_ep0setup+0xf4>
 8004d6e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004d72:	f000 812f 	beq.w	8004fd4 <_usb_ep0setup+0x314>
 8004d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7a:	d104      	bne.n	8004d86 <_usb_ep0setup+0xc6>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8004d7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	f000 80d2 	beq.w	8004f2a <_usb_ep0setup+0x26a>
 8004d86:	6d62      	ldr	r2, [r4, #84]	; 0x54
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8004d88:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8004d8c:	6861      	ldr	r1, [r4, #4]
 8004d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d92:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8004d96:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8004d9a:	680d      	ldr	r5, [r1, #0]
 8004d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004da0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8004da4:	b115      	cbz	r5, 8004dac <_usb_ep0setup+0xec>
 8004da6:	2106      	movs	r1, #6
 8004da8:	4620      	mov	r0, r4
 8004daa:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8004dac:	2306      	movs	r3, #6
 8004dae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d060      	beq.n	8004e7a <_usb_ep0setup+0x1ba>
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d150      	bne.n	8004e5e <_usb_ep0setup+0x19e>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8004dbc:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 8004dc0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8004dc4:	2900      	cmp	r1, #0
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8004dc6:	f002 010f 	and.w	r1, r2, #15
 8004dca:	bfb4      	ite	lt
 8004dcc:	3148      	addlt	r1, #72	; 0x48
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8004dce:	3158      	addge	r1, #88	; 0x58
 8004dd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004dd2:	0149      	lsls	r1, r1, #5
 8004dd4:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8004dd6:	040d      	lsls	r5, r1, #16
 8004dd8:	d5d6      	bpl.n	8004d88 <_usb_ep0setup+0xc8>
  if (ctl & DOEPCTL_STALL)
 8004dda:	0289      	lsls	r1, r1, #10
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8004ddc:	bf4c      	ite	mi
 8004dde:	4a9c      	ldrmi	r2, [pc, #624]	; (8005050 <_usb_ep0setup+0x390>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8004de0:	4a9c      	ldrpl	r2, [pc, #624]	; (8005054 <_usb_ep0setup+0x394>)
 8004de2:	63a2      	str	r2, [r4, #56]	; 0x38
 8004de4:	2102      	movs	r1, #2
 8004de6:	2200      	movs	r2, #0
 8004de8:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
        return true;
 8004dec:	e781      	b.n	8004cf2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df2:	f000 80c2 	beq.w	8004f7a <_usb_ep0setup+0x2ba>
 8004df6:	d947      	bls.n	8004e88 <_usb_ep0setup+0x1c8>
 8004df8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004dfc:	d139      	bne.n	8004e72 <_usb_ep0setup+0x1b2>
      if (usbp->state == USB_ACTIVE) {
 8004dfe:	7823      	ldrb	r3, [r4, #0]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	f000 809c 	beq.w	8004f3e <_usb_ep0setup+0x27e>
      if (usbp->setup[2] != 0U) {
 8004e06:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004e0a:	b14b      	cbz	r3, 8004e20 <_usb_ep0setup+0x160>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8004e0c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8004e0e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 8004e12:	2104      	movs	r1, #4
 8004e14:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	b113      	cbz	r3, 8004e20 <_usb_ep0setup+0x160>
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8004e20:	2300      	movs	r3, #0
 8004e22:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8004e26:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8004e2a:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8004e2c:	0603      	lsls	r3, r0, #24
 8004e2e:	d465      	bmi.n	8004efc <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8004e30:	230b      	movs	r3, #11
 8004e32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004e36:	2320      	movs	r3, #32
 8004e38:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8004e3c:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004e3e:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8004e40:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8004e42:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8004e4a:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8004e4c:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8004e50:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8004e52:	4629      	mov	r1, r5
 8004e54:	f7fc fc14 	bl	8001680 <usb_lld_start_in>
 8004e58:	f385 8811 	msr	BASEPRI, r5
}
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d191      	bne.n	8004d86 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8004e62:	2202      	movs	r2, #2
 8004e64:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8004e68:	6423      	str	r3, [r4, #64]	; 0x40
 8004e6a:	e9c4 120e 	strd	r1, r2, [r4, #56]	; 0x38
 8004e6e:	4613      	mov	r3, r2
 8004e70:	e73f      	b.n	8004cf2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004e72:	f640 4202 	movw	r2, #3074	; 0xc02
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d185      	bne.n	8004d86 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8004e7a:	4b77      	ldr	r3, [pc, #476]	; (8005058 <_usb_ep0setup+0x398>)
 8004e7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2302      	movs	r3, #2
 8004e82:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
    return true;
 8004e86:	e734      	b.n	8004cf2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004e88:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004e8c:	d06b      	beq.n	8004f66 <_usb_ep0setup+0x2a6>
 8004e8e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	f63f af77 	bhi.w	8004d86 <_usb_ep0setup+0xc6>
  hw |= (uint16_t)*p << 8U;
 8004e98:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8004e9c:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8004e9e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8004ea2:	684d      	ldr	r5, [r1, #4]
 8004ea4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8004ea8:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8004eac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	47a8      	blx	r5
    if (dp == NULL) {
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f43f af66 	beq.w	8004d86 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8004eba:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004ebe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8004ec2:	6426      	str	r6, [r4, #64]	; 0x40
 8004ec4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return true;
 8004ec8:	e713      	b.n	8004cf2 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
 8004eca:	b1bb      	cbz	r3, 8004efc <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_TX;
 8004ecc:	2309      	movs	r3, #9
 8004ece:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004ed2:	2320      	movs	r3, #32
 8004ed4:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8004ed8:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004eda:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8004edc:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8004ede:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 8004ee6:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004ee8:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8004eea:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8004eec:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	f7fc fbc5 	bl	8001680 <usb_lld_start_in>
 8004ef6:	f385 8811 	msr	BASEPRI, r5
}
 8004efa:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8004efc:	2314      	movs	r3, #20
 8004efe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004f02:	2320      	movs	r3, #32
 8004f04:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8004f08:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004f0a:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8004f0c:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8004f0e:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8004f16:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8004f18:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8004f1c:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8004f1e:	4629      	mov	r1, r5
 8004f20:	f7fc fc46 	bl	80017b0 <usb_lld_start_out>
 8004f24:	f385 8811 	msr	BASEPRI, r5
}
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
      usbp->status |= 2U;
 8004f2a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8004f2e:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status |= 2U;
 8004f30:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8004f34:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 8004f38:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8004f3c:	e776      	b.n	8004e2c <_usb_ep0setup+0x16c>
 8004f3e:	2320      	movs	r3, #32
 8004f40:	f383 8811 	msr	BASEPRI, r3
        usbDisableEndpointsI(usbp);
 8004f44:	4620      	mov	r0, r4
 8004f46:	f7fc fed3 	bl	8001cf0 <usbDisableEndpointsI>
 8004f4a:	f386 8811 	msr	BASEPRI, r6
        usbp->state = USB_SELECTED;
 8004f4e:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8004f50:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8004f52:	f884 604f 	strb.w	r6, [r4, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 8004f56:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f43f af53 	beq.w	8004e06 <_usb_ep0setup+0x146>
 8004f60:	4620      	mov	r0, r4
 8004f62:	4798      	blx	r3
 8004f64:	e74f      	b.n	8004e06 <_usb_ep0setup+0x146>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8004f66:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8004f6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004f6e:	d048      	beq.n	8005002 <_usb_ep0setup+0x342>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8004f70:	2300      	movs	r3, #0
 8004f72:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8004f76:	6423      	str	r3, [r4, #64]	; 0x40
    return true;
 8004f78:	e758      	b.n	8004e2c <_usb_ep0setup+0x16c>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8004f7a:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 8004f84:	6426      	str	r6, [r4, #64]	; 0x40
 8004f86:	e6b4      	b.n	8004cf2 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8004f88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f47f aefa 	bne.w	8004d86 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8004f92:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8004f96:	f013 020f 	ands.w	r2, r3, #15
 8004f9a:	d0e9      	beq.n	8004f70 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8004f9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fa2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8004fa6:	d144      	bne.n	8005032 <_usb_ep0setup+0x372>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8004fa8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004fac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004fb0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004fb4:	e7dc      	b.n	8004f70 <_usb_ep0setup+0x2b0>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8004fb6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	f47f aee3 	bne.w	8004d86 <_usb_ep0setup+0xc6>
      usbp->status &= ~2U;
 8004fc0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8004fc4:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 8004fc6:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8004fca:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 8004fce:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8004fd2:	e72b      	b.n	8004e2c <_usb_ep0setup+0x16c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8004fd4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f aed4 	bne.w	8004d86 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8004fde:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8004fe2:	f013 020f 	ands.w	r2, r3, #15
 8004fe6:	d0c3      	beq.n	8004f70 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8004fe8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fee:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8004ff2:	d125      	bne.n	8005040 <_usb_ep0setup+0x380>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8004ff4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004ff8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004ffc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8005000:	e7b6      	b.n	8004f70 <_usb_ep0setup+0x2b0>
  usbp->address = usbp->setup[2];
 8005002:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
  stm32_otg_t *otgp = usbp->otg;
 8005006:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005008:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800500c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005010:	6865      	ldr	r5, [r4, #4]
 8005012:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005016:	682d      	ldr	r5, [r5, #0]
 8005018:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800501c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8005020:	b125      	cbz	r5, 800502c <_usb_ep0setup+0x36c>
 8005022:	4620      	mov	r0, r4
 8005024:	2101      	movs	r1, #1
 8005026:	47a8      	blx	r5
 8005028:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  usbp->state = USB_SELECTED;
 800502c:	2303      	movs	r3, #3
 800502e:	7023      	strb	r3, [r4, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8005030:	e79e      	b.n	8004f70 <_usb_ep0setup+0x2b0>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8005032:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005036:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800503a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800503e:	e797      	b.n	8004f70 <_usb_ep0setup+0x2b0>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8005040:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005044:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005048:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800504c:	e790      	b.n	8004f70 <_usb_ep0setup+0x2b0>
 800504e:	bf00      	nop
 8005050:	08008ce0 	.word	0x08008ce0
 8005054:	08008be0 	.word	0x08008be0
 8005058:	08008f00 	.word	0x08008f00
 800505c:	00000000 	.word	0x00000000

08005060 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	b085      	sub	sp, #20
 8005066:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800506a:	69c7      	ldr	r7, [r0, #28]
 800506c:	f04f 0920 	mov.w	r9, #32
 8005070:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8005074:	b3a2      	cbz	r2, 80050e0 <oqWriteTimeout+0x80>
 8005076:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800507a:	4604      	mov	r4, r0
 800507c:	460e      	mov	r6, r1
 800507e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8005082:	68a2      	ldr	r2, [r4, #8]
 8005084:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8005086:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800508a:	bf8c      	ite	hi
 800508c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800508e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8005090:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8005094:	45a8      	cmp	r8, r5
 8005096:	d844      	bhi.n	8005122 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8005098:	d229      	bcs.n	80050ee <oqWriteTimeout+0x8e>
    s2 = n - s1;
 800509a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800509e:	4642      	mov	r2, r8
 80050a0:	4631      	mov	r1, r6
    s2 = n - s1;
 80050a2:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80050a4:	f7fb f932 	bl	800030c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80050a8:	eb06 0108 	add.w	r1, r6, r8
 80050ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80050b0:	68e0      	ldr	r0, [r4, #12]
 80050b2:	4642      	mov	r2, r8
 80050b4:	f7fb f92a 	bl	800030c <memcpy>
  oqp->q_counter -= n;
 80050b8:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 80050ba:	68e1      	ldr	r1, [r4, #12]
 80050bc:	4643      	mov	r3, r8
 80050be:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 80050c0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 80050c2:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80050c4:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80050c6:	b10f      	cbz	r7, 80050cc <oqWriteTimeout+0x6c>
        nfy(oqp);
 80050c8:	4620      	mov	r0, r4
 80050ca:	47b8      	blx	r7
 80050cc:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80050d0:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80050d4:	442e      	add	r6, r5
 80050d6:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80050da:	f1bb 0f00 	cmp.w	fp, #0
 80050de:	d1d0      	bne.n	8005082 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 80050e0:	9803      	ldr	r0, [sp, #12]
 80050e2:	2300      	movs	r3, #0
 80050e4:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80050e8:	b005      	add	sp, #20
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80050ee:	462a      	mov	r2, r5
 80050f0:	4631      	mov	r1, r6
 80050f2:	f7fb f90b 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80050f6:	68e2      	ldr	r2, [r4, #12]
 80050f8:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80050fa:	68a2      	ldr	r2, [r4, #8]
 80050fc:	1b52      	subs	r2, r2, r5
 80050fe:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8005100:	2d00      	cmp	r5, #0
 8005102:	d1e0      	bne.n	80050c6 <oqWriteTimeout+0x66>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8005104:	9902      	ldr	r1, [sp, #8]
 8005106:	4620      	mov	r0, r4
 8005108:	f7fd f88a 	bl	8002220 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800510c:	2800      	cmp	r0, #0
 800510e:	d0b8      	beq.n	8005082 <oqWriteTimeout+0x22>
 8005110:	9b03      	ldr	r3, [sp, #12]
 8005112:	eba3 000b 	sub.w	r0, r3, fp
 8005116:	2300      	movs	r3, #0
 8005118:	f383 8811 	msr	BASEPRI, r3
}
 800511c:	b005      	add	sp, #20
 800511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8005122:	462a      	mov	r2, r5
 8005124:	4631      	mov	r1, r6
 8005126:	f7fb f8f1 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 800512a:	6962      	ldr	r2, [r4, #20]
 800512c:	442a      	add	r2, r5
 800512e:	6162      	str	r2, [r4, #20]
 8005130:	e7e3      	b.n	80050fa <oqWriteTimeout+0x9a>
 8005132:	bf00      	nop
	...

08005140 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8005140:	3030      	adds	r0, #48	; 0x30
 8005142:	f7ff bf8d 	b.w	8005060 <oqWriteTimeout>
 8005146:	bf00      	nop
	...

08005150 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8005150:	3030      	adds	r0, #48	; 0x30
 8005152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005156:	f7ff bf83 	b.w	8005060 <oqWriteTimeout>
 800515a:	bf00      	nop
 800515c:	0000      	movs	r0, r0
	...

08005160 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	b085      	sub	sp, #20
 8005166:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 800516a:	69c7      	ldr	r7, [r0, #28]
 800516c:	f04f 0920 	mov.w	r9, #32
 8005170:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8005174:	2a00      	cmp	r2, #0
 8005176:	d034      	beq.n	80051e2 <iqReadTimeout+0x82>
 8005178:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800517c:	4604      	mov	r4, r0
 800517e:	460e      	mov	r6, r1
 8005180:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 8005184:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8005186:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8005188:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800518a:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 800518c:	bf8c      	ite	hi
 800518e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8005190:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8005192:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8005196:	45a8      	cmp	r8, r5
 8005198:	d844      	bhi.n	8005224 <iqReadTimeout+0xc4>
  else if (n > s1) {
 800519a:	d229      	bcs.n	80051f0 <iqReadTimeout+0x90>
    s2 = n - s1;
 800519c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80051a0:	4642      	mov	r2, r8
 80051a2:	4630      	mov	r0, r6
    s2 = n - s1;
 80051a4:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80051a6:	f7fb f8b1 	bl	800030c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80051aa:	eb06 0008 	add.w	r0, r6, r8
 80051ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80051b2:	68e1      	ldr	r1, [r4, #12]
 80051b4:	4642      	mov	r2, r8
 80051b6:	f7fb f8a9 	bl	800030c <memcpy>
  iqp->q_counter -= n;
 80051ba:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80051bc:	68e1      	ldr	r1, [r4, #12]
 80051be:	4643      	mov	r3, r8
 80051c0:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 80051c2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 80051c4:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80051c6:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 80051c8:	b10f      	cbz	r7, 80051ce <iqReadTimeout+0x6e>
        nfy(iqp);
 80051ca:	4620      	mov	r0, r4
 80051cc:	47b8      	blx	r7
 80051ce:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 80051d2:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80051d6:	442e      	add	r6, r5
 80051d8:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80051dc:	f1bb 0f00 	cmp.w	fp, #0
 80051e0:	d1d0      	bne.n	8005184 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 80051e2:	9803      	ldr	r0, [sp, #12]
 80051e4:	2300      	movs	r3, #0
 80051e6:	f383 8811 	msr	BASEPRI, r3
}
 80051ea:	b005      	add	sp, #20
 80051ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80051f0:	462a      	mov	r2, r5
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7fb f88a 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80051f8:	68e2      	ldr	r2, [r4, #12]
 80051fa:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 80051fc:	68a2      	ldr	r2, [r4, #8]
 80051fe:	1b52      	subs	r2, r2, r5
 8005200:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8005202:	2d00      	cmp	r5, #0
 8005204:	d1e0      	bne.n	80051c8 <iqReadTimeout+0x68>
 8005206:	9902      	ldr	r1, [sp, #8]
 8005208:	4620      	mov	r0, r4
 800520a:	f7fd f809 	bl	8002220 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800520e:	2800      	cmp	r0, #0
 8005210:	d0b8      	beq.n	8005184 <iqReadTimeout+0x24>
 8005212:	9b03      	ldr	r3, [sp, #12]
 8005214:	eba3 000b 	sub.w	r0, r3, fp
 8005218:	2300      	movs	r3, #0
 800521a:	f383 8811 	msr	BASEPRI, r3
}
 800521e:	b005      	add	sp, #20
 8005220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8005224:	462a      	mov	r2, r5
 8005226:	4630      	mov	r0, r6
 8005228:	f7fb f870 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 800522c:	69a2      	ldr	r2, [r4, #24]
 800522e:	442a      	add	r2, r5
 8005230:	61a2      	str	r2, [r4, #24]
 8005232:	e7e3      	b.n	80051fc <iqReadTimeout+0x9c>
	...

08005240 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8005240:	300c      	adds	r0, #12
 8005242:	f7ff bf8d 	b.w	8005160 <iqReadTimeout>
 8005246:	bf00      	nop
	...

08005250 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8005250:	300c      	adds	r0, #12
 8005252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005256:	f7ff bf83 	b.w	8005160 <iqReadTimeout>
 800525a:	bf00      	nop
 800525c:	0000      	movs	r0, r0
	...

08005260 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	4605      	mov	r5, r0
 8005266:	b083      	sub	sp, #12
 8005268:	460c      	mov	r4, r1
 800526a:	4692      	mov	sl, r2
 800526c:	4699      	mov	r9, r3
 800526e:	f04f 0820 	mov.w	r8, #32
 8005272:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 8005276:	6aab      	ldr	r3, [r5, #40]	; 0x28
  size_t w = 0;
 8005278:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 800527a:	4637      	mov	r7, r6
    if (obqp->ptr == NULL) {
 800527c:	2b00      	cmp	r3, #0
 800527e:	d041      	beq.n	8005304 <obqWriteTimeout+0xa4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8005280:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 8005282:	ebaa 0b06 	sub.w	fp, sl, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8005286:	1aca      	subs	r2, r1, r3
    if (size > (n - w)) {
 8005288:	4593      	cmp	fp, r2
 800528a:	bf28      	it	cs
 800528c:	4693      	movcs	fp, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800528e:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8005292:	d940      	bls.n	8005316 <obqWriteTimeout+0xb6>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8005294:	4621      	mov	r1, r4
 8005296:	4618      	mov	r0, r3
 8005298:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800529c:	680c      	ldr	r4, [r1, #0]
 800529e:	684a      	ldr	r2, [r1, #4]
 80052a0:	688b      	ldr	r3, [r1, #8]
 80052a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80052a6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80052aa:	3110      	adds	r1, #16
 80052ac:	4571      	cmp	r1, lr
 80052ae:	6004      	str	r4, [r0, #0]
 80052b0:	6042      	str	r2, [r0, #4]
 80052b2:	6083      	str	r3, [r0, #8]
 80052b4:	f100 0010 	add.w	r0, r0, #16
 80052b8:	d1f0      	bne.n	800529c <obqWriteTimeout+0x3c>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80052ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80052bc:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80052be:	460c      	mov	r4, r1
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 80052c0:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80052c2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 80052c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d813      	bhi.n	80052f2 <obqWriteTimeout+0x92>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80052ca:	69ea      	ldr	r2, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 80052cc:	692b      	ldr	r3, [r5, #16]
  if (obqp->bwrptr >= obqp->btop) {
 80052ce:	69a8      	ldr	r0, [r5, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80052d0:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 80052d2:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 80052d4:	69e9      	ldr	r1, [r5, #28]
  obqp->bcounter--;
 80052d6:	68ea      	ldr	r2, [r5, #12]
  obqp->ptr = NULL;
 80052d8:	62af      	str	r7, [r5, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 80052da:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 80052dc:	4283      	cmp	r3, r0
  obqp->bwrptr += obqp->bsize;
 80052de:	612b      	str	r3, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 80052e0:	bf24      	itt	cs
 80052e2:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 80052e4:	612b      	strcs	r3, [r5, #16]
  if (obqp->notify != NULL) {
 80052e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  obqp->bcounter--;
 80052e8:	3a01      	subs	r2, #1
 80052ea:	60ea      	str	r2, [r5, #12]
  if (obqp->notify != NULL) {
 80052ec:	b10b      	cbz	r3, 80052f2 <obqWriteTimeout+0x92>
    obqp->notify(obqp);
 80052ee:	4628      	mov	r0, r5
 80052f0:	4798      	blx	r3
 80052f2:	f387 8811 	msr	BASEPRI, r7
    if (w >= n) {
 80052f6:	4556      	cmp	r6, sl
 80052f8:	d21a      	bcs.n	8005330 <obqWriteTimeout+0xd0>
 80052fa:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 80052fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1bd      	bne.n	8005280 <obqWriteTimeout+0x20>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8005304:	4649      	mov	r1, r9
 8005306:	4628      	mov	r0, r5
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	f7fd f819 	bl	8002340 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 800530e:	9b01      	ldr	r3, [sp, #4]
 8005310:	b960      	cbnz	r0, 800532c <obqWriteTimeout+0xcc>
 8005312:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005314:	e7b4      	b.n	8005280 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 8005316:	4618      	mov	r0, r3
 8005318:	4621      	mov	r1, r4
 800531a:	465a      	mov	r2, fp
 800531c:	f7fa fff6 	bl	800030c <memcpy>
      obqp->ptr += size;
 8005320:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005322:	445b      	add	r3, fp
      w         += size;
 8005324:	445e      	add	r6, fp
      bp        += size;
 8005326:	445c      	add	r4, fp
      obqp->ptr += size;
 8005328:	62ab      	str	r3, [r5, #40]	; 0x28
      w         += size;
 800532a:	e7cb      	b.n	80052c4 <obqWriteTimeout+0x64>
 800532c:	f383 8811 	msr	BASEPRI, r3
}
 8005330:	4630      	mov	r0, r6
 8005332:	b003      	add	sp, #12
 8005334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005340 <_writet.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8005340:	3044      	adds	r0, #68	; 0x44
 8005342:	f7ff bf8d 	b.w	8005260 <obqWriteTimeout>
 8005346:	bf00      	nop
	...

08005350 <_write.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8005350:	3044      	adds	r0, #68	; 0x44
 8005352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005356:	f7ff bf83 	b.w	8005260 <obqWriteTimeout>
 800535a:	bf00      	nop
 800535c:	0000      	movs	r0, r0
	...

08005360 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	b083      	sub	sp, #12
 8005366:	4605      	mov	r5, r0
 8005368:	460f      	mov	r7, r1
 800536a:	4693      	mov	fp, r2
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	f04f 0920 	mov.w	r9, #32
 8005372:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 8005376:	6aac      	ldr	r4, [r5, #40]	; 0x28
  size_t r = 0;
 8005378:	2600      	movs	r6, #0
  ibqp->ptr = NULL;
 800537a:	46b0      	mov	r8, r6
    if (ibqp->ptr == NULL) {
 800537c:	2c00      	cmp	r4, #0
 800537e:	d03f      	beq.n	8005400 <ibqReadTimeout+0xa0>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8005380:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if (size > (n - r)) {
 8005382:	ebab 0206 	sub.w	r2, fp, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8005386:	1b1b      	subs	r3, r3, r4
    if (size > (n - r)) {
 8005388:	429a      	cmp	r2, r3
 800538a:	bf28      	it	cs
 800538c:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800538e:	2a40      	cmp	r2, #64	; 0x40
 8005390:	4692      	mov	sl, r2
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8005392:	4621      	mov	r1, r4
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8005394:	d93b      	bls.n	800540e <ibqReadTimeout+0xae>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8005396:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800539a:	463b      	mov	r3, r7
 800539c:	680c      	ldr	r4, [r1, #0]
 800539e:	6848      	ldr	r0, [r1, #4]
 80053a0:	688a      	ldr	r2, [r1, #8]
 80053a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80053a6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80053aa:	3110      	adds	r1, #16
 80053ac:	4571      	cmp	r1, lr
 80053ae:	601c      	str	r4, [r3, #0]
 80053b0:	6058      	str	r0, [r3, #4]
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	f103 0310 	add.w	r3, r3, #16
 80053b8:	d1f0      	bne.n	800539c <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80053ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80053bc:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80053be:	3740      	adds	r7, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 80053c0:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80053c2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 80053c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d811      	bhi.n	80053ee <ibqReadTimeout+0x8e>
  if (ibqp->brdptr >= ibqp->btop) {
 80053ca:	e9d5 2106 	ldrd	r2, r1, [r5, #24]
  ibqp->brdptr += ibqp->bsize;
 80053ce:	696b      	ldr	r3, [r5, #20]
  ibqp->bcounter--;
 80053d0:	68e8      	ldr	r0, [r5, #12]
  ibqp->ptr = NULL;
 80053d2:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 80053d6:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 80053d8:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 80053da:	616b      	str	r3, [r5, #20]
    ibqp->brdptr = ibqp->buffers;
 80053dc:	bf24      	itt	cs
 80053de:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 80053e0:	616b      	strcs	r3, [r5, #20]
  if (ibqp->notify != NULL) {
 80053e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  ibqp->bcounter--;
 80053e4:	3801      	subs	r0, #1
 80053e6:	60e8      	str	r0, [r5, #12]
  if (ibqp->notify != NULL) {
 80053e8:	b10b      	cbz	r3, 80053ee <ibqReadTimeout+0x8e>
    ibqp->notify(ibqp);
 80053ea:	4628      	mov	r0, r5
 80053ec:	4798      	blx	r3
 80053ee:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 80053f2:	455e      	cmp	r6, fp
 80053f4:	d216      	bcs.n	8005424 <ibqReadTimeout+0xc4>
 80053f6:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 80053fa:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80053fc:	2c00      	cmp	r4, #0
 80053fe:	d1bf      	bne.n	8005380 <ibqReadTimeout+0x20>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8005400:	9901      	ldr	r1, [sp, #4]
 8005402:	4628      	mov	r0, r5
 8005404:	f7fd f804 	bl	8002410 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8005408:	b950      	cbnz	r0, 8005420 <ibqReadTimeout+0xc0>
 800540a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800540c:	e7b8      	b.n	8005380 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 800540e:	4638      	mov	r0, r7
 8005410:	f7fa ff7c 	bl	800030c <memcpy>
      ibqp->ptr += size;
 8005414:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005416:	4453      	add	r3, sl
      r         += size;
 8005418:	4456      	add	r6, sl
      bp        += size;
 800541a:	4457      	add	r7, sl
      ibqp->ptr += size;
 800541c:	62ab      	str	r3, [r5, #40]	; 0x28
      r         += size;
 800541e:	e7d1      	b.n	80053c4 <ibqReadTimeout+0x64>
 8005420:	f384 8811 	msr	BASEPRI, r4
}
 8005424:	4630      	mov	r0, r6
 8005426:	b003      	add	sp, #12
 8005428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542c:	0000      	movs	r0, r0
	...

08005430 <_readt.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8005430:	300c      	adds	r0, #12
 8005432:	f7ff bf95 	b.w	8005360 <ibqReadTimeout>
 8005436:	bf00      	nop
	...

08005440 <_read.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8005440:	300c      	adds	r0, #12
 8005442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005446:	f7ff bf8b 	b.w	8005360 <ibqReadTimeout>
 800544a:	bf00      	nop
 800544c:	0000      	movs	r0, r0
	...

08005450 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	460d      	mov	r5, r1
  if (str != NULL)
 8005454:	b1b8      	cbz	r0, 8005486 <parse_arguments+0x36>
 8005456:	4604      	mov	r4, r0
    *saveptr = str;
 8005458:	6028      	str	r0, [r5, #0]
  p += strspn(p, " \t");
 800545a:	4912      	ldr	r1, [pc, #72]	; (80054a4 <parse_arguments+0x54>)
 800545c:	4620      	mov	r0, r4
 800545e:	f002 fd0b 	bl	8007e78 <strspn>
  if (*p == '"') {
 8005462:	5c21      	ldrb	r1, [r4, r0]
 8005464:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 8005466:	eb04 0600 	add.w	r6, r4, r0
  if (*p == '"') {
 800546a:	d012      	beq.n	8005492 <parse_arguments+0x42>
    *saveptr = strpbrk(p, " \t");
 800546c:	490d      	ldr	r1, [pc, #52]	; (80054a4 <parse_arguments+0x54>)
 800546e:	4630      	mov	r0, r6
 8005470:	f002 fce6 	bl	8007e40 <strpbrk>
  if (*saveptr != NULL) {
 8005474:	b198      	cbz	r0, 800549e <parse_arguments+0x4e>
    *(*saveptr)++ = '\0';
 8005476:	1c42      	adds	r2, r0, #1
 8005478:	2300      	movs	r3, #0
 800547a:	602a      	str	r2, [r5, #0]
 800547c:	7003      	strb	r3, [r0, #0]
  return *p != '\0' ? p : NULL;
 800547e:	7833      	ldrb	r3, [r6, #0]
 8005480:	b123      	cbz	r3, 800548c <parse_arguments+0x3c>
}
 8005482:	4630      	mov	r0, r6
 8005484:	bd70      	pop	{r4, r5, r6, pc}
  p = *saveptr;
 8005486:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8005488:	2c00      	cmp	r4, #0
 800548a:	d1e6      	bne.n	800545a <parse_arguments+0xa>
    return NULL;
 800548c:	2600      	movs	r6, #0
}
 800548e:	4630      	mov	r0, r6
 8005490:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8005492:	3601      	adds	r6, #1
    *saveptr = strpbrk(p, "\"");
 8005494:	4630      	mov	r0, r6
 8005496:	f002 fc6b 	bl	8007d70 <strchr>
  if (*saveptr != NULL) {
 800549a:	2800      	cmp	r0, #0
 800549c:	d1eb      	bne.n	8005476 <parse_arguments+0x26>
 800549e:	6028      	str	r0, [r5, #0]
 80054a0:	e7ed      	b.n	800547e <parse_arguments+0x2e>
 80054a2:	bf00      	nop
 80054a4:	08008a1c 	.word	0x08008a1c
	...

080054b0 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80054b4:	4db4      	ldr	r5, [pc, #720]	; (8005788 <shellThread+0x2d8>)
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 80054b6:	f8d0 a000 	ldr.w	sl, [r0]
#if !defined(_CHIBIOS_NIL_)
  chRegSetThreadName(SHELL_THREAD_NAME);
#endif

#if SHELL_USE_HISTORY == TRUE
  *(scfg->sc_histbuf) = 0;
 80054ba:	6883      	ldr	r3, [r0, #8]
 80054bc:	696a      	ldr	r2, [r5, #20]
 80054be:	49b3      	ldr	r1, [pc, #716]	; (800578c <shellThread+0x2dc>)
THD_FUNCTION(shellThread, p) {
 80054c0:	b0a7      	sub	sp, #156	; 0x9c
 80054c2:	4604      	mov	r4, r0
 80054c4:	9001      	str	r0, [sp, #4]
  const ShellCommand *scp = scfg->sc_commands;
 80054c6:	6840      	ldr	r0, [r0, #4]
 80054c8:	9006      	str	r0, [sp, #24]
  *(scfg->sc_histbuf) = 0;
 80054ca:	2000      	movs	r0, #0
 80054cc:	6191      	str	r1, [r2, #24]
 80054ce:	7018      	strb	r0, [r3, #0]
  ShellHistory hist = {
 80054d0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80054d4:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 80054d8:	49ad      	ldr	r1, [pc, #692]	; (8005790 <shellThread+0x2e0>)
  ShellHistory hist = {
 80054da:	9010      	str	r0, [sp, #64]	; 0x40
  chprintf(chp, SHELL_NEWLINE_STR);
 80054dc:	4650      	mov	r0, sl
  ShellHistory hist = {
 80054de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  chprintf(chp, SHELL_NEWLINE_STR);
 80054e2:	f7fd fd05 	bl	8002ef0 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 80054e6:	49ab      	ldr	r1, [pc, #684]	; (8005794 <shellThread+0x2e4>)
 80054e8:	4650      	mov	r0, sl
 80054ea:	f7fd fd01 	bl	8002ef0 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80054ee:	696b      	ldr	r3, [r5, #20]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 80054f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054f4:	f013 0304 	ands.w	r3, r3, #4
 80054f8:	f040 8095 	bne.w	8005626 <shellThread+0x176>
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 80054fc:	9302      	str	r3, [sp, #8]
 80054fe:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 8005502:	f8cd a000 	str.w	sl, [sp]
    chprintf(chp, SHELL_PROMPT_STR);
 8005506:	49a4      	ldr	r1, [pc, #656]	; (8005798 <shellThread+0x2e8>)
 8005508:	9800      	ldr	r0, [sp, #0]
 800550a:	f7fd fcf1 	bl	8002ef0 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 800550e:	9b01      	ldr	r3, [sp, #4]
  bool bracket = false;
 8005510:	2500      	movs	r5, #0
  BaseSequentialStream *chp = scfg->sc_channel;
 8005512:	681c      	ldr	r4, [r3, #0]
  bool escape = false;
 8005514:	462f      	mov	r7, r5
  char *p = line;
 8005516:	46d8      	mov	r8, fp
#endif

  while (true) {
    char c;

    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	2201      	movs	r2, #1
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8005522:	4620      	mov	r0, r4
 8005524:	4798      	blx	r3
 8005526:	2800      	cmp	r0, #0
 8005528:	d046      	beq.n	80055b8 <shellThread+0x108>
      return true;
#if SHELL_USE_ESC_SEQ == TRUE
    if (c == 27) {
 800552a:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 800552e:	291b      	cmp	r1, #27
 8005530:	d02a      	beq.n	8005588 <shellThread+0xd8>
      escape = true;
      continue;
    }
    if (escape) {
 8005532:	b15f      	cbz	r7, 800554c <shellThread+0x9c>
      escape = false;
      if (c == '[') {
 8005534:	295b      	cmp	r1, #91	; 0x5b
 8005536:	d03d      	beq.n	80055b4 <shellThread+0x104>
        escape = true;
        bracket = true;
        continue;
      }
      if (bracket) {
 8005538:	b135      	cbz	r5, 8005548 <shellThread+0x98>
        bracket = false;
#if SHELL_USE_HISTORY == TRUE
        if (c == 'A') {
 800553a:	2941      	cmp	r1, #65	; 0x41
 800553c:	f000 8117 	beq.w	800576e <shellThread+0x2be>
            chprintf(chp, "%s", line);
            p = line + len;
          }
          continue;
        }
        if (c == 'B') {
 8005540:	2942      	cmp	r1, #66	; 0x42
 8005542:	f000 80f7 	beq.w	8005734 <shellThread+0x284>
        bracket = false;
 8005546:	2500      	movs	r5, #0
      escape = false;
 8005548:	462f      	mov	r7, r5
 800554a:	e7e5      	b.n	8005518 <shellThread+0x68>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
#endif
    if ((c == 8) || (c == 127)) {
 800554c:	2908      	cmp	r1, #8
 800554e:	d01d      	beq.n	800558c <shellThread+0xdc>
 8005550:	297f      	cmp	r1, #127	; 0x7f
 8005552:	d01b      	beq.n	800558c <shellThread+0xdc>
        streamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8005554:	290d      	cmp	r1, #13
 8005556:	f000 8153 	beq.w	8005800 <shellThread+0x350>
#endif
      *p = 0;
      return false;
    }
#if SHELL_USE_COMPLETION == TRUE
    if (c == '\t') {
 800555a:	2909      	cmp	r1, #9
 800555c:	d077      	beq.n	800564e <shellThread+0x19e>
      }
      continue;
    }
#endif
#if SHELL_USE_HISTORY == TRUE
    if (c == 14) {
 800555e:	290e      	cmp	r1, #14
 8005560:	f000 812a 	beq.w	80057b8 <shellThread+0x308>
        chprintf(chp, "%s", line);
        p = line + len;
      }
      continue;
    }
    if (c == 16) {
 8005564:	2910      	cmp	r1, #16
 8005566:	f000 8142 	beq.w	80057ee <shellThread+0x33e>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 800556a:	291f      	cmp	r1, #31
 800556c:	d9d4      	bls.n	8005518 <shellThread+0x68>
      continue;
    if (p < line + size - 1) {
 800556e:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8005572:	4598      	cmp	r8, r3
 8005574:	d2d0      	bcs.n	8005518 <shellThread+0x68>
      streamPut(chp, c);
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	4620      	mov	r0, r4
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4798      	blx	r3
      *p++ = (char)c;
 800557e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005582:	f808 3b01 	strb.w	r3, [r8], #1
 8005586:	e7c7      	b.n	8005518 <shellThread+0x68>
      escape = true;
 8005588:	2701      	movs	r7, #1
 800558a:	e7c5      	b.n	8005518 <shellThread+0x68>
      if (p != line) {
 800558c:	45d8      	cmp	r8, fp
 800558e:	d0c3      	beq.n	8005518 <shellThread+0x68>
        streamPut(chp, 0x08);
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	2108      	movs	r1, #8
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4620      	mov	r0, r4
 8005598:	4798      	blx	r3
        streamPut(chp, 0x20);
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	2120      	movs	r1, #32
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4620      	mov	r0, r4
 80055a2:	4798      	blx	r3
        streamPut(chp, 0x08);
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	2108      	movs	r1, #8
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4620      	mov	r0, r4
        p--;
 80055ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
        streamPut(chp, 0x08);
 80055b0:	4798      	blx	r3
 80055b2:	e7b1      	b.n	8005518 <shellThread+0x68>
        bracket = true;
 80055b4:	463d      	mov	r5, r7
 80055b6:	e7af      	b.n	8005518 <shellThread+0x68>
  chThdSleep(delay);
 80055b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055bc:	f7fd f9c8 	bl	8002950 <chThdSleep>
    lp = parse_arguments(line, &tokp);
 80055c0:	a909      	add	r1, sp, #36	; 0x24
 80055c2:	4658      	mov	r0, fp
 80055c4:	f7ff ff44 	bl	8005450 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80055c8:	a909      	add	r1, sp, #36	; 0x24
    lp = parse_arguments(line, &tokp);
 80055ca:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80055cc:	2000      	movs	r0, #0
 80055ce:	ac11      	add	r4, sp, #68	; 0x44
    n = 0;
 80055d0:	2600      	movs	r6, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80055d2:	f7ff ff3d 	bl	8005450 <parse_arguments>
 80055d6:	b150      	cbz	r0, 80055ee <shellThread+0x13e>
      if (n >= SHELL_MAX_ARGUMENTS) {
 80055d8:	2e04      	cmp	r6, #4
 80055da:	d031      	beq.n	8005640 <shellThread+0x190>
      args[n++] = lp;
 80055dc:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80055e0:	a909      	add	r1, sp, #36	; 0x24
 80055e2:	2000      	movs	r0, #0
      args[n++] = lp;
 80055e4:	3601      	adds	r6, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80055e6:	f7ff ff33 	bl	8005450 <parse_arguments>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d1f4      	bne.n	80055d8 <shellThread+0x128>
    args[n] = NULL;
 80055ee:	ab26      	add	r3, sp, #152	; 0x98
 80055f0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80055f4:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80055f8:	b175      	cbz	r5, 8005618 <shellThread+0x168>
      if (strcmp(cmd, "help") == 0) {
 80055fa:	4968      	ldr	r1, [pc, #416]	; (800579c <shellThread+0x2ec>)
 80055fc:	4628      	mov	r0, r5
 80055fe:	f7fa ff23 	bl	8000448 <strcmp>
 8005602:	2800      	cmp	r0, #0
 8005604:	f040 81a2 	bne.w	800594c <shellThread+0x49c>
        if (n > 0) {
 8005608:	2e00      	cmp	r6, #0
 800560a:	f000 815d 	beq.w	80058c8 <shellThread+0x418>
          shellUsage(chp, "help");
 800560e:	4a63      	ldr	r2, [pc, #396]	; (800579c <shellThread+0x2ec>)
 8005610:	4963      	ldr	r1, [pc, #396]	; (80057a0 <shellThread+0x2f0>)
 8005612:	9800      	ldr	r0, [sp, #0]
 8005614:	f7fd fc6c 	bl	8002ef0 <chprintf>
 8005618:	4b5b      	ldr	r3, [pc, #364]	; (8005788 <shellThread+0x2d8>)
 800561a:	695b      	ldr	r3, [r3, #20]
  while (!chThdShouldTerminateX()) {
 800561c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005620:	075b      	lsls	r3, r3, #29
 8005622:	f57f af70 	bpl.w	8005506 <shellThread+0x56>
 8005626:	2320      	movs	r3, #32
 8005628:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800562c:	2100      	movs	r1, #0
 800562e:	485d      	ldr	r0, [pc, #372]	; (80057a4 <shellThread+0x2f4>)
 8005630:	f7fb fd76 	bl	8001120 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8005634:	2000      	movs	r0, #0
 8005636:	f7fc fda3 	bl	8002180 <chThdExitS>
}
 800563a:	b027      	add	sp, #156	; 0x9c
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8005640:	4959      	ldr	r1, [pc, #356]	; (80057a8 <shellThread+0x2f8>)
 8005642:	9800      	ldr	r0, [sp, #0]
 8005644:	f7fd fc54 	bl	8002ef0 <chprintf>
    args[n] = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	9315      	str	r3, [sp, #84]	; 0x54
    if (cmd != NULL) {
 800564c:	e7e4      	b.n	8005618 <shellThread+0x168>
      if (p < line + size - 1) {
 800564e:	f10d 0697 	add.w	r6, sp, #151	; 0x97
 8005652:	45b0      	cmp	r8, r6
 8005654:	f4bf af60 	bcs.w	8005518 <shellThread+0x68>
  char help_cmp[] = "help";
 8005658:	4b50      	ldr	r3, [pc, #320]	; (800579c <shellThread+0x2ec>)
        *p = 0;
 800565a:	f888 7000 	strb.w	r7, [r8]
  char help_cmp[] = "help";
 800565e:	e893 0003 	ldmia.w	r3, {r0, r1}
  if (strstr(help_cmp, line) == help_cmp) {
 8005662:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
  char help_cmp[] = "help";
 8005666:	900a      	str	r0, [sp, #40]	; 0x28
 8005668:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  if (strstr(help_cmp, line) == help_cmp) {
 800566c:	4650      	mov	r0, sl
 800566e:	4659      	mov	r1, fp
 8005670:	f002 fd74 	bl	800815c <strstr>
        get_completions(scfg, line);
 8005674:	9b01      	ldr	r3, [sp, #4]
 8005676:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800567a:	685a      	ldr	r2, [r3, #4]
  if (strstr(help_cmp, line) == help_cmp) {
 800567c:	4550      	cmp	r0, sl
    *scmp++ = help_cmp;
 800567e:	f109 0304 	add.w	r3, r9, #4
 8005682:	9303      	str	r3, [sp, #12]
        get_completions(scfg, line);
 8005684:	bf12      	itee	ne
 8005686:	46ca      	movne	sl, r9
    *scmp++ = help_cmp;
 8005688:	f8c9 0000 	streq.w	r0, [r9]
 800568c:	469a      	moveq	sl, r3
  if (scp != NULL) {
 800568e:	b19a      	cbz	r2, 80056b8 <shellThread+0x208>
    while (scp->sc_name != NULL) {
 8005690:	6813      	ldr	r3, [r2, #0]
 8005692:	b18b      	cbz	r3, 80056b8 <shellThread+0x208>
 8005694:	9404      	str	r4, [sp, #16]
 8005696:	9505      	str	r5, [sp, #20]
 8005698:	461c      	mov	r4, r3
 800569a:	4615      	mov	r5, r2
      if (strstr(scp->sc_name, line) == scp->sc_name) {
 800569c:	4620      	mov	r0, r4
 800569e:	4659      	mov	r1, fp
 80056a0:	f002 fd5c 	bl	800815c <strstr>
 80056a4:	4284      	cmp	r4, r0
        *scmp++ = (char *)scp->sc_name;
 80056a6:	bf08      	it	eq
 80056a8:	f84a 4b04 	streq.w	r4, [sl], #4
    while (scp->sc_name != NULL) {
 80056ac:	f855 4f08 	ldr.w	r4, [r5, #8]!
 80056b0:	2c00      	cmp	r4, #0
 80056b2:	d1f3      	bne.n	800569c <shellThread+0x1ec>
 80056b4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  *scmp = NULL;
 80056b8:	9b02      	ldr	r3, [sp, #8]
 80056ba:	f8ca 3000 	str.w	r3, [sl]
  if (*scmp != NULL) {
 80056be:	f8d9 a000 	ldr.w	sl, [r9]
 80056c2:	f1ba 0f00 	cmp.w	sl, #0
 80056c6:	f43f af27 	beq.w	8005518 <shellThread+0x68>
    if (*cmp == NULL) {
 80056ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
        int len = process_completions(scfg, line, p - line, size);
 80056ce:	eba8 010b 	sub.w	r1, r8, fp
 80056d2:	9104      	str	r1, [sp, #16]
    if (*cmp == NULL) {
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8162 	beq.w	800599e <shellThread+0x4ee>
      while (*(*scmp + clen) != 0) {
 80056da:	f89a c000 	ldrb.w	ip, [sl]
 80056de:	f1bc 0f00 	cmp.w	ip, #0
 80056e2:	f000 81a4 	beq.w	8005a2e <shellThread+0x57e>
  int clen = 0;
 80056e6:	9405      	str	r4, [sp, #20]
 80056e8:	9507      	str	r5, [sp, #28]
 80056ea:	4664      	mov	r4, ip
 80056ec:	9d04      	ldr	r5, [sp, #16]
 80056ee:	f8dd c00c 	ldr.w	ip, [sp, #12]
      while (*(*scmp + clen) != 0) {
 80056f2:	46c6      	mov	lr, r8
  int clen = 0;
 80056f4:	2100      	movs	r1, #0
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 80056f6:	5c5a      	ldrb	r2, [r3, r1]
 80056f8:	42a2      	cmp	r2, r4
 80056fa:	bf08      	it	eq
 80056fc:	4662      	moveq	r2, ip
 80056fe:	d105      	bne.n	800570c <shellThread+0x25c>
               (*(*cmp + clen) != 0) && (*cmp != NULL)) {
 8005700:	b13b      	cbz	r3, 8005712 <shellThread+0x262>
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 8005702:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005706:	5c58      	ldrb	r0, [r3, r1]
 8005708:	42a0      	cmp	r0, r4
 800570a:	d0f9      	beq.n	8005700 <shellThread+0x250>
        if (*cmp == NULL) {
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 80e8 	bne.w	80058e2 <shellThread+0x432>
          if ((c < line + size - 1) && (clen >= length))
 8005712:	45b6      	cmp	lr, r6
 8005714:	d205      	bcs.n	8005722 <shellThread+0x272>
 8005716:	42a9      	cmp	r1, r5
            *c++ = *(*scmp + clen);
 8005718:	bfa4      	itt	ge
 800571a:	f80e 4b01 	strbge.w	r4, [lr], #1
 800571e:	f8d9 a000 	ldrge.w	sl, [r9]
          clen++;
 8005722:	3101      	adds	r1, #1
      while (*(*scmp + clen) != 0) {
 8005724:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8005728:	2c00      	cmp	r4, #0
 800572a:	f000 8124 	beq.w	8005976 <shellThread+0x4c6>
 800572e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005732:	e7e0      	b.n	80056f6 <shellThread+0x246>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8005734:	2201      	movs	r2, #1
 8005736:	4659      	mov	r1, fp
 8005738:	a80c      	add	r0, sp, #48	; 0x30
 800573a:	f7ff fa41 	bl	8004bc0 <get_history>
          if (len == 0)
 800573e:	1e06      	subs	r6, r0, #0
 8005740:	d11e      	bne.n	8005780 <shellThread+0x2d0>
            *line = 0;
 8005742:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
            _shell_reset_cur(chp);
 8005746:	2304      	movs	r3, #4
 8005748:	2246      	movs	r2, #70	; 0x46
 800574a:	4918      	ldr	r1, [pc, #96]	; (80057ac <shellThread+0x2fc>)
 800574c:	4620      	mov	r0, r4
 800574e:	f7fd fbcf 	bl	8002ef0 <chprintf>
            _shell_clr_line(chp);
 8005752:	4917      	ldr	r1, [pc, #92]	; (80057b0 <shellThread+0x300>)
 8005754:	4620      	mov	r0, r4
 8005756:	f7fd fbcb 	bl	8002ef0 <chprintf>
        bracket = false;
 800575a:	2500      	movs	r5, #0
            chprintf(chp, "%s", line);
 800575c:	4915      	ldr	r1, [pc, #84]	; (80057b4 <shellThread+0x304>)
 800575e:	465a      	mov	r2, fp
 8005760:	4620      	mov	r0, r4
 8005762:	f7fd fbc5 	bl	8002ef0 <chprintf>
            p = line + len;
 8005766:	eb0b 0806 	add.w	r8, fp, r6
      escape = false;
 800576a:	462f      	mov	r7, r5
 800576c:	e6d4      	b.n	8005518 <shellThread+0x68>
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 800576e:	2200      	movs	r2, #0
 8005770:	4659      	mov	r1, fp
 8005772:	a80c      	add	r0, sp, #48	; 0x30
 8005774:	f7ff fa24 	bl	8004bc0 <get_history>
          if (len > 0) {
 8005778:	1e06      	subs	r6, r0, #0
 800577a:	f77f aee4 	ble.w	8005546 <shellThread+0x96>
 800577e:	e7e2      	b.n	8005746 <shellThread+0x296>
          if (len >= 0) {
 8005780:	f6ff aee1 	blt.w	8005546 <shellThread+0x96>
 8005784:	e7df      	b.n	8005746 <shellThread+0x296>
 8005786:	bf00      	nop
 8005788:	200019e0 	.word	0x200019e0
 800578c:	08008a20 	.word	0x08008a20
 8005790:	08008954 	.word	0x08008954
 8005794:	08008a28 	.word	0x08008a28
 8005798:	08008a3c 	.word	0x08008a3c
 800579c:	08008a74 	.word	0x08008a74
 80057a0:	08008a7c 	.word	0x08008a7c
 80057a4:	20005ea8 	.word	0x20005ea8
 80057a8:	08008a5c 	.word	0x08008a5c
 80057ac:	08008a44 	.word	0x08008a44
 80057b0:	08008a50 	.word	0x08008a50
 80057b4:	08008a54 	.word	0x08008a54
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 80057b8:	2201      	movs	r2, #1
 80057ba:	4659      	mov	r1, fp
 80057bc:	a80c      	add	r0, sp, #48	; 0x30
 80057be:	f7ff f9ff 	bl	8004bc0 <get_history>
      if (len == 0)
 80057c2:	1e06      	subs	r6, r0, #0
 80057c4:	d178      	bne.n	80058b8 <shellThread+0x408>
        *line = 0;
 80057c6:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
        _shell_reset_cur(chp);
 80057ca:	2304      	movs	r3, #4
 80057cc:	2246      	movs	r2, #70	; 0x46
 80057ce:	499a      	ldr	r1, [pc, #616]	; (8005a38 <shellThread+0x588>)
 80057d0:	4620      	mov	r0, r4
 80057d2:	f7fd fb8d 	bl	8002ef0 <chprintf>
        _shell_clr_line(chp);
 80057d6:	4999      	ldr	r1, [pc, #612]	; (8005a3c <shellThread+0x58c>)
 80057d8:	4620      	mov	r0, r4
 80057da:	f7fd fb89 	bl	8002ef0 <chprintf>
        chprintf(chp, "%s", line);
 80057de:	4998      	ldr	r1, [pc, #608]	; (8005a40 <shellThread+0x590>)
 80057e0:	465a      	mov	r2, fp
 80057e2:	4620      	mov	r0, r4
        p = line + len;
 80057e4:	eb0b 0806 	add.w	r8, fp, r6
        chprintf(chp, "%s", line);
 80057e8:	f7fd fb82 	bl	8002ef0 <chprintf>
 80057ec:	e694      	b.n	8005518 <shellThread+0x68>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 80057ee:	463a      	mov	r2, r7
 80057f0:	4659      	mov	r1, fp
 80057f2:	a80c      	add	r0, sp, #48	; 0x30
 80057f4:	f7ff f9e4 	bl	8004bc0 <get_history>
      if (len > 0) {
 80057f8:	1e06      	subs	r6, r0, #0
 80057fa:	f77f ae8d 	ble.w	8005518 <shellThread+0x68>
 80057fe:	e7e4      	b.n	80057ca <shellThread+0x31a>
      chprintf(chp, SHELL_NEWLINE_STR);
 8005800:	4620      	mov	r0, r4
 8005802:	4990      	ldr	r1, [pc, #576]	; (8005a44 <shellThread+0x594>)
 8005804:	f7fd fb74 	bl	8002ef0 <chprintf>
  if (length > shp->sh_size - 2)
 8005808:	9d0d      	ldr	r5, [sp, #52]	; 0x34
      save_history(shp, line, p - line);
 800580a:	eba8 040b 	sub.w	r4, r8, fp
  if (length > shp->sh_size - 2)
 800580e:	1e6b      	subs	r3, r5, #1
 8005810:	429c      	cmp	r4, r3
 8005812:	da4d      	bge.n	80058b0 <shellThread+0x400>
  while ((*(line + length -1) == ' ') && (length > 0))
 8005814:	1e63      	subs	r3, r4, #1
 8005816:	eb0b 0203 	add.w	r2, fp, r3
 800581a:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800581e:	2920      	cmp	r1, #32
 8005820:	d10a      	bne.n	8005838 <shellThread+0x388>
 8005822:	2c00      	cmp	r4, #0
 8005824:	dc03      	bgt.n	800582e <shellThread+0x37e>
 8005826:	e043      	b.n	80058b0 <shellThread+0x400>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d041      	beq.n	80058b0 <shellThread+0x400>
 800582c:	3b01      	subs	r3, #1
 800582e:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8005832:	2920      	cmp	r1, #32
    length--;
 8005834:	461c      	mov	r4, r3
  while ((*(line + length -1) == ' ') && (length > 0))
 8005836:	d0f7      	beq.n	8005828 <shellThread+0x378>
  if (length <= 0)
 8005838:	2c00      	cmp	r4, #0
 800583a:	dd39      	ble.n	80058b0 <shellThread+0x400>
  if (shp->sh_end >= shp->sh_beg) {
 800583c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 800583e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8005842:	1af2      	subs	r2, r6, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8005844:	1b99      	subs	r1, r3, r6
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8005846:	3201      	adds	r2, #1
  if (shp->sh_end >= shp->sh_beg) {
 8005848:	429e      	cmp	r6, r3
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 800584a:	eba5 0202 	sub.w	r2, r5, r2
    if (length < (shp->sh_beg - shp->sh_end - 1))
 800584e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
  if (shp->sh_end >= shp->sh_beg) {
 8005852:	db09      	blt.n	8005868 <shellThread+0x3b8>
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8005854:	42a2      	cmp	r2, r4
 8005856:	dc09      	bgt.n	800586c <shellThread+0x3bc>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8005858:	5cc2      	ldrb	r2, [r0, r3]
 800585a:	4413      	add	r3, r2
 800585c:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 800585e:	429d      	cmp	r5, r3
    pos -= shp->sh_size;
 8005860:	bfd8      	it	le
 8005862:	1b5b      	suble	r3, r3, r5
  shp->sh_beg = pos;
 8005864:	930e      	str	r3, [sp, #56]	; 0x38
 8005866:	e7ec      	b.n	8005842 <shellThread+0x392>
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8005868:	42a1      	cmp	r1, r4
 800586a:	ddf5      	ble.n	8005858 <shellThread+0x3a8>
  if (length < shp->sh_size - shp->sh_end - 1)
 800586c:	1bad      	subs	r5, r5, r6
 800586e:	3d01      	subs	r5, #1
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8005870:	3601      	adds	r6, #1
  if (length < shp->sh_size - shp->sh_end - 1)
 8005872:	42a5      	cmp	r5, r4
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8005874:	4430      	add	r0, r6
  if (length < shp->sh_size - shp->sh_end - 1)
 8005876:	dc22      	bgt.n	80058be <shellThread+0x40e>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 8005878:	462a      	mov	r2, r5
 800587a:	4659      	mov	r1, fp
 800587c:	f7fa fd46 	bl	800030c <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 8005880:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005882:	1b62      	subs	r2, r4, r5
 8005884:	eb0b 0105 	add.w	r1, fp, r5
 8005888:	f7fa fd40 	bl	800030c <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 800588c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800588e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005890:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 8005892:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  if (shp->sh_end >= shp->sh_size)
 8005894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  shp->sh_end += length + 1;
 8005896:	3401      	adds	r4, #1
 8005898:	4414      	add	r4, r2
  if (shp->sh_end >= shp->sh_size)
 800589a:	429c      	cmp	r4, r3
  shp->sh_end += length + 1;
 800589c:	940f      	str	r4, [sp, #60]	; 0x3c
    shp->sh_end -= shp->sh_size;
 800589e:	bfa8      	it	ge
 80058a0:	1ae4      	subge	r4, r4, r3
  *(shp->sh_buffer + shp->sh_end) = 0;
 80058a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058a4:	9a02      	ldr	r2, [sp, #8]
    shp->sh_end -= shp->sh_size;
 80058a6:	bfa8      	it	ge
 80058a8:	940f      	strge	r4, [sp, #60]	; 0x3c
  *(shp->sh_buffer + shp->sh_end) = 0;
 80058aa:	551a      	strb	r2, [r3, r4]
  shp->sh_cur = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	9310      	str	r3, [sp, #64]	; 0x40
      *p = 0;
 80058b0:	9b02      	ldr	r3, [sp, #8]
 80058b2:	f888 3000 	strb.w	r3, [r8]
 80058b6:	e683      	b.n	80055c0 <shellThread+0x110>
      if (len >= 0) {
 80058b8:	f6ff ae2e 	blt.w	8005518 <shellThread+0x68>
 80058bc:	e785      	b.n	80057ca <shellThread+0x31a>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 80058be:	4622      	mov	r2, r4
 80058c0:	4659      	mov	r1, fp
 80058c2:	f7fa fd23 	bl	800030c <memcpy>
 80058c6:	e7e1      	b.n	800588c <shellThread+0x3dc>
        chprintf(chp, "Commands: help ");
 80058c8:	495f      	ldr	r1, [pc, #380]	; (8005a48 <shellThread+0x598>)
 80058ca:	9800      	ldr	r0, [sp, #0]
 80058cc:	f7fd fb10 	bl	8002ef0 <chprintf>
        if (scp != NULL)
 80058d0:	9b06      	ldr	r3, [sp, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f040 808c 	bne.w	80059f0 <shellThread+0x540>
        chprintf(chp, SHELL_NEWLINE_STR);
 80058d8:	495a      	ldr	r1, [pc, #360]	; (8005a44 <shellThread+0x594>)
 80058da:	9800      	ldr	r0, [sp, #0]
 80058dc:	f7fd fb08 	bl	8002ef0 <chprintf>
 80058e0:	e69a      	b.n	8005618 <shellThread+0x168>
 80058e2:	9c05      	ldr	r4, [sp, #20]
 80058e4:	9d07      	ldr	r5, [sp, #28]
 80058e6:	eb0b 0a01 	add.w	sl, fp, r1
    *(line + clen) = 0;
 80058ea:	9b02      	ldr	r3, [sp, #8]
 80058ec:	f88a 3000 	strb.w	r3, [sl]
        if (len > 0) {
 80058f0:	2900      	cmp	r1, #0
 80058f2:	f43f ae11 	beq.w	8005518 <shellThread+0x68>
          write_completions(scfg, line, p - line);
 80058f6:	9a01      	ldr	r2, [sp, #4]
  if (*(scmp + 1) != NULL) {
 80058f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
          write_completions(scfg, line, p - line);
 80058fc:	6816      	ldr	r6, [r2, #0]
  if (*(scmp + 1) != NULL) {
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d046      	beq.n	8005990 <shellThread+0x4e0>
    chprintf(chp, SHELL_NEWLINE_STR);
 8005902:	4950      	ldr	r1, [pc, #320]	; (8005a44 <shellThread+0x594>)
 8005904:	4630      	mov	r0, r6
 8005906:	f7fd faf3 	bl	8002ef0 <chprintf>
    while (*scmp != NULL)
 800590a:	f8d9 2000 	ldr.w	r2, [r9]
 800590e:	b172      	cbz	r2, 800592e <shellThread+0x47e>
      chprintf(chp, " %s", *scmp++);
 8005910:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8005a58 <shellThread+0x5a8>
 8005914:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005918:	e001      	b.n	800591e <shellThread+0x46e>
 800591a:	f109 0904 	add.w	r9, r9, #4
 800591e:	4641      	mov	r1, r8
 8005920:	4630      	mov	r0, r6
 8005922:	f7fd fae5 	bl	8002ef0 <chprintf>
    while (*scmp != NULL)
 8005926:	f8d9 2000 	ldr.w	r2, [r9]
 800592a:	2a00      	cmp	r2, #0
 800592c:	d1f5      	bne.n	800591a <shellThread+0x46a>
    chprintf(chp, SHELL_NEWLINE_STR);
 800592e:	4945      	ldr	r1, [pc, #276]	; (8005a44 <shellThread+0x594>)
 8005930:	4630      	mov	r0, r6
 8005932:	f7fd fadd 	bl	8002ef0 <chprintf>
    chprintf(chp, SHELL_PROMPT_STR);
 8005936:	4945      	ldr	r1, [pc, #276]	; (8005a4c <shellThread+0x59c>)
 8005938:	4630      	mov	r0, r6
 800593a:	f7fd fad9 	bl	8002ef0 <chprintf>
    chprintf(chp, "%s", line);
 800593e:	4940      	ldr	r1, [pc, #256]	; (8005a40 <shellThread+0x590>)
 8005940:	465a      	mov	r2, fp
 8005942:	4630      	mov	r0, r6
 8005944:	f7fd fad4 	bl	8002ef0 <chprintf>
          p = line + len;
 8005948:	46d0      	mov	r8, sl
 800594a:	e5e5      	b.n	8005518 <shellThread+0x68>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800594c:	9c06      	ldr	r4, [sp, #24]
 800594e:	2c00      	cmp	r4, #0
 8005950:	d062      	beq.n	8005a18 <shellThread+0x568>
  while (scp->sc_name != NULL) {
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	b920      	cbnz	r0, 8005960 <shellThread+0x4b0>
 8005956:	e05f      	b.n	8005a18 <shellThread+0x568>
 8005958:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800595c:	2800      	cmp	r0, #0
 800595e:	d05b      	beq.n	8005a18 <shellThread+0x568>
    if (strcmp(scp->sc_name, name) == 0) {
 8005960:	4629      	mov	r1, r5
 8005962:	f7fa fd71 	bl	8000448 <strcmp>
 8005966:	2800      	cmp	r0, #0
 8005968:	d1f6      	bne.n	8005958 <shellThread+0x4a8>
      scp->sc_function(chp, argc, argv);
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	9800      	ldr	r0, [sp, #0]
 800596e:	4631      	mov	r1, r6
 8005970:	aa11      	add	r2, sp, #68	; 0x44
 8005972:	4798      	blx	r3
      return false;
 8005974:	e650      	b.n	8005618 <shellThread+0x168>
 8005976:	46a4      	mov	ip, r4
    *(line + clen) = 0;
 8005978:	f80b c001 	strb.w	ip, [fp, r1]
          write_completions(scfg, line, p - line);
 800597c:	9a01      	ldr	r2, [sp, #4]
  if (*(scmp + 1) != NULL) {
 800597e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005982:	9d07      	ldr	r5, [sp, #28]
 8005984:	9c05      	ldr	r4, [sp, #20]
          write_completions(scfg, line, p - line);
 8005986:	6816      	ldr	r6, [r2, #0]
    *(line + clen) = 0;
 8005988:	eb0b 0a01 	add.w	sl, fp, r1
  if (*(scmp + 1) != NULL) {
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1b8      	bne.n	8005902 <shellThread+0x452>
    chprintf(chp, "%s", line + pos);
 8005990:	4642      	mov	r2, r8
 8005992:	492b      	ldr	r1, [pc, #172]	; (8005a40 <shellThread+0x590>)
 8005994:	4630      	mov	r0, r6
 8005996:	f7fd faab 	bl	8002ef0 <chprintf>
          p = line + len;
 800599a:	46d0      	mov	r8, sl
 800599c:	e5bc      	b.n	8005518 <shellThread+0x68>
      clen = strlen(*scmp);
 800599e:	4650      	mov	r0, sl
 80059a0:	f8cd a014 	str.w	sl, [sp, #20]
 80059a4:	f7fa fecc 	bl	8000740 <strlen>
      while ((c < line + clen) && (c < line + size - 1))
 80059a8:	eb0b 0a00 	add.w	sl, fp, r0
 80059ac:	45d0      	cmp	r8, sl
      clen = strlen(*scmp);
 80059ae:	4686      	mov	lr, r0
 80059b0:	4601      	mov	r1, r0
      while ((c < line + clen) && (c < line + size - 1))
 80059b2:	d23f      	bcs.n	8005a34 <shellThread+0x584>
 80059b4:	9b04      	ldr	r3, [sp, #16]
 80059b6:	9a05      	ldr	r2, [sp, #20]
 80059b8:	eba3 0c08 	sub.w	ip, r3, r8
 80059bc:	4643      	mov	r3, r8
 80059be:	e003      	b.n	80059c8 <shellThread+0x518>
 80059c0:	42b3      	cmp	r3, r6
 80059c2:	d092      	beq.n	80058ea <shellThread+0x43a>
 80059c4:	f8d9 2000 	ldr.w	r2, [r9]
        *c++ = *(*scmp + i++);
 80059c8:	eb03 000c 	add.w	r0, r3, ip
 80059cc:	5c12      	ldrb	r2, [r2, r0]
 80059ce:	f803 2b01 	strb.w	r2, [r3], #1
      while ((c < line + clen) && (c < line + size - 1))
 80059d2:	4553      	cmp	r3, sl
 80059d4:	d1f4      	bne.n	80059c0 <shellThread+0x510>
      if (c < line + size -1) {
 80059d6:	45b2      	cmp	sl, r6
 80059d8:	d287      	bcs.n	80058ea <shellThread+0x43a>
        clen++;
 80059da:	f10e 0e01 	add.w	lr, lr, #1
        *c = ' ';
 80059de:	2320      	movs	r3, #32
 80059e0:	f88a 3000 	strb.w	r3, [sl]
    *(line + clen) = 0;
 80059e4:	9b02      	ldr	r3, [sp, #8]
 80059e6:	f80b 300e 	strb.w	r3, [fp, lr]
 80059ea:	eb0b 0a0e 	add.w	sl, fp, lr
 80059ee:	e782      	b.n	80058f6 <shellThread+0x446>
  while (scp->sc_name != NULL) {
 80059f0:	9c06      	ldr	r4, [sp, #24]
 80059f2:	6822      	ldr	r2, [r4, #0]
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	f43f af6f 	beq.w	80058d8 <shellThread+0x428>
    chprintf(chp, "%s ", scp->sc_name);
 80059fa:	4d15      	ldr	r5, [pc, #84]	; (8005a50 <shellThread+0x5a0>)
 80059fc:	9e00      	ldr	r6, [sp, #0]
 80059fe:	4629      	mov	r1, r5
 8005a00:	4630      	mov	r0, r6
 8005a02:	f7fd fa75 	bl	8002ef0 <chprintf>
  while (scp->sc_name != NULL) {
 8005a06:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d1f7      	bne.n	80059fe <shellThread+0x54e>
        chprintf(chp, SHELL_NEWLINE_STR);
 8005a0e:	490d      	ldr	r1, [pc, #52]	; (8005a44 <shellThread+0x594>)
 8005a10:	9800      	ldr	r0, [sp, #0]
 8005a12:	f7fd fa6d 	bl	8002ef0 <chprintf>
 8005a16:	e5ff      	b.n	8005618 <shellThread+0x168>
        chprintf(chp, "%s", cmd);
 8005a18:	9c00      	ldr	r4, [sp, #0]
 8005a1a:	4909      	ldr	r1, [pc, #36]	; (8005a40 <shellThread+0x590>)
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7fd fa66 	bl	8002ef0 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8005a24:	490b      	ldr	r1, [pc, #44]	; (8005a54 <shellThread+0x5a4>)
 8005a26:	4620      	mov	r0, r4
 8005a28:	f7fd fa62 	bl	8002ef0 <chprintf>
 8005a2c:	e5f4      	b.n	8005618 <shellThread+0x168>
    *(line + clen) = 0;
 8005a2e:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
 8005a32:	e571      	b.n	8005518 <shellThread+0x68>
      while ((c < line + clen) && (c < line + size - 1))
 8005a34:	46c2      	mov	sl, r8
 8005a36:	e7d0      	b.n	80059da <shellThread+0x52a>
 8005a38:	08008a44 	.word	0x08008a44
 8005a3c:	08008a50 	.word	0x08008a50
 8005a40:	08008a54 	.word	0x08008a54
 8005a44:	08008954 	.word	0x08008954
 8005a48:	08008a88 	.word	0x08008a88
 8005a4c:	08008a3c 	.word	0x08008a3c
 8005a50:	08008a98 	.word	0x08008a98
 8005a54:	08008a9c 	.word	0x08008a9c
 8005a58:	08008a58 	.word	0x08008a58
 8005a5c:	00000000 	.word	0x00000000

08005a60 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005a60:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8005a64:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005a66:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f383 8811 	msr	BASEPRI, r3
}
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
	...

08005a80 <chThdExit>:
 8005a80:	2320      	movs	r3, #32
 8005a82:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8005a86:	f7fc bb7b 	b.w	8002180 <chThdExitS>
 8005a8a:	bf00      	nop
 8005a8c:	0000      	movs	r0, r0
	...

08005a90 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8005a90:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 8005a92:	6810      	ldr	r0, [r2, #0]
 8005a94:	6951      	ldr	r1, [r2, #20]
  tqp->next             = tp->queue.next;
 8005a96:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8005a98:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8005a9a:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8005a9c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 8005a9e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8005aa0:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8005aa4:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 8005aa6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005aa8:	6150      	str	r0, [r2, #20]
  tp->state = CH_STATE_READY;
 8005aaa:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8005aae:	e000      	b.n	8005ab2 <chSchDoReschedule+0x22>
 8005ab0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	4294      	cmp	r4, r2
 8005ab6:	d3fb      	bcc.n	8005ab0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8005ab8:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8005aba:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 8005abc:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8005ac0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8005ac2:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8005ac4:	f7fa bc0c 	b.w	80002e0 <_port_switch>
 8005ac8:	200019e0 	.word	0x200019e0
 8005acc:	00000000 	.word	0x00000000

08005ad0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8005ad0:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005ad2:	4d1b      	ldr	r5, [pc, #108]	; (8005b40 <chMtxUnlock+0x70>)
void chMtxUnlock(mutex_t *mp) {
 8005ad4:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 8005ad6:	696e      	ldr	r6, [r5, #20]
 8005ad8:	2320      	movs	r3, #32
 8005ada:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005ade:	6800      	ldr	r0, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8005ae0:	68cb      	ldr	r3, [r1, #12]
 8005ae2:	63b3      	str	r3, [r6, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8005ae4:	4288      	cmp	r0, r1
 8005ae6:	d025      	beq.n	8005b34 <chMtxUnlock+0x64>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8005ae8:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8005aea:	b14b      	cbz	r3, 8005b00 <chMtxUnlock+0x30>
 8005aec:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <chMtxUnlock+0x2a>
 8005af2:	6892      	ldr	r2, [r2, #8]
 8005af4:	4294      	cmp	r4, r2
 8005af6:	bf38      	it	cc
 8005af8:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8005afa:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f5      	bne.n	8005aec <chMtxUnlock+0x1c>
  tqp->next             = tp->queue.next;
 8005b00:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8005b02:	6b82      	ldr	r2, [r0, #56]	; 0x38
      ctp->prio = newprio;
 8005b04:	60b4      	str	r4, [r6, #8]
 8005b06:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005b08:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8005b0a:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 8005b0e:	6381      	str	r1, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8005b10:	f7fb fac6 	bl	80010a0 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8005b14:	682a      	ldr	r2, [r5, #0]
 8005b16:	696b      	ldr	r3, [r5, #20]
  if (chSchIsRescRequiredI()) {
 8005b18:	6892      	ldr	r2, [r2, #8]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d803      	bhi.n	8005b28 <chMtxUnlock+0x58>
 8005b20:	2300      	movs	r3, #0
 8005b22:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 8005b28:	f7ff ffb2 	bl	8005a90 <chSchDoReschedule>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	6083      	str	r3, [r0, #8]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	200019e0 	.word	0x200019e0
	...

08005b50 <chThdRelease>:
 8005b50:	2220      	movs	r2, #32
 8005b52:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8005b56:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8005b60:	6a03      	ldr	r3, [r0, #32]
 8005b62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d003      	beq.n	8005b72 <chThdRelease+0x22>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	4770      	bx	lr
    REG_REMOVE(tp);
 8005b72:	e9d0 1303 	ldrd	r1, r3, [r0, #12]
void chThdRelease(thread_t *tp) {
 8005b76:	b570      	push	{r4, r5, r6, lr}
    REG_REMOVE(tp);
 8005b78:	60d9      	str	r1, [r3, #12]
 8005b7a:	68c4      	ldr	r4, [r0, #12]
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	6123      	str	r3, [r4, #16]
 8005b80:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8005b84:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005b88:	f003 0303 	and.w	r3, r3, #3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d00c      	beq.n	8005baa <chThdRelease+0x5a>
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d000      	beq.n	8005b96 <chThdRelease+0x46>
}
 8005b94:	bd70      	pop	{r4, r5, r6, pc}
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8005b96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b98:	69c0      	ldr	r0, [r0, #28]
 8005b9a:	f382 8811 	msr	BASEPRI, r2
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	6002      	str	r2, [r0, #0]
  mp->next = php;
 8005ba2:	6018      	str	r0, [r3, #0]
 8005ba4:	f381 8811 	msr	BASEPRI, r1
}
 8005ba8:	bd70      	pop	{r4, r5, r6, pc}
      chHeapFree(chThdGetWorkingAreaX(tp));
 8005baa:	69c5      	ldr	r5, [r0, #28]
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8005bac:	e955 4302 	ldrd	r4, r3, [r5, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005bb0:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005bb2:	08db      	lsrs	r3, r3, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8005bb4:	f104 060c 	add.w	r6, r4, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005bb8:	f845 3c04 	str.w	r3, [r5, #-4]
  qp = &heapp->header;
 8005bbc:	3404      	adds	r4, #4
  H_LOCK(heapp);
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7fc fa76 	bl	80020b0 <chMtxLock>
  hp = (heap_header_t *)p - 1U;
 8005bc4:	f1a5 0108 	sub.w	r1, r5, #8
  qp = &heapp->header;
 8005bc8:	4623      	mov	r3, r4

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8005bca:	429c      	cmp	r4, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005bcc:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005bce:	d001      	beq.n	8005bd4 <chThdRelease+0x84>
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	d902      	bls.n	8005bda <chThdRelease+0x8a>
 8005bd4:	b11a      	cbz	r2, 8005bde <chThdRelease+0x8e>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005bd6:	4291      	cmp	r1, r2
 8005bd8:	d301      	bcc.n	8005bde <chThdRelease+0x8e>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 8005bda:	4613      	mov	r3, r2
 8005bdc:	e7f5      	b.n	8005bca <chThdRelease+0x7a>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005bde:	f855 4c04 	ldr.w	r4, [r5, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8005be2:	f845 2c08 	str.w	r2, [r5, #-8]
      H_NEXT(qp) = hp;
 8005be6:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005be8:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8005bec:	1c62      	adds	r2, r4, #1
 8005bee:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8005bf2:	42a0      	cmp	r0, r4
 8005bf4:	d011      	beq.n	8005c1a <chThdRelease+0xca>
      if ((H_LIMIT(qp) == hp)) {
 8005bf6:	6858      	ldr	r0, [r3, #4]
 8005bf8:	1c42      	adds	r2, r0, #1
 8005bfa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	d004      	beq.n	8005c0c <chThdRelease+0xbc>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8005c02:	4630      	mov	r0, r6
}
 8005c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c08:	f7ff bf62 	b.w	8005ad0 <chMtxUnlock>
        H_NEXT(qp) = H_NEXT(hp);
 8005c0c:	e955 1202 	ldrd	r1, r2, [r5, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8005c10:	3201      	adds	r2, #1
 8005c12:	4410      	add	r0, r2
        H_NEXT(qp) = H_NEXT(hp);
 8005c14:	6019      	str	r1, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8005c16:	6058      	str	r0, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 8005c18:	e7f3      	b.n	8005c02 <chThdRelease+0xb2>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005c1a:	e9d0 0400 	ldrd	r0, r4, [r0]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005c1e:	4422      	add	r2, r4
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005c20:	f845 0c08 	str.w	r0, [r5, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005c24:	f845 2c04 	str.w	r2, [r5, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005c28:	e7e5      	b.n	8005bf6 <chThdRelease+0xa6>
 8005c2a:	bf00      	nop
 8005c2c:	0000      	movs	r0, r0
	...

08005c30 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8005c30:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <main+0x94>)
  PWR->CR |= PWR_CR_DBP;
 8005c32:	4825      	ldr	r0, [pc, #148]	; (8005cc8 <main+0x98>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	f062 021f 	orn	r2, r2, #31
//}

/*
 * Application entry point.
 */
int main(void) {
 8005c3a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005c3e:	611a      	str	r2, [r3, #16]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	f002 021f 	and.w	r2, r2, #31
 8005c46:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8005c48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8005c4c:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	615c      	str	r4, [r3, #20]
 8005c52:	2100      	movs	r1, #0
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	6159      	str	r1, [r3, #20]
 8005c58:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8005c5a:	6a1a      	ldr	r2, [r3, #32]
 8005c5c:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8005c60:	621a      	str	r2, [r3, #32]
 8005c62:	6a1a      	ldr	r2, [r3, #32]
 8005c64:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005c68:	621a      	str	r2, [r3, #32]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 8005c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c6e:	625c      	str	r4, [r3, #36]	; 0x24
 8005c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c72:	6259      	str	r1, [r3, #36]	; 0x24
 8005c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8005c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c84:	661a      	str	r2, [r3, #96]	; 0x60
 8005c86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8005c88:	6802      	ldr	r2, [r0, #0]
 8005c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8e:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8005c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c92:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005c96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005c9a:	b08f      	sub	sp, #60	; 0x3c
 8005c9c:	d003      	beq.n	8005ca6 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 8005c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005ca2:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8005ca4:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8005ca6:	4d08      	ldr	r5, [pc, #32]	; (8005cc8 <main+0x98>)
  dma.allocated_mask = 0U;
 8005ca8:	4c08      	ldr	r4, [pc, #32]	; (8005ccc <main+0x9c>)
 8005caa:	686a      	ldr	r2, [r5, #4]
 8005cac:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <main+0xa0>)
 8005cae:	4809      	ldr	r0, [pc, #36]	; (8005cd4 <main+0xa4>)
 8005cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	606a      	str	r2, [r5, #4]
 8005cb8:	4622      	mov	r2, r4
 8005cba:	6021      	str	r1, [r4, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005cbc:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8005cc0:	e00c      	b.n	8005cdc <main+0xac>
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	40007000 	.word	0x40007000
 8005ccc:	20001bbc 	.word	0x20001bbc
 8005cd0:	08008b2c 	.word	0x08008b2c
 8005cd4:	40026010 	.word	0x40026010
 8005cd8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8005cdc:	6001      	str	r1, [r0, #0]
    dma.streams[i].func = NULL;
 8005cde:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005ce0:	429c      	cmp	r4, r3
    dma.streams[i].func = NULL;
 8005ce2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005ce4:	f102 0208 	add.w	r2, r2, #8
 8005ce8:	d1f6      	bne.n	8005cd8 <main+0xa8>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8005cea:	4cc4      	ldr	r4, [pc, #784]	; (8005ffc <main+0x3cc>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8005cec:	48c4      	ldr	r0, [pc, #784]	; (8006000 <main+0x3d0>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005cee:	4ac5      	ldr	r2, [pc, #788]	; (8006004 <main+0x3d4>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf4:	60a3      	str	r3, [r4, #8]
 8005cf6:	2160      	movs	r1, #96	; 0x60
  DMA1->HIFCR = 0xFFFFFFFFU;
 8005cf8:	60e3      	str	r3, [r4, #12]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005cfa:	2540      	movs	r5, #64	; 0x40
  DMA2->LIFCR = 0xFFFFFFFFU;
 8005cfc:	6083      	str	r3, [r0, #8]
 8005cfe:	2480      	movs	r4, #128	; 0x80
  DMA2->HIFCR = 0xFFFFFFFFU;
 8005d00:	60c3      	str	r3, [r0, #12]
 8005d02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d06:	f44f 7300 	mov.w	r3, #512	; 0x200
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005d0a:	f882 1306 	strb.w	r1, [r2, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005d0e:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005d12:	6015      	str	r5, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005d14:	f882 1307 	strb.w	r1, [r2, #775]	; 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005d18:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005d1c:	6014      	str	r4, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005d1e:	f882 1308 	strb.w	r1, [r2, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005d22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005d26:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005d2a:	6010      	str	r0, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005d2c:	f882 1309 	strb.w	r1, [r2, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005d30:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005d34:	6013      	str	r3, [r2, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005d36:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005d3a:	f882 130a 	strb.w	r1, [r2, #778]	; 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005d3e:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005d42:	6014      	str	r4, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005d44:	f882 1317 	strb.w	r1, [r2, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005d48:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005d4c:	6013      	str	r3, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005d4e:	4bae      	ldr	r3, [pc, #696]	; (8006008 <main+0x3d8>)
 8005d50:	f882 1328 	strb.w	r1, [r2, #808]	; 0x328
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005d54:	4619      	mov	r1, r3
 8005d56:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005d5a:	3180      	adds	r1, #128	; 0x80
 8005d5c:	6050      	str	r0, [r2, #4]
    _pal_init_event(i);
 8005d5e:	2700      	movs	r7, #0
 8005d60:	e9c3 7700 	strd	r7, r7, [r3]
  for (i = 0; i < 16; i++) {
 8005d64:	3308      	adds	r3, #8
 8005d66:	4299      	cmp	r1, r3
 8005d68:	d1fa      	bne.n	8005d60 <main+0x130>
  i2cp->state  = I2C_STOP;
 8005d6a:	f8df b320 	ldr.w	fp, [pc, #800]	; 800608c <main+0x45c>
  gptp->state  = GPT_STOP;
 8005d6e:	48a7      	ldr	r0, [pc, #668]	; (800600c <main+0x3dc>)
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8005d70:	f8df a31c 	ldr.w	sl, [pc, #796]	; 8006090 <main+0x460>
  I2CD1.i2c    = I2C1;
 8005d74:	4da6      	ldr	r5, [pc, #664]	; (8006010 <main+0x3e0>)
  pwmp->state    = PWM_STOP;
 8005d76:	4aa7      	ldr	r2, [pc, #668]	; (8006014 <main+0x3e4>)
 8005d78:	4ba7      	ldr	r3, [pc, #668]	; (8006018 <main+0x3e8>)
 8005d7a:	4ea8      	ldr	r6, [pc, #672]	; (800601c <main+0x3ec>)
  GPTD4.tim = STM32_TIM4;
 8005d7c:	f8df e314 	ldr.w	lr, [pc, #788]	; 8006094 <main+0x464>
 8005d80:	f8cb 5034 	str.w	r5, [fp, #52]	; 0x34
  tqp->next = (thread_t *)tqp;
 8005d84:	f10b 090c 	add.w	r9, fp, #12
 8005d88:	2501      	movs	r5, #1
  PWMD3.tim = STM32_TIM3;
 8005d8a:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8006098 <main+0x468>
 8005d8e:	7005      	strb	r5, [r0, #0]
  gptp->config = NULL;
 8005d90:	6047      	str	r7, [r0, #4]
 8005d92:	f8c0 e00c 	str.w	lr, [r0, #12]
  tqp->prev = (thread_t *)tqp;
 8005d96:	e9cb 9903 	strd	r9, r9, [fp, #12]
  PWMD2.tim = STM32_TIM2;
 8005d9a:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8005d9e:	f04f 0904 	mov.w	r9, #4
 8005da2:	4650      	mov	r0, sl
  PWMD1.tim = STM32_TIM1;
 8005da4:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 800609c <main+0x46c>
 8005da8:	499d      	ldr	r1, [pc, #628]	; (8006020 <main+0x3f0>)
  mp->owner = NULL;
 8005daa:	f8cb 7014 	str.w	r7, [fp, #20]
 8005dae:	7015      	strb	r5, [r2, #0]
  pwmp->config   = NULL;
 8005db0:	6057      	str	r7, [r2, #4]
  pwmp->enabled  = 0;
 8005db2:	60d7      	str	r7, [r2, #12]
 8005db4:	f8c2 8018 	str.w	r8, [r2, #24]
  PWMD2.tim = STM32_TIM2;
 8005db8:	f8c3 e018 	str.w	lr, [r3, #24]
  PWMD3.tim = STM32_TIM3;
 8005dbc:	f8c6 c018 	str.w	ip, [r6, #24]
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 8005dc0:	4c98      	ldr	r4, [pc, #608]	; (8006024 <main+0x3f4>)
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8005dc2:	f882 9010 	strb.w	r9, [r2, #16]
  pwmp->state    = PWM_STOP;
 8005dc6:	701d      	strb	r5, [r3, #0]
  pwmp->config   = NULL;
 8005dc8:	605f      	str	r7, [r3, #4]
  pwmp->enabled  = 0;
 8005dca:	60df      	str	r7, [r3, #12]
  I2CD1.dmatx  = NULL;
 8005dcc:	e9cb 770b 	strd	r7, r7, [fp, #44]	; 0x2c
  i2cp->config = NULL;
 8005dd0:	f8cb 7004 	str.w	r7, [fp, #4]
  I2CD1.thread = NULL;
 8005dd4:	f8cb 701c 	str.w	r7, [fp, #28]
  i2cp->state  = I2C_STOP;
 8005dd8:	f88b 5000 	strb.w	r5, [fp]
  PWMD2.channels = STM32_TIM2_CHANNELS;
 8005ddc:	f883 9010 	strb.w	r9, [r3, #16]
  pwmp->state    = PWM_STOP;
 8005de0:	7035      	strb	r5, [r6, #0]
  pwmp->config   = NULL;
 8005de2:	6077      	str	r7, [r6, #4]
  pwmp->enabled  = 0;
 8005de4:	60f7      	str	r7, [r6, #12]
  PWMD3.channels = STM32_TIM3_CHANNELS;
 8005de6:	f886 9010 	strb.w	r9, [r6, #16]
  sdObjectInit(&SD1, NULL, notify1);
 8005dea:	f7fa fe91 	bl	8000b10 <sdObjectInit.constprop.0>
  SD1.usart = USART1;
 8005dee:	4b8e      	ldr	r3, [pc, #568]	; (8006028 <main+0x3f8>)
  sdObjectInit(&SD2, NULL, notify2);
 8005df0:	498e      	ldr	r1, [pc, #568]	; (800602c <main+0x3fc>)
 8005df2:	488f      	ldr	r0, [pc, #572]	; (8006030 <main+0x400>)
  SD1.usart = USART1;
 8005df4:	f8ca 3254 	str.w	r3, [sl, #596]	; 0x254
  sdObjectInit(&SD2, NULL, notify2);
 8005df8:	f7fa fe8a 	bl	8000b10 <sdObjectInit.constprop.0>
  SD2.usart = USART2;
 8005dfc:	4a8c      	ldr	r2, [pc, #560]	; (8006030 <main+0x400>)
  spip->state = SPI_STOP;
 8005dfe:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 80060a0 <main+0x470>
  usbp->state        = USB_STOP;
 8005e02:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 80060a4 <main+0x474>
 8005e06:	4b8b      	ldr	r3, [pc, #556]	; (8006034 <main+0x404>)
  sdObjectInit(&SD6, NULL, notify6);
 8005e08:	498b      	ldr	r1, [pc, #556]	; (8006038 <main+0x408>)
  SD2.usart = USART2;
 8005e0a:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
  sdObjectInit(&SD6, NULL, notify6);
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f7fa fe7e 	bl	8000b10 <sdObjectInit.constprop.0>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8005e14:	4a89      	ldr	r2, [pc, #548]	; (800603c <main+0x40c>)
 8005e16:	f88a 5000 	strb.w	r5, [sl]
 8005e1a:	f888 5000 	strb.w	r5, [r8]
 8005e1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  SD6.usart = USART6;
 8005e20:	4987      	ldr	r1, [pc, #540]	; (8006040 <main+0x410>)
 8005e22:	f8c4 1254 	str.w	r1, [r4, #596]	; 0x254
 8005e26:	f043 0308 	orr.w	r3, r3, #8
 8005e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e2c:	6e11      	ldr	r1, [r2, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005e2e:	4885      	ldr	r0, [pc, #532]	; (8006044 <main+0x414>)
  spip->config = NULL;
 8005e30:	f8ca 7004 	str.w	r7, [sl, #4]
  ST_ENABLE_CLOCK();
 8005e34:	f041 0108 	orr.w	r1, r1, #8
 8005e38:	6611      	str	r1, [r2, #96]	; 0x60
  SPID1.spi       = SPI1;
 8005e3a:	4b83      	ldr	r3, [pc, #524]	; (8006048 <main+0x418>)
 8005e3c:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 8005e3e:	6882      	ldr	r2, [r0, #8]
 8005e40:	f8ca 301c 	str.w	r3, [sl, #28]
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8005e44:	4b81      	ldr	r3, [pc, #516]	; (800604c <main+0x41c>)
 8005e46:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8005e4a:	3330      	adds	r3, #48	; 0x30
 8005e4c:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
  USBD1.otg       = OTG_FS;
 8005e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e54:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
 8005e58:	f042 0208 	orr.w	r2, r2, #8
  USBD1.otgparams = &fsparams;
 8005e5c:	4b7c      	ldr	r3, [pc, #496]	; (8006050 <main+0x420>)
  spip->thread = NULL;
 8005e5e:	f8ca 7008 	str.w	r7, [sl, #8]
  SPID1.dmatx     = NULL;
 8005e62:	e9ca 7708 	strd	r7, r7, [sl, #32]
  usbp->transmitting = 0;
 8005e66:	e9c8 7701 	strd	r7, r7, [r8, #4]
 8005e6a:	f8ca 7014 	str.w	r7, [sl, #20]
    usbp->in_params[i]  = NULL;
 8005e6e:	f8c8 701c 	str.w	r7, [r8, #28]
    usbp->out_params[i] = NULL;
 8005e72:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 8005e76:	f8c8 7020 	str.w	r7, [r8, #32]
    usbp->out_params[i] = NULL;
 8005e7a:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 8005e7e:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8005e82:	f8c8 7030 	str.w	r7, [r8, #48]	; 0x30
 8005e86:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005e8a:	4b72      	ldr	r3, [pc, #456]	; (8006054 <main+0x424>)
  ST_ENABLE_STOP();
 8005e8c:	6082      	str	r2, [r0, #8]
  tqp->next = (thread_t *)tqp;
 8005e8e:	f10a 000c 	add.w	r0, sl, #12
 8005e92:	4c71      	ldr	r4, [pc, #452]	; (8006058 <main+0x428>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005e94:	4a5b      	ldr	r2, [pc, #364]	; (8006004 <main+0x3d4>)
 8005e96:	4971      	ldr	r1, [pc, #452]	; (800605c <main+0x42c>)
  ch_memcore.basemem = __heap_base__;
 8005e98:	f8df c20c 	ldr.w	ip, [pc, #524]	; 80060a8 <main+0x478>
  tqp->prev = (thread_t *)tqp;
 8005e9c:	e9ca 0003 	strd	r0, r0, [sl, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005ea0:	f242 00cf 	movw	r0, #8399	; 0x20cf
 8005ea4:	6298      	str	r0, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eaa:	62d8      	str	r0, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8005eac:	619f      	str	r7, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8005eae:	635f      	str	r7, [r3, #52]	; 0x34
 8005eb0:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8005eb2:	60df      	str	r7, [r3, #12]
  ch.rlist.prio = NOPRIO;
 8005eb4:	60a7      	str	r7, [r4, #8]
  STM32_ST_TIM->CR2    = 0;
 8005eb6:	605f      	str	r7, [r3, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8005eb8:	60e4      	str	r4, [r4, #12]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8005eba:	615d      	str	r5, [r3, #20]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8005ebc:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8005ebe:	601d      	str	r5, [r3, #0]
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	f882 3332 	strb.w	r3, [r2, #818]	; 0x332
  H_NEXT(&default_heap.header) = NULL;
 8005ec6:	4d66      	ldr	r5, [pc, #408]	; (8006060 <main+0x430>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005ec8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ecc:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  ch.vtlist.delta = (sysinterval_t)-1;
 8005ed0:	6220      	str	r0, [r4, #32]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005ed2:	6053      	str	r3, [r2, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8005ed4:	4b63      	ldr	r3, [pc, #396]	; (8006064 <main+0x434>)
 8005ed6:	602b      	str	r3, [r5, #0]
  tqp->next = (thread_t *)tqp;
 8005ed8:	f105 030c 	add.w	r3, r5, #12
  tqp->prev = (thread_t *)tqp;
 8005edc:	e9c5 3303 	strd	r3, r3, [r5, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8005ee0:	f101 0310 	add.w	r3, r1, #16
 8005ee4:	610b      	str	r3, [r1, #16]
  mp->object_size = size;
 8005ee6:	2314      	movs	r3, #20
 8005ee8:	618b      	str	r3, [r1, #24]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8005eea:	f104 0318 	add.w	r3, r4, #24
  H_PAGES(&default_heap.header) = 0;
 8005eee:	e9c5 7701 	strd	r7, r7, [r5, #4]
 8005ef2:	616f      	str	r7, [r5, #20]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8005ef4:	e9c4 3306 	strd	r3, r3, [r4, #24]
  mp->provider = provider;
 8005ef8:	4d5b      	ldr	r5, [pc, #364]	; (8006068 <main+0x438>)
 8005efa:	4a5c      	ldr	r2, [pc, #368]	; (800606c <main+0x43c>)
  ch_memcore.topmem  = __heap_end__;
 8005efc:	4b5c      	ldr	r3, [pc, #368]	; (8006070 <main+0x440>)
  ch_memcore.basemem = __heap_base__;
 8005efe:	f8cc 2000 	str.w	r2, [ip]
  ch_memcore.topmem  = __heap_end__;
 8005f02:	f8cc 3004 	str.w	r3, [ip, #4]
  ch.vtlist.lasttime = (systime_t)0;
 8005f06:	6267      	str	r7, [r4, #36]	; 0x24
 8005f08:	608f      	str	r7, [r1, #8]
  mp->next = NULL;
 8005f0a:	614f      	str	r7, [r1, #20]
  tmp->cumulative = (rttime_t)0;
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e9c1 1100 	strd	r1, r1, [r1]
  tqp->next = (thread_t *)tqp;
 8005f14:	6024      	str	r4, [r4, #0]
  mp->align = align;
 8005f16:	f8c1 901c 	str.w	r9, [r1, #28]
 8005f1a:	f101 0c3c 	add.w	ip, r1, #60	; 0x3c
  mp->provider = provider;
 8005f1e:	620d      	str	r5, [r1, #32]
  tmp->last       = (rtcnt_t)0;
 8005f20:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
  mp->next = NULL;
 8005f24:	62cf      	str	r7, [r1, #44]	; 0x2c
  ch.tm.offset = (rtcnt_t)0;
 8005f26:	6727      	str	r7, [r4, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 8005f28:	970b      	str	r7, [sp, #44]	; 0x2c
 8005f2a:	f101 0740 	add.w	r7, r1, #64	; 0x40
  tmp->cumulative = (rttime_t)0;
 8005f2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005f32:	e9c1 c70f 	strd	ip, r7, [r1, #60]	; 0x3c
 8005f36:	f101 0224 	add.w	r2, r1, #36	; 0x24
 8005f3a:	f101 0328 	add.w	r3, r1, #40	; 0x28
  tmp->best       = (rtcnt_t)-1;
 8005f3e:	9008      	str	r0, [sp, #32]
 8005f40:	624a      	str	r2, [r1, #36]	; 0x24
  mp->object_size = size;
 8005f42:	201c      	movs	r0, #28
 8005f44:	f101 0244 	add.w	r2, r1, #68	; 0x44
  mp->provider = provider;
 8005f48:	e9c1 950d 	strd	r9, r5, [r1, #52]	; 0x34
 8005f4c:	628b      	str	r3, [r1, #40]	; 0x28
  tmp->cumulative = (rttime_t)0;
 8005f4e:	464d      	mov	r5, r9
  mp->object_size = size;
 8005f50:	6308      	str	r0, [r1, #48]	; 0x30
 8005f52:	644a      	str	r2, [r1, #68]	; 0x44
    chTMStartMeasurementX(&tm);
 8005f54:	a808      	add	r0, sp, #32
 8005f56:	f7fb f823 	bl	8000fa0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8005f5a:	a808      	add	r0, sp, #32
 8005f5c:	f7fa fff8 	bl	8000f50 <chTMStopMeasurementX>
  } while (i > 0U);
 8005f60:	3d01      	subs	r5, #1
 8005f62:	d1f7      	bne.n	8005f54 <main+0x324>
  REG_INSERT(tp);
 8005f64:	4b43      	ldr	r3, [pc, #268]	; (8006074 <main+0x444>)
 8005f66:	6920      	ldr	r0, [r4, #16]
  ch.tm.offset = tm.best;
 8005f68:	9908      	ldr	r1, [sp, #32]
 8005f6a:	6721      	str	r1, [r4, #112]	; 0x70
  tp->prio      = prio;
 8005f6c:	2280      	movs	r2, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8005f6e:	2101      	movs	r1, #1
  tp->prio      = prio;
 8005f70:	6362      	str	r2, [r4, #52]	; 0x34
  tp->realprio  = prio;
 8005f72:	66a2      	str	r2, [r4, #104]	; 0x68
  tp->name      = name;
 8005f74:	4f40      	ldr	r7, [pc, #256]	; (8006078 <main+0x448>)
 8005f76:	6467      	str	r7, [r4, #68]	; 0x44
 8005f78:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tlp->next = (thread_t *)tlp;
 8005f7c:	f103 0c28 	add.w	ip, r3, #40	; 0x28
  tp->epending  = (eventmask_t)0;
 8005f80:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
  REG_INSERT(tp);
 8005f84:	e9c4 400e 	strd	r4, r0, [r4, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005f88:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  tp->refs      = (trefs_t)1;
 8005f8c:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 8005f90:	2720      	movs	r7, #32
  REG_INSERT(tp);
 8005f92:	60c3      	str	r3, [r0, #12]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8005f94:	e9c4 3304 	strd	r3, r3, [r4, #16]
  tqp->next = (thread_t *)tqp;
 8005f98:	e9c4 c215 	strd	ip, r2, [r4, #84]	; 0x54
  currp->state = CH_STATE_CURRENT;
 8005f9c:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
  currp->wabase = NULL;
 8005fa0:	64a5      	str	r5, [r4, #72]	; 0x48
  tqp->prev = (thread_t *)tqp;
 8005fa2:	65e2      	str	r2, [r4, #92]	; 0x5c
 8005fa4:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 8005fa8:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005faa:	4b34      	ldr	r3, [pc, #208]	; (800607c <main+0x44c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005fac:	4a34      	ldr	r2, [pc, #208]	; (8006080 <main+0x450>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fae:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fb0:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8005fb4:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005fb6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005fc4:	492f      	ldr	r1, [pc, #188]	; (8006084 <main+0x454>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005fc6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005fca:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005fcc:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fce:	2010      	movs	r0, #16
 8005fd0:	f042 0201 	orr.w	r2, r2, #1
 8005fd4:	600a      	str	r2, [r1, #0]
 8005fd6:	77d8      	strb	r0, [r3, #31]
 8005fd8:	f883 7022 	strb.w	r7, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005fdc:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8005fe0:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005fe2:	f387 8811 	msr	BASEPRI, r7
  tp = chThdCreateSuspendedI(tdp);
 8005fe6:	4828      	ldr	r0, [pc, #160]	; (8006088 <main+0x458>)
 8005fe8:	f7fa ffe2 	bl	8000fb0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8005fec:	f7fc f818 	bl	8002020 <chSchWakeupS.constprop.0>
 8005ff0:	f385 8811 	msr	BASEPRI, r5
 8005ff4:	f387 8811 	msr	BASEPRI, r7
 8005ff8:	e058      	b.n	80060ac <main+0x47c>
 8005ffa:	bf00      	nop
 8005ffc:	40026000 	.word	0x40026000
 8006000:	40026400 	.word	0x40026400
 8006004:	e000e100 	.word	0xe000e100
 8006008:	2000195c 	.word	0x2000195c
 800600c:	20000c8c 	.word	0x20000c8c
 8006010:	40005400 	.word	0x40005400
 8006014:	20000cd4 	.word	0x20000cd4
 8006018:	20000cf0 	.word	0x20000cf0
 800601c:	20000d0c 	.word	0x20000d0c
 8006020:	08000c91 	.word	0x08000c91
 8006024:	200011e0 	.word	0x200011e0
 8006028:	40011000 	.word	0x40011000
 800602c:	08000ca1 	.word	0x08000ca1
 8006030:	20000f84 	.word	0x20000f84
 8006034:	40004400 	.word	0x40004400
 8006038:	08000cb1 	.word	0x08000cb1
 800603c:	40023800 	.word	0x40023800
 8006040:	40011400 	.word	0x40011400
 8006044:	e0042000 	.word	0xe0042000
 8006048:	40013000 	.word	0x40013000
 800604c:	06010016 	.word	0x06010016
 8006050:	08008cc4 	.word	0x08008cc4
 8006054:	40000c00 	.word	0x40000c00
 8006058:	200019e0 	.word	0x200019e0
 800605c:	20001a54 	.word	0x20001a54
 8006060:	20001ba0 	.word	0x20001ba0
 8006064:	08000c51 	.word	0x08000c51
 8006068:	08000f21 	.word	0x08000f21
 800606c:	200061b0 	.word	0x200061b0
 8006070:	20010000 	.word	0x20010000
 8006074:	20001a0c 	.word	0x20001a0c
 8006078:	08008be4 	.word	0x08008be4
 800607c:	e000ed00 	.word	0xe000ed00
 8006080:	05fa0300 	.word	0x05fa0300
 8006084:	e0001000 	.word	0xe0001000
 8006088:	08008cf0 	.word	0x08008cf0
 800608c:	20000c9c 	.word	0x20000c9c
 8006090:	20000d28 	.word	0x20000d28
 8006094:	40000800 	.word	0x40000800
 8006098:	40000400 	.word	0x40000400
 800609c:	40010000 	.word	0x40010000
 80060a0:	200018cc 	.word	0x200018cc
 80060a4:	200018fc 	.word	0x200018fc
 80060a8:	20001b78 	.word	0x20001b78
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80060ac:	4bd4      	ldr	r3, [pc, #848]	; (8006400 <main+0x7d0>)
 80060ae:	7a1b      	ldrb	r3, [r3, #8]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d111      	bne.n	80060d8 <main+0x4a8>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 80060b4:	4bd3      	ldr	r3, [pc, #844]	; (8006404 <main+0x7d4>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80060b6:	4ad4      	ldr	r2, [pc, #848]	; (8006408 <main+0x7d8>)
 80060b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060ba:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80060be:	6419      	str	r1, [r3, #64]	; 0x40
 80060c0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80060c2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80060c6:	6619      	str	r1, [r3, #96]	; 0x60
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	21c0      	movs	r1, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80060cc:	2340      	movs	r3, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80060ce:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80060d2:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80060d6:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 80060d8:	4bc9      	ldr	r3, [pc, #804]	; (8006400 <main+0x7d0>)
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80060da:	4acc      	ldr	r2, [pc, #816]	; (800640c <main+0x7dc>)
  USART_TypeDef *u = sdp->usart;
 80060dc:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80060e0:	4293      	cmp	r3, r2
 80060e2:	f000 851a 	beq.w	8006b1a <main+0xeea>
 80060e6:	49ca      	ldr	r1, [pc, #808]	; (8006410 <main+0x7e0>)
    fck = STM32_PCLK2 / config->speed;
 80060e8:	f240 22d9 	movw	r2, #729	; 0x2d9
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf18      	it	ne
 80060f0:	f44f 72b6 	movne.w	r2, #364	; 0x16c
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80060f4:	2040      	movs	r0, #64	; 0x40
  u->BRR = fck;
 80060f6:	609a      	str	r2, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80060f8:	f242 112c 	movw	r1, #8492	; 0x212c
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80060fc:	6118      	str	r0, [r3, #16]
  u->SR = 0;
 80060fe:	2700      	movs	r7, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8006100:	2001      	movs	r0, #1
 8006102:	6158      	str	r0, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8006104:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 8006106:	601f      	str	r7, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8006108:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4bbc      	ldr	r3, [pc, #752]	; (8006400 <main+0x7d0>)
 800610e:	22ff      	movs	r2, #255	; 0xff
  sdp->state = SD_READY;
 8006110:	f04f 0902 	mov.w	r9, #2
 8006114:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 8006118:	f883 9008 	strb.w	r9, [r3, #8]
 800611c:	f387 8811 	msr	BASEPRI, r7
      0,
      0
  };

  sdStart(&SHELLPORT, &serial_config6);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8006120:	48bc      	ldr	r0, [pc, #752]	; (8006414 <main+0x7e4>)
 8006122:	f240 3282 	movw	r2, #898	; 0x382
 8006126:	2104      	movs	r1, #4
 8006128:	f7fb fc32 	bl	8001990 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 800612c:	48b9      	ldr	r0, [pc, #740]	; (8006414 <main+0x7e4>)
 800612e:	f240 3282 	movw	r2, #898	; 0x382
 8006132:	2108      	movs	r1, #8
 8006134:	f7fb fc2c 	bl	8001990 <_pal_lld_setgroupmode>

  chprintf(dbg, "\r\nUnicomp RAMROM: %i.%i \r\nSystem started. (Shell)\r\n", VMAJOR, VMINOR);
 8006138:	463b      	mov	r3, r7
 800613a:	49b7      	ldr	r1, [pc, #732]	; (8006418 <main+0x7e8>)
 800613c:	48b0      	ldr	r0, [pc, #704]	; (8006400 <main+0x7d0>)
 800613e:	221e      	movs	r2, #30
 8006140:	f7fc fed6 	bl	8002ef0 <chprintf>
  sdup->vmt = &vmt;
 8006144:	4bb5      	ldr	r3, [pc, #724]	; (800641c <main+0x7ec>)
 8006146:	48b6      	ldr	r0, [pc, #728]	; (8006420 <main+0x7f0>)
  ibqp->notify    = infy;
 8006148:	f8df c304 	ldr.w	ip, [pc, #772]	; 8006450 <main+0x820>
  obqp->notify    = onfy;
 800614c:	49b5      	ldr	r1, [pc, #724]	; (8006424 <main+0x7f4>)
  ibqp->notify    = infy;
 800614e:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
 8006152:	461a      	mov	r2, r3
  sdup->state = SDU_STOP;
 8006154:	f04f 0e01 	mov.w	lr, #1
  sdup->vmt = &vmt;
 8006158:	f842 0b04 	str.w	r0, [r2], #4
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800615c:	f203 408c 	addw	r0, r3, #1164	; 0x48c
  ibqp->brdptr    = bp;
 8006160:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
  sdup->state = SDU_STOP;
 8006164:	f883 e008 	strb.w	lr, [r3, #8]
  ibqp->suspended = suspended;
 8006168:	f883 e014 	strb.w	lr, [r3, #20]
  obqp->suspended = suspended;
 800616c:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8006170:	65d8      	str	r0, [r3, #92]	; 0x5c
  tqp->next = (thread_t *)tqp;
 8006172:	f103 0e0c 	add.w	lr, r3, #12
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8006176:	f503 7021 	add.w	r0, r3, #644	; 0x284
  obqp->notify    = onfy;
 800617a:	6759      	str	r1, [r3, #116]	; 0x74
  esp->next = (event_listener_t *)esp;
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	f103 0144 	add.w	r1, r3, #68	; 0x44
  ibqp->bsize     = size + sizeof (size_t);
 8006182:	f44f 7282 	mov.w	r2, #260	; 0x104
  tqp->prev = (thread_t *)tqp;
 8006186:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  ibqp->bcounter  = 0;
 800618a:	619f      	str	r7, [r3, #24]
  ibqp->top       = NULL;
 800618c:	e9c3 770d 	strd	r7, r7, [r3, #52]	; 0x34
  obqp->top       = NULL;
 8006190:	e9c3 771b 	strd	r7, r7, [r3, #108]	; 0x6c
 8006194:	e9c3 ee03 	strd	lr, lr, [r3, #12]
  ibqp->bwrptr    = bp;
 8006198:	e9c3 cc07 	strd	ip, ip, [r3, #28]
  obqp->bwrptr    = bp;
 800619c:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  ibqp->bn        = n;
 80061a0:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
  obqp->bcounter  = n;
 80061a4:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
  obqp->bn        = n;
 80061a8:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
  ibqp->link      = link;
 80061ac:	641b      	str	r3, [r3, #64]	; 0x40
  obqp->link      = link;
 80061ae:	679b      	str	r3, [r3, #120]	; 0x78
  ibqp->buffers   = bp;
 80061b0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80061b4:	6258      	str	r0, [r3, #36]	; 0x24
  obqp->buffers   = bp;
 80061b6:	6698      	str	r0, [r3, #104]	; 0x68
  ibqp->bsize     = size + sizeof (size_t);
 80061b8:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 80061ba:	661a      	str	r2, [r3, #96]	; 0x60
 80061bc:	2120      	movs	r1, #32
 80061be:	f381 8811 	msr	BASEPRI, r1
  sdup->config = config;
 80061c2:	4a99      	ldr	r2, [pc, #612]	; (8006428 <main+0x7f8>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80061c4:	f8c8 3020 	str.w	r3, [r8, #32]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80061c8:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
    usbp->in_params[config->int_in - 1U]  = sdup;
 80061cc:	f8c8 301c 	str.w	r3, [r8, #28]
  sdup->state = SDU_READY;
 80061d0:	f883 9008 	strb.w	r9, [r3, #8]
  sdup->config = config;
 80061d4:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
 80061d8:	f387 8811 	msr	BASEPRI, r7
  sduObjectInit(&OSTRICHPORT);
  sduStart(&OSTRICHPORT, &serusbcfg1);
//  palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
//  palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));

  usbDisconnectBus(serusbcfg1.usbp);
 80061dc:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80061e0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80061e2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80061e6:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 80061e8:	f643 2098 	movw	r0, #15000	; 0x3a98
 80061ec:	f7fc fbb0 	bl	8002950 <chThdSleep>
 80061f0:	2120      	movs	r1, #32
 80061f2:	f381 8811 	msr	BASEPRI, r1
  if (usbp->state == USB_STOP) {
 80061f6:	f898 3000 	ldrb.w	r3, [r8]
  usbp->config = config;
 80061fa:	4a8c      	ldr	r2, [pc, #560]	; (800642c <main+0x7fc>)
 80061fc:	f8c8 2004 	str.w	r2, [r8, #4]
 8006200:	2b01      	cmp	r3, #1
    usbp->epc[i] = NULL;
 8006202:	e9c8 7703 	strd	r7, r7, [r8, #12]
 8006206:	e9c8 7705 	strd	r7, r7, [r8, #20]
 800620a:	f000 83f5 	beq.w	80069f8 <main+0xdc8>
  usbp->state = USB_READY;
 800620e:	2702      	movs	r7, #2
 8006210:	f888 7000 	strb.w	r7, [r8]
 8006214:	f04f 0900 	mov.w	r9, #0
 8006218:	f389 8811 	msr	BASEPRI, r9
  usbStart(serusbcfg1.usbp, &usbcfg);
  usbConnectBus(serusbcfg1.usbp);
 800621c:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
  vtp->func = NULL;
 8006220:	4983      	ldr	r1, [pc, #524]	; (8006430 <main+0x800>)
 8006222:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006224:	f8c1 900c 	str.w	r9, [r1, #12]
 8006228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800622c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Initializing the virtual timer. */
  chVTObjectInit(&vt);
  /* Setting the button line as digital input without pull resistors. */
  palSetLineMode(EXTRST, PAL_MODE_INPUT);
 800622e:	4879      	ldr	r0, [pc, #484]	; (8006414 <main+0x7e4>)
 8006230:	464a      	mov	r2, r9
 8006232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006236:	f7fb fbab 	bl	8001990 <_pal_lld_setgroupmode>
 800623a:	2120      	movs	r1, #32
 800623c:	f381 8811 	msr	BASEPRI, r1
  /* Enabling the event and associating the callback. */
  palEnableLineEvent(EXTRST, PAL_EVENT_MODE_FALLING_EDGE);
 8006240:	4638      	mov	r0, r7
 8006242:	f7fa fc95 	bl	8000b70 <_pal_lld_enablepadevent.constprop.0>
 8006246:	f389 8811 	msr	BASEPRI, r9
 800624a:	f381 8811 	msr	BASEPRI, r1
  pep->cb = cb;
 800624e:	4b79      	ldr	r3, [pc, #484]	; (8006434 <main+0x804>)
  pep->arg = arg;
 8006250:	4a79      	ldr	r2, [pc, #484]	; (8006438 <main+0x808>)
  pep->cb = cb;
 8006252:	e9c2 3914 	strd	r3, r9, [r2, #80]	; 0x50
 8006256:	f389 8811 	msr	BASEPRI, r9
 800625a:	f381 8811 	msr	BASEPRI, r1
  pwmp->config = config;
 800625e:	4a77      	ldr	r2, [pc, #476]	; (800643c <main+0x80c>)
  if (pwmp->state == PWM_STOP) {
 8006260:	7833      	ldrb	r3, [r6, #0]
  pwmp->period = config->period;
 8006262:	6857      	ldr	r7, [r2, #4]
 8006264:	2b01      	cmp	r3, #1
 8006266:	e9c6 2701 	strd	r2, r7, [r6, #4]
 800626a:	f000 839e 	beq.w	80069aa <main+0xd7a>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 800626e:	69b3      	ldr	r3, [r6, #24]
 8006270:	f8c3 9000 	str.w	r9, [r3]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8006274:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8006278:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 800627c:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8006280:	f8c3 9040 	str.w	r9, [r3, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8006284:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8006288:	68d1      	ldr	r1, [r2, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800628a:	6973      	ldr	r3, [r6, #20]
 800628c:	6810      	ldr	r0, [r2, #0]
 800628e:	fbb3 f0f0 	udiv	r0, r3, r0
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8006292:	f001 010f 	and.w	r1, r1, #15
  pwmp->tim->PSC  = psc;
 8006296:	69b3      	ldr	r3, [r6, #24]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8006298:	f8d2 c02c 	ldr.w	ip, [r2, #44]	; 0x2c
  pwmp->tim->ARR  = pwmp->period - 1;
 800629c:	3f01      	subs	r7, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800629e:	3801      	subs	r0, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80062a0:	2901      	cmp	r1, #1
  pwmp->tim->PSC  = psc;
 80062a2:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 80062a4:	62df      	str	r7, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 80062a6:	f8c3 c004 	str.w	ip, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80062aa:	f000 834b 	beq.w	8006944 <main+0xd14>
 80062ae:	2902      	cmp	r1, #2
 80062b0:	f000 8347 	beq.w	8006942 <main+0xd12>
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 80062b4:	6951      	ldr	r1, [r2, #20]
 80062b6:	f001 010f 	and.w	r1, r1, #15
 80062ba:	2901      	cmp	r1, #1
 80062bc:	f000 833e 	beq.w	800693c <main+0xd0c>
 80062c0:	2902      	cmp	r1, #2
 80062c2:	f000 8339 	beq.w	8006938 <main+0xd08>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 80062c6:	69d1      	ldr	r1, [r2, #28]
 80062c8:	f001 010f 	and.w	r1, r1, #15
 80062cc:	2901      	cmp	r1, #1
 80062ce:	f000 8330 	beq.w	8006932 <main+0xd02>
 80062d2:	2902      	cmp	r1, #2
 80062d4:	f000 832b 	beq.w	800692e <main+0xcfe>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 80062d8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80062da:	f001 010f 	and.w	r1, r1, #15
 80062de:	2901      	cmp	r1, #1
 80062e0:	f000 8322 	beq.w	8006928 <main+0xcf8>
 80062e4:	2902      	cmp	r1, #2
 80062e6:	f000 831d 	beq.w	8006924 <main+0xcf4>
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80062ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 80062ec:	621d      	str	r5, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80062ee:	2001      	movs	r0, #1
 80062f0:	6158      	str	r0, [r3, #20]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80062f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80062f6:	2000      	movs	r0, #0
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 80062f8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80062fc:	2185      	movs	r1, #133	; 0x85
  pwmp->state = PWM_READY;
 80062fe:	f04f 0802 	mov.w	r8, #2
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8006302:	6118      	str	r0, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8006304:	60da      	str	r2, [r3, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8006306:	f8c3 9044 	str.w	r9, [r3, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 800630a:	6019      	str	r1, [r3, #0]
  pwmp->enabled = 0;
 800630c:	60f0      	str	r0, [r6, #12]
  pwmp->state = PWM_READY;
 800630e:	f886 8000 	strb.w	r8, [r6]
 8006312:	f380 8811 	msr	BASEPRI, r0

void mypwmInit(void){
  pwmStart(&PWMD3, &pwmcfg);
  //pwmEnablePeriodicNotification(&PWMD1);
  palSetLineMode(CLK1, PAL_MODE_ALTERNATE(2) | PAL_STM32_OSPEED_HIGHEST);
 8006316:	4d4a      	ldr	r5, [pc, #296]	; (8006440 <main+0x810>)
 8006318:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800631c:	4628      	mov	r0, r5
 800631e:	2110      	movs	r1, #16
 8006320:	f7fb fb36 	bl	8001990 <_pal_lld_setgroupmode>
  pwmEnableChannel(&PWMD3, 0,  PWM_PERCENTAGE_TO_WIDTH(&PWMD3, pw4*100));
 8006324:	4b47      	ldr	r3, [pc, #284]	; (8006444 <main+0x814>)
 8006326:	68b2      	ldr	r2, [r6, #8]
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	4947      	ldr	r1, [pc, #284]	; (8006448 <main+0x818>)
 800632c:	fb02 f203 	mul.w	r2, r2, r3
 8006330:	2364      	movs	r3, #100	; 0x64
 8006332:	fb03 f302 	mul.w	r3, r3, r2
 8006336:	fba1 2303 	umull	r2, r3, r1, r3
 800633a:	0b5b      	lsrs	r3, r3, #13
 800633c:	2720      	movs	r7, #32
 800633e:	f387 8811 	msr	BASEPRI, r7
  pwmEnableChannelI(pwmp, channel, width);
 8006342:	68f2      	ldr	r2, [r6, #12]
  pwmp->tim->CCR[channel] = width;
 8006344:	69b1      	ldr	r1, [r6, #24]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	634b      	str	r3, [r1, #52]	; 0x34
 800634c:	60f2      	str	r2, [r6, #12]
 800634e:	2300      	movs	r3, #0
 8006350:	f383 8811 	msr	BASEPRI, r3
    break;
  }
}

void SPI_init(void){
  palSetPadMode(SPI_PORT, SCK_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8006354:	4e2f      	ldr	r6, [pc, #188]	; (8006414 <main+0x7e4>)
 8006356:	4639      	mov	r1, r7
 8006358:	4630      	mov	r0, r6
 800635a:	f240 229a 	movw	r2, #666	; 0x29a
 800635e:	f7fb fb17 	bl	8001990 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_PORT, MOSI_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8006362:	f240 229a 	movw	r2, #666	; 0x29a
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	f7fb fb12 	bl	8001990 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_PORT, MISO_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 800636c:	f240 229a 	movw	r2, #666	; 0x29a
 8006370:	2140      	movs	r1, #64	; 0x40
 8006372:	f7fb fb0d 	bl	8001990 <_pal_lld_setgroupmode>

  PLD_IDLE;
  RAM_INACTIVE;
 8006376:	f04f 0310 	mov.w	r3, #16
  CPC_HIGH;
  CEWR_INACTIVE;
 800637a:	f04f 0c01 	mov.w	ip, #1
  PLD_IDLE;
 800637e:	f8a6 8018 	strh.w	r8, [r6, #24]
  RAM_INACTIVE;
 8006382:	8333      	strh	r3, [r6, #24]
  CPC_HIGH;
 8006384:	f8a6 9018 	strh.w	r9, [r6, #24]
  CEWR_INACTIVE;
 8006388:	f8a5 c018 	strh.w	ip, [r5, #24]
  WE_INACTIVE;
  DATOE_INACTIVE;
 800638c:	f04f 0c04 	mov.w	ip, #4
  WE_INACTIVE;
 8006390:	f8a5 8018 	strh.w	r8, [r5, #24]
  DATOE_INACTIVE;
 8006394:	f8a5 c018 	strh.w	ip, [r5, #24]
  MRC_INACTIVE;
 8006398:	f04f 0c08 	mov.w	ip, #8
 800639c:	f8a5 c018 	strh.w	ip, [r5, #24]
  CNTOE_INACTIVE;
  TRESET_INACTIVE;

  DEBUG_HI;
  LED_OFF;
  palSetLineMode(DEBUG, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80063a0:	4b2a      	ldr	r3, [pc, #168]	; (800644c <main+0x81c>)
  CNTOE_INACTIVE;
 80063a2:	832f      	strh	r7, [r5, #24]
  TRESET_INACTIVE;
 80063a4:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80063a8:	f8a5 c01a 	strh.w	ip, [r5, #26]
  LED_OFF;
 80063ac:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  DEBUG_HI;
 80063b0:	f8a3 9018 	strh.w	r9, [r3, #24]
  palSetLineMode(DEBUG, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80063b4:	4649      	mov	r1, r9
  LED_OFF;
 80063b6:	f8a3 c018 	strh.w	ip, [r3, #24]
  palSetLineMode(DEBUG, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80063ba:	4618      	mov	r0, r3
 80063bc:	2219      	movs	r2, #25
 80063be:	f7fb fae7 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(LED, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80063c2:	4b22      	ldr	r3, [pc, #136]	; (800644c <main+0x81c>)
 80063c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063c8:	4618      	mov	r0, r3
 80063ca:	2219      	movs	r2, #25
 80063cc:	f7fb fae0 	bl	8001990 <_pal_lld_setgroupmode>

  palSetLineMode(BUSFREE, PAL_MODE_INPUT);
 80063d0:	4628      	mov	r0, r5
 80063d2:	2200      	movs	r2, #0
 80063d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063d8:	f7fb fada 	bl	8001990 <_pal_lld_setgroupmode>
  
  palSetLineMode(PLD, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80063dc:	4641      	mov	r1, r8
 80063de:	4630      	mov	r0, r6
 80063e0:	2219      	movs	r2, #25
 80063e2:	f7fb fad5 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(CERAMWR, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80063e6:	4628      	mov	r0, r5
 80063e8:	2101      	movs	r1, #1
 80063ea:	2219      	movs	r2, #25
 80063ec:	f7fb fad0 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(RAMCE, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80063f0:	4630      	mov	r0, r6
 80063f2:	2110      	movs	r1, #16
 80063f4:	2219      	movs	r2, #25
 80063f6:	f7fb facb 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(CPC, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80063fa:	4649      	mov	r1, r9
 80063fc:	e02a      	b.n	8006454 <main+0x824>
 80063fe:	bf00      	nop
 8006400:	20000f84 	.word	0x20000f84
 8006404:	40023800 	.word	0x40023800
 8006408:	e000e100 	.word	0xe000e100
 800640c:	40011000 	.word	0x40011000
 8006410:	40011400 	.word	0x40011400
 8006414:	40020000 	.word	0x40020000
 8006418:	08008aa4 	.word	0x08008aa4
 800641c:	2000143c 	.word	0x2000143c
 8006420:	08008ed8 	.word	0x08008ed8
 8006424:	08001e91 	.word	0x08001e91
 8006428:	08008d88 	.word	0x08008d88
 800642c:	08008da4 	.word	0x08008da4
 8006430:	20005fc0 	.word	0x20005fc0
 8006434:	080012b1 	.word	0x080012b1
 8006438:	2000195c 	.word	0x2000195c
 800643c:	20000810 	.word	0x20000810
 8006440:	40020400 	.word	0x40020400
 8006444:	2000080c 	.word	0x2000080c
 8006448:	d1b71759 	.word	0xd1b71759
 800644c:	40020800 	.word	0x40020800
 8006450:	08001df1 	.word	0x08001df1
 8006454:	2219      	movs	r2, #25
 8006456:	f7fb fa9b 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(RAMWR, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800645a:	4628      	mov	r0, r5
 800645c:	4641      	mov	r1, r8
 800645e:	2219      	movs	r2, #25
 8006460:	f7fb fa96 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(DATOE, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8006464:	2104      	movs	r1, #4
 8006466:	2219      	movs	r2, #25
 8006468:	f7fb fa92 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(MRC, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800646c:	2108      	movs	r1, #8
 800646e:	2219      	movs	r2, #25
 8006470:	f7fb fa8e 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(CNTOE, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8006474:	4639      	mov	r1, r7
 8006476:	2219      	movs	r2, #25
 8006478:	f7fb fa8a 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(TRESET, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800647c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006480:	2219      	movs	r2, #25
 8006482:	f7fb fa85 	bl	8001990 <_pal_lld_setgroupmode>
 8006486:	f387 8811 	msr	BASEPRI, r7
  if (spip->state == SPI_STOP) {
 800648a:	f89a 3000 	ldrb.w	r3, [sl]
  spip->config = config;
 800648e:	4ac6      	ldr	r2, [pc, #792]	; (80067a8 <main+0xb78>)
 8006490:	f8ca 2004 	str.w	r2, [sl, #4]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d122      	bne.n	80064de <main+0x8ae>
  if (id < STM32_DMA_STREAMS) {
 8006498:	4bc4      	ldr	r3, [pc, #784]	; (80067ac <main+0xb7c>)
 800649a:	4ac5      	ldr	r2, [pc, #788]	; (80067b0 <main+0xb80>)
 800649c:	210a      	movs	r1, #10
 800649e:	2008      	movs	r0, #8
 80064a0:	f7fb fae6 	bl	8001a70 <dmaStreamAllocI.part.0>
 80064a4:	4bc1      	ldr	r3, [pc, #772]	; (80067ac <main+0xb7c>)
 80064a6:	4ac3      	ldr	r2, [pc, #780]	; (80067b4 <main+0xb84>)
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 80064a8:	f8ca 0020 	str.w	r0, [sl, #32]
 80064ac:	210a      	movs	r1, #10
 80064ae:	200b      	movs	r0, #11
 80064b0:	f7fb fade 	bl	8001a70 <dmaStreamAllocI.part.0>
      rccEnableSPI1(true);
 80064b4:	4bc0      	ldr	r3, [pc, #768]	; (80067b8 <main+0xb88>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80064b6:	f8da 2020 	ldr.w	r2, [sl, #32]
      rccEnableSPI1(true);
 80064ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80064bc:	6815      	ldr	r5, [r2, #0]
 80064be:	f8da 201c 	ldr.w	r2, [sl, #28]
      rccEnableSPI1(true);
 80064c2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80064c6:	6459      	str	r1, [r3, #68]	; 0x44
 80064c8:	6e59      	ldr	r1, [r3, #100]	; 0x64
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 80064ca:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
      rccEnableSPI1(true);
 80064ce:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80064d2:	6800      	ldr	r0, [r0, #0]
      rccEnableSPI1(true);
 80064d4:	6659      	str	r1, [r3, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80064d6:	320c      	adds	r2, #12
      rccEnableSPI1(true);
 80064d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80064da:	60aa      	str	r2, [r5, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80064dc:	6082      	str	r2, [r0, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80064de:	f8da 1004 	ldr.w	r1, [sl, #4]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80064e2:	e9da 030a 	ldrd	r0, r3, [sl, #40]	; 0x28
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80064e6:	8a0a      	ldrh	r2, [r1, #16]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80064e8:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80064ec:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80064f0:	0515      	lsls	r5, r2, #20
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80064f2:	bf44      	itt	mi
 80064f4:	f440 5020 	orrmi.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80064f8:	f443 5320 	orrmi.w	r3, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80064fc:	e9ca 030a 	strd	r0, r3, [sl, #40]	; 0x28
  if (spip->config->circular) {
 8006500:	780b      	ldrb	r3, [r1, #0]
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8006502:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
  if (spip->config->circular) {
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 821f 	bne.w	800694a <main+0xd1a>
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800650c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8006510:	f420 7084 	bic.w	r0, r0, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8006514:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8006518:	e9ca 030a 	strd	r0, r3, [sl, #40]	; 0x28
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800651c:	f8da 301c 	ldr.w	r3, [sl, #28]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8006520:	8a49      	ldrh	r1, [r1, #18]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8006522:	6818      	ldr	r0, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8006524:	f041 0107 	orr.w	r1, r1, #7
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8006528:	f442 7241 	orr.w	r2, r2, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800652c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006530:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8006532:	601a      	str	r2, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8006534:	6059      	str	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8006536:	681a      	ldr	r2, [r3, #0]
  spip->state = SPI_READY;
 8006538:	2102      	movs	r1, #2
 800653a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	2300      	movs	r3, #0
 8006542:	f88a 1000 	strb.w	r1, [sl]
 8006546:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 800654a:	489c      	ldr	r0, [pc, #624]	; (80067bc <main+0xb8c>)
 800654c:	f7fb fdb0 	bl	80020b0 <chMtxLock>
 8006550:	2320      	movs	r3, #32
 8006552:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
 8006556:	499a      	ldr	r1, [pc, #616]	; (80067c0 <main+0xb90>)
  gptp->config = config;
 8006558:	4a9a      	ldr	r2, [pc, #616]	; (80067c4 <main+0xb94>)
 800655a:	780b      	ldrb	r3, [r1, #0]
 800655c:	604a      	str	r2, [r1, #4]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d11e      	bne.n	80065a0 <main+0x970>
      rccEnableTIM4(true);
 8006562:	4b95      	ldr	r3, [pc, #596]	; (80067b8 <main+0xb88>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8006564:	4a98      	ldr	r2, [pc, #608]	; (80067c8 <main+0xb98>)
 8006566:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006568:	f041 0104 	orr.w	r1, r1, #4
 800656c:	6419      	str	r1, [r3, #64]	; 0x40
 800656e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006570:	f041 0104 	orr.w	r1, r1, #4
 8006574:	6619      	str	r1, [r3, #96]	; 0x60
 8006576:	6e19      	ldr	r1, [r3, #96]	; 0x60
      rccResetTIM4();
 8006578:	6a19      	ldr	r1, [r3, #32]
 800657a:	f041 0104 	orr.w	r1, r1, #4
 800657e:	6219      	str	r1, [r3, #32]
 8006580:	6a19      	ldr	r1, [r3, #32]
 8006582:	f021 0104 	bic.w	r1, r1, #4
 8006586:	6219      	str	r1, [r3, #32]
 8006588:	2070      	movs	r0, #112	; 0x70
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	f882 031e 	strb.w	r0, [r2, #798]	; 0x31e
      gptp->clock = STM32_TIMCLK1;
 8006590:	488b      	ldr	r0, [pc, #556]	; (80067c0 <main+0xb90>)
 8006592:	498e      	ldr	r1, [pc, #568]	; (80067cc <main+0xb9c>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006598:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 800659c:	6081      	str	r1, [r0, #8]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800659e:	6013      	str	r3, [r2, #0]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80065a0:	4887      	ldr	r0, [pc, #540]	; (80067c0 <main+0xb90>)
 80065a2:	498b      	ldr	r1, [pc, #556]	; (80067d0 <main+0xba0>)
 80065a4:	6883      	ldr	r3, [r0, #8]
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80065a6:	68c2      	ldr	r2, [r0, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80065a8:	fba1 1303 	umull	r1, r3, r1, r3
 80065ac:	0c9b      	lsrs	r3, r3, #18
 80065ae:	3b01      	subs	r3, #1
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80065b0:	2600      	movs	r6, #0
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80065b2:	b29b      	uxth	r3, r3
  gptp->state = GPT_READY;
 80065b4:	2102      	movs	r1, #2
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80065b6:	6016      	str	r6, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 80065b8:	6056      	str	r6, [r2, #4]
 80065ba:	7001      	strb	r1, [r0, #0]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 80065bc:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 80065be:	6116      	str	r6, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80065c0:	60d6      	str	r6, [r2, #12]
 80065c2:	f386 8811 	msr	BASEPRI, r6
   * Starting GPT5 driver, it is used for checking the BUSFREE Signal
   */
  gptStart(&GPTD4, &gptcfg1);

  BUS_in_use = 1; //assume bus is in use
  RAM_ACTIVE; // activate RAM
 80065c6:	4b83      	ldr	r3, [pc, #524]	; (80067d4 <main+0xba4>)
  BUS_in_use = 1; //assume bus is in use
 80065c8:	4983      	ldr	r1, [pc, #524]	; (80067d8 <main+0xba8>)
 }
}

void i2c_init(void){
  //palSetPadMode(GPIOB, 6, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
  palSetPadMode(GPIOB, 6, (PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN));
 80065ca:	4884      	ldr	r0, [pc, #528]	; (80067dc <main+0xbac>)
 80065cc:	2501      	movs	r5, #1
  RAM_ACTIVE; // activate RAM
 80065ce:	2210      	movs	r2, #16
  BUS_in_use = 1; //assume bus is in use
 80065d0:	700d      	strb	r5, [r1, #0]
  RAM_ACTIVE; // activate RAM
 80065d2:	835a      	strh	r2, [r3, #26]
 80065d4:	2140      	movs	r1, #64	; 0x40
 80065d6:	f240 2206 	movw	r2, #518	; 0x206
 80065da:	f7fb f9d9 	bl	8001990 <_pal_lld_setgroupmode>
  //palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
  palSetPadMode(GPIOB, 7, (PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN));
 80065de:	f240 2206 	movw	r2, #518	; 0x206
 80065e2:	2180      	movs	r1, #128	; 0x80
 80065e4:	f7fb f9d4 	bl	8001990 <_pal_lld_setgroupmode>
  palSetLineMode(CTRL1, PAL_MODE_OUTPUT_PUSHPULL);
 80065e8:	462a      	mov	r2, r5
 80065ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065ee:	f7fb f9cf 	bl	8001990 <_pal_lld_setgroupmode>
  //OUTPUT_OFF;
  OUTPUT_ON;
 80065f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065f6:	8343      	strh	r3, [r0, #26]
 80065f8:	2320      	movs	r3, #32
 80065fa:	f383 8811 	msr	BASEPRI, r3
  if (i2cp->state == I2C_STOP) {
 80065fe:	f89b 8000 	ldrb.w	r8, [fp]
  i2cp->config = config;
 8006602:	4b77      	ldr	r3, [pc, #476]	; (80067e0 <main+0xbb0>)
  I2C_TypeDef *dp = i2cp->i2c;
 8006604:	f8db 5034 	ldr.w	r5, [fp, #52]	; 0x34
 8006608:	f8cb 3004 	str.w	r3, [fp, #4]
  if (i2cp->state == I2C_STOP) {
 800660c:	f1b8 0f01 	cmp.w	r8, #1
 8006610:	d145      	bne.n	800669e <main+0xa6e>
      rccResetI2C1();
 8006612:	4f69      	ldr	r7, [pc, #420]	; (80067b8 <main+0xb88>)
 8006614:	4b73      	ldr	r3, [pc, #460]	; (80067e4 <main+0xbb4>)
 8006616:	6a39      	ldr	r1, [r7, #32]
 8006618:	4a73      	ldr	r2, [pc, #460]	; (80067e8 <main+0xbb8>)
 800661a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800661e:	6239      	str	r1, [r7, #32]
 8006620:	6a39      	ldr	r1, [r7, #32]
 8006622:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8006626:	6239      	str	r1, [r7, #32]
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8006628:	f240 4156 	movw	r1, #1110	; 0x456
      rccResetI2C1();
 800662c:	f8d7 c020 	ldr.w	ip, [r7, #32]
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8006630:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
 8006634:	4630      	mov	r0, r6
 8006636:	2105      	movs	r1, #5
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8006638:	f240 4616 	movw	r6, #1046	; 0x416
 800663c:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
 8006640:	f7fb fa16 	bl	8001a70 <dmaStreamAllocI.part.0>
 8006644:	4b67      	ldr	r3, [pc, #412]	; (80067e4 <main+0xbb4>)
 8006646:	4a69      	ldr	r2, [pc, #420]	; (80067ec <main+0xbbc>)
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C1_RX_DMA_STREAM,
 8006648:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
 800664c:	2105      	movs	r1, #5
 800664e:	2006      	movs	r0, #6
 8006650:	f7fb fa0e 	bl	8001a70 <dmaStreamAllocI.part.0>
      rccEnableI2C1(true);
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8006656:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C1_TX_DMA_STREAM,
 800665a:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
      rccEnableI2C1(true);
 800665e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006662:	643b      	str	r3, [r7, #64]	; 0x40
 8006664:	6e38      	ldr	r0, [r7, #96]	; 0x60
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8006666:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 800666a:	4e61      	ldr	r6, [pc, #388]	; (80067f0 <main+0xbc0>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800666c:	4b56      	ldr	r3, [pc, #344]	; (80067c8 <main+0xb98>)
      rccEnableI2C1(true);
 800666e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8006672:	6638      	str	r0, [r7, #96]	; 0x60
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8006674:	4331      	orrs	r1, r6
 8006676:	2050      	movs	r0, #80	; 0x50
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8006678:	4332      	orrs	r2, r6
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800667a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
      rccEnableI2C1(true);
 800667e:	6e3f      	ldr	r7, [r7, #96]	; 0x60
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8006680:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8006684:	f883 031f 	strb.w	r0, [r3, #799]	; 0x31f
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8006688:	f8cb 2028 	str.w	r2, [fp, #40]	; 0x28
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800668c:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006690:	601e      	str	r6, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8006692:	f883 0320 	strb.w	r0, [r3, #800]	; 0x320
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006696:	f8c3 8184 	str.w	r8, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800669a:	f8c3 8004 	str.w	r8, [r3, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800669e:	e9db 230b 	ldrd	r2, r3, [fp, #44]	; 0x2c
  i2c_lld_set_clock(i2cp);
 80066a2:	f8db 0004 	ldr.w	r0, [fp, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80066a6:	f8d2 c000 	ldr.w	ip, [r2]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80066aa:	681e      	ldr	r6, [r3, #0]
  int32_t clock_speed = i2cp->config->clock_speed;
 80066ac:	6841      	ldr	r1, [r0, #4]
  i2c_lld_set_clock(i2cp);
 80066ae:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
  if (clock_speed <= 100000) {
 80066b2:	4f50      	ldr	r7, [pc, #320]	; (80067f4 <main+0xbc4>)
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80066b4:	f105 0210 	add.w	r2, r5, #16
 80066b8:	f8cc 2008 	str.w	r2, [ip, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80066bc:	60b2      	str	r2, [r6, #8]
  dp->CR1 = I2C_CR1_SWRST;
 80066be:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80066c2:	f44f 6610 	mov.w	r6, #2304	; 0x900
  dp->CR1 = 0;
 80066c6:	2200      	movs	r2, #0
  dp->CR1 = I2C_CR1_SWRST;
 80066c8:	f8c5 c000 	str.w	ip, [r5]
  dp->CR1 = 0;
 80066cc:	602a      	str	r2, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80066ce:	606e      	str	r6, [r5, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80066d0:	685e      	ldr	r6, [r3, #4]
 80066d2:	f64f 7cc0 	movw	ip, #65472	; 0xffc0
 80066d6:	ea06 060c 	and.w	r6, r6, ip
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80066da:	f890 c008 	ldrb.w	ip, [r0, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80066de:	605e      	str	r6, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80066e0:	685e      	ldr	r6, [r3, #4]
  if (clock_speed <= 100000) {
 80066e2:	42b9      	cmp	r1, r7
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80066e4:	f046 062a 	orr.w	r6, r6, #42	; 0x2a
 80066e8:	605e      	str	r6, [r3, #4]
  if (clock_speed <= 100000) {
 80066ea:	f300 8149 	bgt.w	8006980 <main+0xd50>
    dp->TRISE = I2C_CLK_FREQ + 1;
 80066ee:	262b      	movs	r6, #43	; 0x2b
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80066f0:	4a41      	ldr	r2, [pc, #260]	; (80067f8 <main+0xbc8>)
    dp->TRISE = I2C_CLK_FREQ + 1;
 80066f2:	621e      	str	r6, [r3, #32]
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80066f4:	0049      	lsls	r1, r1, #1
 80066f6:	fbb2 f2f1 	udiv	r2, r2, r1
    regCCR |= (clock_div & I2C_CCR_CCR);
 80066fa:	f3c2 020b 	ubfx	r2, r2, #0, #12
  dp->CCR = regCCR;
 80066fe:	61da      	str	r2, [r3, #28]
  i2copmode_t opmode = i2cp->config->op_mode;
 8006700:	7801      	ldrb	r1, [r0, #0]
  regCR1 = dp->CR1;
 8006702:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8006704:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 8006706:	b292      	uxth	r2, r2
  switch (opmode) {
 8006708:	f000 8248 	beq.w	8006b9c <main+0xf6c>
 800670c:	2903      	cmp	r1, #3
 800670e:	f000 824f 	beq.w	8006bb0 <main+0xf80>
 8006712:	2901      	cmp	r1, #1
 8006714:	f000 8248 	beq.w	8006ba8 <main+0xf78>
  dp->CR1 = regCR1;
 8006718:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_PE;
 800671a:	682b      	ldr	r3, [r5, #0]
  i2cp->state = I2C_READY;
 800671c:	2702      	movs	r7, #2
 800671e:	f043 0301 	orr.w	r3, r3, #1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	2600      	movs	r6, #0
 8006726:	f88b 7000 	strb.w	r7, [fp]
 800672a:	f386 8811 	msr	BASEPRI, r6
 800672e:	4833      	ldr	r0, [pc, #204]	; (80067fc <main+0xbcc>)
 8006730:	f7fb fcbe 	bl	80020b0 <chMtxLock>
    }
  }
}

void start_upload_thread(void){
  long_buf.working = 0;
 8006734:	4b32      	ldr	r3, [pc, #200]	; (8006800 <main+0xbd0>)
 8006736:	2520      	movs	r5, #32
 8006738:	705e      	strb	r6, [r3, #1]
  long_buf.bsize[0] = 0;
 800673a:	815e      	strh	r6, [r3, #10]
  long_buf.bsize[1] = 0;	
 800673c:	819e      	strh	r6, [r3, #12]
 800673e:	f385 8811 	msr	BASEPRI, r5
  tp->wabase = (stkalign_t *)wsp;
 8006742:	4b30      	ldr	r3, [pc, #192]	; (8006804 <main+0xbd4>)
  REG_INSERT(tp);
 8006744:	6922      	ldr	r2, [r4, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006746:	4930      	ldr	r1, [pc, #192]	; (8006808 <main+0xbd8>)
  tp->state     = CH_STATE_WTSTART;
 8006748:	f8a3 71a0 	strh.w	r7, [r3, #416]	; 0x1a0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800674c:	f503 70ae 	add.w	r0, r3, #348	; 0x15c
 8006750:	f8c3 0194 	str.w	r0, [r3, #404]	; 0x194
 8006754:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
  REG_INSERT(tp);
 8006758:	f503 70c0 	add.w	r0, r3, #384	; 0x180
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800675c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800680c <main+0xbdc>
  tp->name      = name;
 8006760:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8006810 <main+0xbe0>
  REG_INSERT(tp);
 8006764:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  tp->prio      = prio;
 8006768:	2180      	movs	r1, #128	; 0x80
  tp->refs      = (trefs_t)1;
 800676a:	2701      	movs	r7, #1
  tp->prio      = prio;
 800676c:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
  tp->realprio  = prio;
 8006770:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
  tp->epending  = (eventmask_t)0;
 8006774:	e9c3 666d 	strd	r6, r6, [r3, #436]	; 0x1b4
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006778:	f8c3 6160 	str.w	r6, [r3, #352]	; 0x160
  REG_INSERT(tp);
 800677c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  tp->wabase = (stkalign_t *)wsp;
 8006780:	f8c3 319c 	str.w	r3, [r3, #412]	; 0x19c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006784:	f8c3 e17c 	str.w	lr, [r3, #380]	; 0x17c
  tp->name      = name;
 8006788:	f8c3 c198 	str.w	ip, [r3, #408]	; 0x198
  tp->refs      = (trefs_t)1;
 800678c:	f883 71a2 	strb.w	r7, [r3, #418]	; 0x1a2
  tlp->next = (thread_t *)tlp;
 8006790:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
  REG_INSERT(tp);
 8006794:	60d0      	str	r0, [r2, #12]
  tqp->next = (thread_t *)tqp;
 8006796:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 800679a:	e9c3 126a 	strd	r1, r2, [r3, #424]	; 0x1a8
  tqp->prev = (thread_t *)tqp;
 800679e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 80067a2:	6120      	str	r0, [r4, #16]
 80067a4:	e036      	b.n	8006814 <main+0xbe4>
 80067a6:	bf00      	nop
 80067a8:	20000844 	.word	0x20000844
 80067ac:	200018cc 	.word	0x200018cc
 80067b0:	080015a1 	.word	0x080015a1
 80067b4:	08001661 	.word	0x08001661
 80067b8:	40023800 	.word	0x40023800
 80067bc:	200018d8 	.word	0x200018d8
 80067c0:	20000c8c 	.word	0x20000c8c
 80067c4:	08008cd0 	.word	0x08008cd0
 80067c8:	e000e100 	.word	0xe000e100
 80067cc:	0501bd00 	.word	0x0501bd00
 80067d0:	431bde83 	.word	0x431bde83
 80067d4:	40020000 	.word	0x40020000
 80067d8:	20000c88 	.word	0x20000c88
 80067dc:	40020400 	.word	0x40020400
 80067e0:	08008ce4 	.word	0x08008ce4
 80067e4:	20000c9c 	.word	0x20000c9c
 80067e8:	08001921 	.word	0x08001921
 80067ec:	080018d1 	.word	0x080018d1
 80067f0:	02030000 	.word	0x02030000
 80067f4:	000186a0 	.word	0x000186a0
 80067f8:	0280de80 	.word	0x0280de80
 80067fc:	20000ca8 	.word	0x20000ca8
 8006800:	20001e90 	.word	0x20001e90
 8006804:	20005fe8 	.word	0x20005fe8
 8006808:	080033a1 	.word	0x080033a1
 800680c:	080002f1 	.word	0x080002f1
 8006810:	08008ad8 	.word	0x08008ad8
  chSchWakeupS(tp, MSG_OK);
 8006814:	f7fb fc04 	bl	8002020 <chSchWakeupS.constprop.0>
 8006818:	f386 8811 	msr	BASEPRI, r6
 800681c:	4bc1      	ldr	r3, [pc, #772]	; (8006b24 <main+0xef4>)
 800681e:	601b      	str	r3, [r3, #0]
 8006820:	f385 8811 	msr	BASEPRI, r5
  elp->wflags   = wflags;
 8006824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 8006828:	6819      	ldr	r1, [r3, #0]
  elp->listener = currp;
 800682a:	6962      	ldr	r2, [r4, #20]
  elp->events   = events;
 800682c:	9705      	str	r7, [sp, #20]
  esp->next     = elp;
 800682e:	af03      	add	r7, sp, #12
  elp->flags    = (eventflags_t)0;
 8006830:	9606      	str	r6, [sp, #24]
  elp->next     = esp->next;
 8006832:	9103      	str	r1, [sp, #12]
  esp->next     = elp;
 8006834:	601f      	str	r7, [r3, #0]
  elp->listener = currp;
 8006836:	9204      	str	r2, [sp, #16]
  elp->wflags   = wflags;
 8006838:	9007      	str	r0, [sp, #28]
 800683a:	f386 8811 	msr	BASEPRI, r6
 800683e:	f8df a310 	ldr.w	sl, [pc, #784]	; 8006b50 <main+0xf20>
 8006842:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8006b54 <main+0xf24>
  H_LOCK(heapp);
 8006846:	4fb8      	ldr	r7, [pc, #736]	; (8006b28 <main+0xef8>)
  thread_t *shelltp = NULL;
 8006848:	46b3      	mov	fp, r6
        shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                       "shell1", NORMALPRIO + 1,
                                       shellThread, (void *)&shell_cfg1);
      }
#else
    if (!shelltp)
 800684a:	f1bb 0f00 	cmp.w	fp, #0
 800684e:	d01a      	beq.n	8006886 <main+0xc56>
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    else if (chThdTerminatedX(shelltp)) {
 8006850:	f89b 3020 	ldrb.w	r3, [fp, #32]
 8006854:	2b0f      	cmp	r3, #15
 8006856:	f000 808d 	beq.w	8006974 <main+0xd44>
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 800685a:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800685e:	f385 8811 	msr	BASEPRI, r5
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8006862:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8006866:	07da      	lsls	r2, r3, #31
 8006868:	d578      	bpl.n	800695c <main+0xd2c>
 800686a:	f06f 0201 	mvn.w	r2, #1
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 800686e:	4013      	ands	r3, r2
 8006870:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8006874:	f386 8811 	msr	BASEPRI, r6
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
#endif
    /* Waiting for an exit event then freeing terminated shells.*/
    chEvtWaitAny(EVENT_MASK(0));
    if (chThdTerminatedX(shelltp)) {
 8006878:	f89b 3020 	ldrb.w	r3, [fp, #32]
 800687c:	2b0f      	cmp	r3, #15
 800687e:	d1e4      	bne.n	800684a <main+0xc1a>
      chThdRelease(shelltp);
 8006880:	4658      	mov	r0, fp
 8006882:	f7ff f965 	bl	8005b50 <chThdRelease>
 8006886:	4638      	mov	r0, r7
 8006888:	f7fb fc12 	bl	80020b0 <chMtxLock>
  while (H_NEXT(qp) != NULL) {
 800688c:	4ba7      	ldr	r3, [pc, #668]	; (8006b2c <main+0xefc>)
 800688e:	6859      	ldr	r1, [r3, #4]
 8006890:	b1d9      	cbz	r1, 80068ca <main+0xc9a>
  qp = &heapp->header;
 8006892:	1d18      	adds	r0, r3, #4
 8006894:	4686      	mov	lr, r0
 8006896:	e000      	b.n	800689a <main+0xc6a>
  while (H_NEXT(qp) != NULL) {
 8006898:	4619      	mov	r1, r3
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800689a:	6848      	ldr	r0, [r1, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800689c:	f101 030f 	add.w	r3, r1, #15
 80068a0:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80068a4:	1c42      	adds	r2, r0, #1
 80068a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80068aa:	f1a3 0c08 	sub.w	ip, r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80068ae:	eba2 0803 	sub.w	r8, r2, r3
 80068b2:	4594      	cmp	ip, r2
 80068b4:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80068b8:	d203      	bcs.n	80068c2 <main+0xc92>
 80068ba:	f5b8 7f8c 	cmp.w	r8, #280	; 0x118
 80068be:	f200 814b 	bhi.w	8006b58 <main+0xf28>
  while (H_NEXT(qp) != NULL) {
 80068c2:	680b      	ldr	r3, [r1, #0]
 80068c4:	468e      	mov	lr, r1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e6      	bne.n	8006898 <main+0xc68>
  H_UNLOCK(heapp);
 80068ca:	4638      	mov	r0, r7
 80068cc:	f7ff f900 	bl	8005ad0 <chMtxUnlock>
  if (heapp->provider != NULL) {
 80068d0:	4b96      	ldr	r3, [pc, #600]	; (8006b2c <main+0xefc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d050      	beq.n	800697a <main+0xd4a>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 80068d8:	2208      	movs	r2, #8
 80068da:	4611      	mov	r1, r2
 80068dc:	f640 00c8 	movw	r0, #2248	; 0x8c8
 80068e0:	4798      	blx	r3
    if (ahp != NULL) {
 80068e2:	4680      	mov	r8, r0
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d048      	beq.n	800697a <main+0xd4a>
      H_HEAP(hp) = heapp;
 80068e8:	4a90      	ldr	r2, [pc, #576]	; (8006b2c <main+0xefc>)
      H_SIZE(hp) = size;
 80068ea:	f640 03c8 	movw	r3, #2248	; 0x8c8
 80068ee:	e940 2302 	strd	r2, r3, [r0, #-8]
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 80068f2:	f608 02c8 	addw	r2, r8, #2248	; 0x8c8
  thread_descriptor_t td = {
 80068f6:	2381      	movs	r3, #129	; 0x81
 80068f8:	920a      	str	r2, [sp, #40]	; 0x28
 80068fa:	4a8d      	ldr	r2, [pc, #564]	; (8006b30 <main+0xf00>)
 80068fc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006900:	e9cd a808 	strd	sl, r8, [sp, #32]
 8006904:	920d      	str	r2, [sp, #52]	; 0x34
 8006906:	930b      	str	r3, [sp, #44]	; 0x2c
 8006908:	f385 8811 	msr	BASEPRI, r5
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800690c:	a808      	add	r0, sp, #32
 800690e:	f7fa fb4f 	bl	8000fb0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8006912:	2301      	movs	r3, #1
 8006914:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 8006918:	4683      	mov	fp, r0
  chSchWakeupS(tp, MSG_OK);
 800691a:	f7fb fb81 	bl	8002020 <chSchWakeupS.constprop.0>
 800691e:	f386 8811 	msr	BASEPRI, r6
 8006922:	e79a      	b.n	800685a <main+0xc2a>
    ccer |= STM32_TIM_CCER_CC4P;
 8006924:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8006928:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800692c:	e4dd      	b.n	80062ea <main+0x6ba>
    ccer |= STM32_TIM_CCER_CC3P;
 800692e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8006932:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8006936:	e4cf      	b.n	80062d8 <main+0x6a8>
    ccer |= STM32_TIM_CCER_CC2P;
 8006938:	f045 0520 	orr.w	r5, r5, #32
    ccer |= STM32_TIM_CCER_CC2E;
 800693c:	f045 0510 	orr.w	r5, r5, #16
 8006940:	e4c1      	b.n	80062c6 <main+0x696>
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8006942:	460d      	mov	r5, r1
    ccer |= STM32_TIM_CCER_CC1E;
 8006944:	f045 0501 	orr.w	r5, r5, #1
 8006948:	e4b4      	b.n	80062b4 <main+0x684>
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800694a:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800694e:	f440 7084 	orr.w	r0, r0, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8006952:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 8006956:	e9ca 030a 	strd	r0, r3, [sl, #40]	; 0x28
 800695a:	e5df      	b.n	800651c <main+0x8ec>
    ctp->u.ewmask = events;
 800695c:	2301      	movs	r3, #1
 800695e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006962:	200a      	movs	r0, #10
 8006964:	f7fb fb8c 	bl	8002080 <chSchGoSleepS>
    m = ctp->epending & events;
 8006968:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800696c:	f003 0201 	and.w	r2, r3, #1
 8006970:	43d2      	mvns	r2, r2
 8006972:	e77c      	b.n	800686e <main+0xc3e>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 8006974:	4658      	mov	r0, fp
 8006976:	f7ff f8eb 	bl	8005b50 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 800697a:	f04f 0b00 	mov.w	fp, #0
 800697e:	e76c      	b.n	800685a <main+0xc2a>
  else if (clock_speed <= 400000) {
 8006980:	4e6c      	ldr	r6, [pc, #432]	; (8006b34 <main+0xf04>)
 8006982:	42b1      	cmp	r1, r6
 8006984:	f73f aebb 	bgt.w	80066fe <main+0xace>
    if (duty == FAST_DUTY_CYCLE_2) {
 8006988:	f1bc 0f02 	cmp.w	ip, #2
 800698c:	f000 8128 	beq.w	8006be0 <main+0xfb0>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8006990:	f1bc 0f03 	cmp.w	ip, #3
 8006994:	f000 8130 	beq.w	8006bf8 <main+0xfc8>
  regCCR = 0;
 8006998:	4616      	mov	r6, r2
  clock_div = I2C_CCR_CCR;
 800699a:	f640 72ff 	movw	r2, #4095	; 0xfff
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 800699e:	4332      	orrs	r2, r6
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 80069a0:	210d      	movs	r1, #13
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 80069a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 80069a6:	6219      	str	r1, [r3, #32]
 80069a8:	e6a9      	b.n	80066fe <main+0xace>
      rccEnableTIM3(true);
 80069aa:	4b63      	ldr	r3, [pc, #396]	; (8006b38 <main+0xf08>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80069ac:	f8d6 c018 	ldr.w	ip, [r6, #24]
      rccEnableTIM3(true);
 80069b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80069b2:	4962      	ldr	r1, [pc, #392]	; (8006b3c <main+0xf0c>)
 80069b4:	f040 0002 	orr.w	r0, r0, #2
 80069b8:	6418      	str	r0, [r3, #64]	; 0x40
 80069ba:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80069bc:	f040 0002 	orr.w	r0, r0, #2
 80069c0:	6618      	str	r0, [r3, #96]	; 0x60
 80069c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
      rccResetTIM3();
 80069c4:	6a18      	ldr	r0, [r3, #32]
 80069c6:	f040 0002 	orr.w	r0, r0, #2
 80069ca:	6218      	str	r0, [r3, #32]
 80069cc:	6a18      	ldr	r0, [r3, #32]
 80069ce:	f020 0002 	bic.w	r0, r0, #2
 80069d2:	6218      	str	r0, [r3, #32]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
      pwmp->clock = STM32_TIMCLK1;
 80069d6:	4b5a      	ldr	r3, [pc, #360]	; (8006b40 <main+0xf10>)
 80069d8:	6173      	str	r3, [r6, #20]
 80069da:	2370      	movs	r3, #112	; 0x70
 80069dc:	f881 331d 	strb.w	r3, [r1, #797]	; 0x31d
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80069e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80069e4:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80069e8:	600b      	str	r3, [r1, #0]
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80069ea:	f646 0368 	movw	r3, #26728	; 0x6868
 80069ee:	f8cc 3018 	str.w	r3, [ip, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 80069f2:	f8cc 301c 	str.w	r3, [ip, #28]
 80069f6:	e447      	b.n	8006288 <main+0x658>
      rccEnableOTG_FS(true);
 80069f8:	4b4f      	ldr	r3, [pc, #316]	; (8006b38 <main+0xf08>)
  stm32_otg_t *otgp = usbp->otg;
 80069fa:	f8d8 9054 	ldr.w	r9, [r8, #84]	; 0x54
      rccEnableOTG_FS(true);
 80069fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8006a00:	4a4e      	ldr	r2, [pc, #312]	; (8006b3c <main+0xf0c>)
 8006a02:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006a06:	6359      	str	r1, [r3, #52]	; 0x34
 8006a08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a0a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006a0e:	6559      	str	r1, [r3, #84]	; 0x54
 8006a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8006a12:	6959      	ldr	r1, [r3, #20]
 8006a14:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006a18:	6159      	str	r1, [r3, #20]
 8006a1a:	6959      	ldr	r1, [r3, #20]
 8006a1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a20:	6159      	str	r1, [r3, #20]
 8006a22:	695b      	ldr	r3, [r3, #20]
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8006a24:	4947      	ldr	r1, [pc, #284]	; (8006b44 <main+0xf14>)
 8006a26:	23e0      	movs	r3, #224	; 0xe0
 8006a28:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006a32:	6093      	str	r3, [r2, #8]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8006a34:	4b44      	ldr	r3, [pc, #272]	; (8006b48 <main+0xf18>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8006a36:	f8c9 100c 	str.w	r1, [r9, #12]
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8006a3a:	22c0      	movs	r2, #192	; 0xc0
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8006a3c:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8006a40:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 8006a44:	f8c9 7e00 	str.w	r7, [r9, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8006a48:	f8c9 2000 	str.w	r2, [r9]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8006a4c:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8006a50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dafb      	bge.n	8006a50 <main+0xe20>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f8c9 3010 	str.w	r3, [r9, #16]
  chSysPolledDelayX(cycles);
 8006a5e:	200c      	movs	r0, #12
 8006a60:	f7fa fc8e 	bl	8001380 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8006a64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a68:	f017 0701 	ands.w	r7, r7, #1
 8006a6c:	d1fa      	bne.n	8006a64 <main+0xe34>
 8006a6e:	2012      	movs	r0, #18
 8006a70:	f7fa fc86 	bl	8001380 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8006a74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dafb      	bge.n	8006a74 <main+0xe44>
    otg_disable_ep(usbp);
 8006a7c:	e9d8 1315 	ldrd	r1, r3, [r8, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	f8cd 9004 	str.w	r9, [sp, #4]
    otgp->GAHBCFG = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f8c9 3008 	str.w	r3, [r9, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a90:	4696      	mov	lr, r2
 8006a92:	46a9      	mov	r9, r5
 8006a94:	e000      	b.n	8006a98 <main+0xe68>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8006a96:	4667      	mov	r7, ip
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8006a98:	eb01 1247 	add.w	r2, r1, r7, lsl #5
 8006a9c:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8006a9e:	f8d2 5900 	ldr.w	r5, [r2, #2304]	; 0x900
 8006aa2:	2d00      	cmp	r5, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8006aa4:	f107 0c01 	add.w	ip, r7, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8006aa8:	da05      	bge.n	8006ab6 <main+0xe86>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8006aaa:	f8d2 5900 	ldr.w	r5, [r2, #2304]	; 0x900
 8006aae:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 8006ab2:	f8c2 5900 	str.w	r5, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8006ab6:	f8d2 5b00 	ldr.w	r5, [r2, #2816]	; 0xb00
 8006aba:	2d00      	cmp	r5, #0
 8006abc:	da05      	bge.n	8006aca <main+0xe9a>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8006abe:	f8d2 5b00 	ldr.w	r5, [r2, #2816]	; 0xb00
 8006ac2:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 8006ac6:	f8c2 5b00 	str.w	r5, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8006aca:	4577      	cmp	r7, lr
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8006acc:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8006ad0:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8006ad4:	d1df      	bne.n	8006a96 <main+0xe66>
    if (usbp->config->sof_cb == NULL)
 8006ad6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ada:	464d      	mov	r5, r9
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	f8dd 9004 	ldr.w	r9, [sp, #4]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8006ae2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006ae6:	f8c1 381c 	str.w	r3, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f8c9 3810 	str.w	r3, [r9, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8006af0:	f8c9 3814 	str.w	r3, [r9, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8006af4:	f8c9 381c 	str.w	r3, [r9, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8006af8:	2a00      	cmp	r2, #0
 8006afa:	d079      	beq.n	8006bf0 <main+0xfc0>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8006afc:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <main+0xf1c>)
 8006afe:	f8c9 3018 	str.w	r3, [r9, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b06:	f8c9 3014 	str.w	r3, [r9, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8006b0a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	f8c9 3008 	str.w	r3, [r9, #8]
 8006b16:	f7ff bb7a 	b.w	800620e <main+0x5de>
    fck = STM32_PCLK2 / config->speed;
 8006b1a:	f240 22d9 	movw	r2, #729	; 0x2d9
 8006b1e:	f7ff bae9 	b.w	80060f4 <main+0x4c4>
 8006b22:	bf00      	nop
 8006b24:	20005ea8 	.word	0x20005ea8
 8006b28:	20001bac 	.word	0x20001bac
 8006b2c:	20001ba0 	.word	0x20001ba0
 8006b30:	08008d90 	.word	0x08008d90
 8006b34:	00061a80 	.word	0x00061a80
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	e000e100 	.word	0xe000e100
 8006b40:	0501bd00 	.word	0x0501bd00
 8006b44:	40001440 	.word	0x40001440
 8006b48:	02200003 	.word	0x02200003
 8006b4c:	c0303c08 	.word	0xc0303c08
 8006b50:	08008a20 	.word	0x08008a20
 8006b54:	080054b1 	.word	0x080054b1
      if (ahp > hp) {
 8006b58:	458c      	cmp	ip, r1
 8006b5a:	46f3      	mov	fp, lr
 8006b5c:	4686      	mov	lr, r0
 8006b5e:	d82a      	bhi.n	8006bb6 <main+0xf86>
        if (H_PAGES(hp) == pages) {
 8006b60:	f240 1319 	movw	r3, #281	; 0x119
 8006b64:	459e      	cmp	lr, r3
 8006b66:	d051      	beq.n	8006c0c <main+0xfdc>
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8006b68:	f601 03d8 	addw	r3, r1, #2264	; 0x8d8
 8006b6c:	1ad2      	subs	r2, r2, r3
 8006b6e:	10d2      	asrs	r2, r2, #3
          H_NEXT(fp) = H_NEXT(hp);
 8006b70:	680b      	ldr	r3, [r1, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8006b72:	f8c1 28d4 	str.w	r2, [r1, #2260]	; 0x8d4
          fp = H_BLOCK(hp) + pages;
 8006b76:	f501 620d 	add.w	r2, r1, #2256	; 0x8d0
          H_NEXT(fp) = H_NEXT(hp);
 8006b7a:	f8c1 38d0 	str.w	r3, [r1, #2256]	; 0x8d0
          H_NEXT(qp) = fp;
 8006b7e:	468c      	mov	ip, r1
 8006b80:	f8cb 2000 	str.w	r2, [fp]
      H_HEAP(hp) = heapp;
 8006b84:	46e0      	mov	r8, ip
      H_SIZE(hp) = size;
 8006b86:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8006b8a:	f8cc 3004 	str.w	r3, [ip, #4]
      H_HEAP(hp) = heapp;
 8006b8e:	4b22      	ldr	r3, [pc, #136]	; (8006c18 <main+0xfe8>)
 8006b90:	f848 3b08 	str.w	r3, [r8], #8
      H_UNLOCK(heapp);
 8006b94:	4638      	mov	r0, r7
 8006b96:	f7fe ff9b 	bl	8005ad0 <chMtxUnlock>
 8006b9a:	e6aa      	b.n	80068f2 <main+0xcc2>
 8006b9c:	f022 0208 	bic.w	r2, r2, #8
 8006ba0:	b292      	uxth	r2, r2
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8006ba2:	f042 0202 	orr.w	r2, r2, #2
 8006ba6:	e5b7      	b.n	8006718 <main+0xae8>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8006ba8:	f022 020a 	bic.w	r2, r2, #10
 8006bac:	b292      	uxth	r2, r2
 8006bae:	e5b3      	b.n	8006718 <main+0xae8>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8006bb0:	f042 020a 	orr.w	r2, r2, #10
 8006bb4:	e5b0      	b.n	8006718 <main+0xae8>
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8006bb6:	f101 0208 	add.w	r2, r1, #8
 8006bba:	ebac 0202 	sub.w	r2, ip, r2
        if (bpages > pages) {
 8006bbe:	f240 1019 	movw	r0, #281	; 0x119
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8006bc2:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 8006bc4:	4580      	cmp	r8, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8006bc6:	604a      	str	r2, [r1, #4]
        if (bpages > pages) {
 8006bc8:	d0dc      	beq.n	8006b84 <main+0xf54>
          H_NEXT(fp) = H_NEXT(hp);
 8006bca:	6808      	ldr	r0, [r1, #0]
 8006bcc:	f8cc 08d0 	str.w	r0, [ip, #2256]	; 0x8d0
          H_PAGES(fp) = (bpages - pages) - 1U;
 8006bd0:	f5a8 728d 	sub.w	r2, r8, #282	; 0x11a
          fp = H_BLOCK(ahp) + pages;
 8006bd4:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
          H_PAGES(fp) = (bpages - pages) - 1U;
 8006bd8:	f8cc 28d4 	str.w	r2, [ip, #2260]	; 0x8d4
          H_NEXT(hp) = fp;
 8006bdc:	600b      	str	r3, [r1, #0]
 8006bde:	e7d1      	b.n	8006b84 <main+0xf54>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8006be0:	eb01 0741 	add.w	r7, r1, r1, lsl #1
  regCCR = 0;
 8006be4:	4616      	mov	r6, r2
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8006be6:	490d      	ldr	r1, [pc, #52]	; (8006c1c <main+0xfec>)
 8006be8:	fbb1 f1f7 	udiv	r1, r1, r7
 8006bec:	b28a      	uxth	r2, r1
 8006bee:	e6d6      	b.n	800699e <main+0xd6e>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <main+0xff0>)
 8006bf2:	f8c9 3018 	str.w	r3, [r9, #24]
 8006bf6:	e784      	b.n	8006b02 <main+0xed2>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8006bf8:	2219      	movs	r2, #25
 8006bfa:	fb02 f101 	mul.w	r1, r2, r1
      regCCR |= I2C_CCR_DUTY;
 8006bfe:	f44f 4680 	mov.w	r6, #16384	; 0x4000
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8006c02:	4a06      	ldr	r2, [pc, #24]	; (8006c1c <main+0xfec>)
 8006c04:	fbb2 f1f1 	udiv	r1, r2, r1
 8006c08:	b28a      	uxth	r2, r1
      regCCR |= I2C_CCR_DUTY;
 8006c0a:	e6c8      	b.n	800699e <main+0xd6e>
          H_NEXT(qp) = H_NEXT(hp);
 8006c0c:	680b      	ldr	r3, [r1, #0]
 8006c0e:	f8cb 3000 	str.w	r3, [fp]
 8006c12:	468c      	mov	ip, r1
 8006c14:	e7b6      	b.n	8006b84 <main+0xf54>
 8006c16:	bf00      	nop
 8006c18:	20001ba0 	.word	0x20001ba0
 8006c1c:	0280de80 	.word	0x0280de80
 8006c20:	c0303c00 	.word	0xc0303c00
	...

08006c30 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8006c30:	4b68      	ldr	r3, [pc, #416]	; (8006dd4 <__early_init+0x1a4>)
  gpiop->PUPDR   = config->pupdr;
 8006c32:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8006e1c <__early_init+0x1ec>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8006c36:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8006c38:	4867      	ldr	r0, [pc, #412]	; (8006dd8 <__early_init+0x1a8>)
 8006c3a:	4968      	ldr	r1, [pc, #416]	; (8006ddc <__early_init+0x1ac>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8006c3c:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8006c40:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8006c42:	611a      	str	r2, [r3, #16]
 8006c44:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8006c46:	4d66      	ldr	r5, [pc, #408]	; (8006de0 <__early_init+0x1b0>)
  gpiop->AFRL    = config->afrl;
 8006c48:	4f66      	ldr	r7, [pc, #408]	; (8006de4 <__early_init+0x1b4>)
  gpiop->OTYPER  = config->otyper;
 8006c4a:	4c67      	ldr	r4, [pc, #412]	; (8006de8 <__early_init+0x1b8>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8006c4c:	f022 021f 	bic.w	r2, r2, #31
 8006c50:	611a      	str	r2, [r3, #16]
 8006c52:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8006c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c56:	f042 021f 	orr.w	r2, r2, #31
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c5e:	f042 021f 	orr.w	r2, r2, #31
 8006c62:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8006c64:	f44f 7280 	mov.w	r2, #256	; 0x100
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8006c68:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8006c6a:	606a      	str	r2, [r5, #4]
  gpiop->ODR     = config->odr;
 8006c6c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8006c70:	f06f 0250 	mvn.w	r2, #80	; 0x50
 8006c74:	60aa      	str	r2, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8006c76:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRH    = config->afrh;
 8006c7a:	f44f 222a 	mov.w	r2, #696320	; 0xaa000
  gpiop->ODR     = config->odr;
 8006c7e:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8006c80:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 8006c82:	4f5a      	ldr	r7, [pc, #360]	; (8006dec <__early_init+0x1bc>)
  gpiop->AFRH    = config->afrh;
 8006c84:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8006c86:	2200      	movs	r2, #0
  gpiop->MODER   = config->moder;
 8006c88:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8006c8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 8006c8e:	4f58      	ldr	r7, [pc, #352]	; (8006df0 <__early_init+0x1c0>)
  gpiop->OTYPER  = config->otyper;
 8006c90:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006c92:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8006c94:	60c7      	str	r7, [r0, #12]
  gpiop->MODER   = config->moder;
 8006c96:	2780      	movs	r7, #128	; 0x80
  gpiop->ODR     = config->odr;
 8006c98:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8006c9a:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8006c9c:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006c9e:	6007      	str	r7, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8006ca0:	4f54      	ldr	r7, [pc, #336]	; (8006df4 <__early_init+0x1c4>)
  gpiop->OTYPER  = config->otyper;
 8006ca2:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006ca4:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8006ca6:	60cf      	str	r7, [r1, #12]
  gpiop->MODER   = config->moder;
 8006ca8:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 8006cac:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8006cae:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8006cb0:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006cb2:	600f      	str	r7, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8006cb4:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8006cb8:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 8006cbc:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006cbe:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8006cc0:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 8006cc2:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8006cc4:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8006cc6:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006cc8:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8006cca:	f8c0 2c04 	str.w	r2, [r0, #3076]	; 0xc04
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8006cce:	f5a4 34ce 	sub.w	r4, r4, #105472	; 0x19c00
  gpiop->OSPEEDR = config->ospeedr;
 8006cd2:	f8c0 5c08 	str.w	r5, [r0, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8006cd6:	f8c0 7c0c 	str.w	r7, [r0, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 8006cda:	f8c0 6c14 	str.w	r6, [r0, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 8006cde:	f8c0 2c20 	str.w	r2, [r0, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8006ce2:	f8c0 2c24 	str.w	r2, [r0, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8006ce6:	f8c0 2c00 	str.w	r2, [r0, #3072]	; 0xc00
  gpiop->PUPDR   = config->pupdr;
 8006cea:	4843      	ldr	r0, [pc, #268]	; (8006df8 <__early_init+0x1c8>)
  gpiop->OTYPER  = config->otyper;
 8006cec:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006cee:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8006cf0:	60c8      	str	r0, [r1, #12]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8006cf2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8006cf6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->ODR     = config->odr;
 8006cfa:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8006cfc:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8006cfe:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006d00:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8006d02:	641d      	str	r5, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8006d04:	6020      	str	r0, [r4, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	f042 0201 	orr.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	0796      	lsls	r6, r2, #30
 8006d12:	d5fc      	bpl.n	8006d0e <__early_init+0xde>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8006d14:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8006d16:	4a2f      	ldr	r2, [pc, #188]	; (8006dd4 <__early_init+0x1a4>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8006d18:	f021 0103 	bic.w	r1, r1, #3
 8006d1c:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8006d1e:	6893      	ldr	r3, [r2, #8]
 8006d20:	f013 030c 	ands.w	r3, r3, #12
 8006d24:	d1fb      	bne.n	8006d1e <__early_init+0xee>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8006d26:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8006d28:	492a      	ldr	r1, [pc, #168]	; (8006dd4 <__early_init+0x1a4>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8006d2a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8006d2e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8006d30:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8006d32:	6813      	ldr	r3, [r2, #0]
 8006d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d38:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8006d3a:	680b      	ldr	r3, [r1, #0]
 8006d3c:	039d      	lsls	r5, r3, #14
 8006d3e:	d5fc      	bpl.n	8006d3a <__early_init+0x10a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8006d40:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8006d42:	4b24      	ldr	r3, [pc, #144]	; (8006dd4 <__early_init+0x1a4>)
  RCC->CSR |= RCC_CSR_LSION;
 8006d44:	f042 0201 	orr.w	r2, r2, #1
 8006d48:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8006d4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006d4c:	0794      	lsls	r4, r2, #30
 8006d4e:	d5fc      	bpl.n	8006d4a <__early_init+0x11a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8006d50:	4a2a      	ldr	r2, [pc, #168]	; (8006dfc <__early_init+0x1cc>)
 8006d52:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8006d54:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8006d56:	492a      	ldr	r1, [pc, #168]	; (8006e00 <__early_init+0x1d0>)
  RCC->CR |= RCC_CR_PLLON;
 8006d58:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006d5c:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8006d5e:	684b      	ldr	r3, [r1, #4]
 8006d60:	0458      	lsls	r0, r3, #17
 8006d62:	d5fc      	bpl.n	8006d5e <__early_init+0x12e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8006d64:	4b1b      	ldr	r3, [pc, #108]	; (8006dd4 <__early_init+0x1a4>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	0192      	lsls	r2, r2, #6
 8006d6a:	d5fc      	bpl.n	8006d66 <__early_init+0x136>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8006d6c:	4925      	ldr	r1, [pc, #148]	; (8006e04 <__early_init+0x1d4>)
 8006d6e:	6099      	str	r1, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8006d70:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <__early_init+0x1d8>)
    RCC->DCKCFGR = dckcfgr |
 8006d72:	2103      	movs	r1, #3
 8006d74:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	4b24      	ldr	r3, [pc, #144]	; (8006e0c <__early_init+0x1dc>)
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d01e      	beq.n	8006dbe <__early_init+0x18e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8006d80:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <__early_init+0x1e0>)
 8006d82:	f240 7202 	movw	r2, #1794	; 0x702
 8006d86:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8006d88:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <__early_init+0x1e0>)
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d1fa      	bne.n	8006d8a <__early_init+0x15a>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8006d94:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <__early_init+0x1a4>)
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	f042 0202 	orr.w	r2, r2, #2
 8006d9c:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	f002 020c 	and.w	r2, r2, #12
 8006da4:	2a08      	cmp	r2, #8
 8006da6:	d1fa      	bne.n	8006d9e <__early_init+0x16e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8006da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dae:	645a      	str	r2, [r3, #68]	; 0x44
 8006db0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db6:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8006db8:	bcf0      	pop	{r4, r5, r6, r7}
 8006dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbc:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8006dbe:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <__early_init+0x1e4>)
 8006dc0:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <__early_init+0x1e8>)
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d1db      	bne.n	8006d80 <__early_init+0x150>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8006dc8:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <__early_init+0x1e0>)
 8006dca:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e7da      	b.n	8006d88 <__early_init+0x158>
 8006dd2:	bf00      	nop
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	40020400 	.word	0x40020400
 8006ddc:	40020800 	.word	0x40020800
 8006de0:	40020000 	.word	0x40020000
 8006de4:	55507700 	.word	0x55507700
 8006de8:	40020c00 	.word	0x40020c00
 8006dec:	2a80a9a0 	.word	0x2a80a9a0
 8006df0:	55555455 	.word	0x55555455
 8006df4:	01555555 	.word	0x01555555
 8006df8:	55555550 	.word	0x55555550
 8006dfc:	07415419 	.word	0x07415419
 8006e00:	40007000 	.word	0x40007000
 8006e04:	38881000 	.word	0x38881000
 8006e08:	e0042000 	.word	0xe0042000
 8006e0c:	20006411 	.word	0x20006411
 8006e10:	40023c00 	.word	0x40023c00
 8006e14:	e000ed00 	.word	0xe000ed00
 8006e18:	410fc241 	.word	0x410fc241
 8006e1c:	64150005 	.word	0x64150005

08006e20 <Vector15C>:
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8006e20:	b508      	push	{r3, lr}
  serve_interrupt(&SD6);
 8006e22:	4803      	ldr	r0, [pc, #12]	; (8006e30 <Vector15C+0x10>)
 8006e24:	f7fa fac4 	bl	80013b0 <serve_interrupt>
}
 8006e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8006e2c:	f7fa b850 	b.w	8000ed0 <_port_irq_epilogue>
 8006e30:	200011e0 	.word	0x200011e0
	...

08006e40 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8006e40:	b508      	push	{r3, lr}
  serve_interrupt(&SD2);
 8006e42:	4803      	ldr	r0, [pc, #12]	; (8006e50 <VectorD8+0x10>)
 8006e44:	f7fa fab4 	bl	80013b0 <serve_interrupt>
}
 8006e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8006e4c:	f7fa b840 	b.w	8000ed0 <_port_irq_epilogue>
 8006e50:	20000f84 	.word	0x20000f84
	...

08006e60 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8006e60:	b508      	push	{r3, lr}
  serve_interrupt(&SD1);
 8006e62:	4803      	ldr	r0, [pc, #12]	; (8006e70 <VectorD4+0x10>)
 8006e64:	f7fa faa4 	bl	80013b0 <serve_interrupt>
}
 8006e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8006e6c:	f7fa b830 	b.w	8000ed0 <_port_irq_epilogue>
 8006e70:	20000d28 	.word	0x20000d28
	...

08006e80 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8006e80:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD3);
 8006e82:	4803      	ldr	r0, [pc, #12]	; (8006e90 <VectorB4+0x10>)
 8006e84:	f7fa fb5c 	bl	8001540 <pwm_lld_serve_interrupt>
}
 8006e88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8006e8c:	f7fa b820 	b.w	8000ed0 <_port_irq_epilogue>
 8006e90:	20000d0c 	.word	0x20000d0c
	...

08006ea0 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8006ea0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD2);
 8006ea2:	4803      	ldr	r0, [pc, #12]	; (8006eb0 <VectorB0+0x10>)
 8006ea4:	f7fa fb4c 	bl	8001540 <pwm_lld_serve_interrupt>
}
 8006ea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8006eac:	f7fa b810 	b.w	8000ed0 <_port_irq_epilogue>
 8006eb0:	20000cf0 	.word	0x20000cf0
	...

08006ec0 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8006ec0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD1);
 8006ec2:	4803      	ldr	r0, [pc, #12]	; (8006ed0 <VectorA4+0x10>)
 8006ec4:	f7fa fb3c 	bl	8001540 <pwm_lld_serve_interrupt>
}
 8006ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8006ecc:	f7fa b800 	b.w	8000ed0 <_port_irq_epilogue>
 8006ed0:	20000cd4 	.word	0x20000cd4
	...

08006ee0 <VectorAC>:
 8006ee0:	f7ff bfee 	b.w	8006ec0 <VectorA4>
	...

08006ef0 <VectorB8>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8006ef0:	4812      	ldr	r0, [pc, #72]	; (8006f3c <VectorB8+0x4c>)
 8006ef2:	68c2      	ldr	r2, [r0, #12]
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8006ef4:	b508      	push	{r3, lr}
  sr  = gptp->tim->SR;
 8006ef6:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8006ef8:	68d1      	ldr	r1, [r2, #12]
 8006efa:	400b      	ands	r3, r1
 8006efc:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 8006efe:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8006f00:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8006f02:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8006f04:	d507      	bpl.n	8006f16 <VectorB8+0x26>
    _gpt_isr_invoke_cb(gptp);
 8006f06:	7803      	ldrb	r3, [r0, #0]
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d008      	beq.n	8006f1e <VectorB8+0x2e>
 8006f0c:	6843      	ldr	r3, [r0, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	b10b      	cbz	r3, 8006f16 <VectorB8+0x26>
 8006f12:	480a      	ldr	r0, [pc, #40]	; (8006f3c <VectorB8+0x4c>)
 8006f14:	4798      	blx	r3
}
 8006f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8006f1a:	f7f9 bfd9 	b.w	8000ed0 <_port_irq_epilogue>
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8006f1e:	2300      	movs	r3, #0
    _gpt_isr_invoke_cb(gptp);
 8006f20:	2102      	movs	r1, #2
 8006f22:	7001      	strb	r1, [r0, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8006f24:	6013      	str	r3, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8006f26:	6113      	str	r3, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8006f28:	68d3      	ldr	r3, [r2, #12]
 8006f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f2e:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 8006f30:	6843      	ldr	r3, [r0, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ec      	bne.n	8006f12 <VectorB8+0x22>
 8006f38:	e7ed      	b.n	8006f16 <VectorB8+0x26>
 8006f3a:	bf00      	nop
 8006f3c:	20000c8c 	.word	0x20000c8c

08006f40 <Vector108>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8006f44:	4c28      	ldr	r4, [pc, #160]	; (8006fe8 <Vector108+0xa8>)
 8006f46:	6923      	ldr	r3, [r4, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8006f48:	68e2      	ldr	r2, [r4, #12]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8006f4e:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8006f50:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8006f52:	6122      	str	r2, [r4, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8006f54:	d403      	bmi.n	8006f5e <Vector108+0x1e>
}
 8006f56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8006f5a:	f7f9 bfb9 	b.w	8000ed0 <_port_irq_epilogue>
 8006f5e:	2320      	movs	r3, #32
 8006f60:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8006f64:	4d21      	ldr	r5, [pc, #132]	; (8006fec <Vector108+0xac>)
 8006f66:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006f68:	69ab      	ldr	r3, [r5, #24]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8006f6a:	6a6a      	ldr	r2, [r5, #36]	; 0x24

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8006f6c:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8006f6e:	1abe      	subs	r6, r7, r2
 8006f70:	42b1      	cmp	r1, r6
 8006f72:	f105 0918 	add.w	r9, r5, #24
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8006f76:	bf98      	it	ls
 8006f78:	f04f 0800 	movls.w	r8, #0
    if (nowdelta < vtp->delta) {
 8006f7c:	d820      	bhi.n	8006fc0 <Vector108+0x80>
 8006f7e:	2720      	movs	r7, #32
 8006f80:	e000      	b.n	8006f84 <Vector108+0x44>
 8006f82:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8006f84:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8006f86:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8006f88:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8006f8a:	626a      	str	r2, [r5, #36]	; 0x24
      nowdelta -= vtp->delta;
 8006f8c:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8006f90:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8006f92:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8006f96:	61a8      	str	r0, [r5, #24]
      vtp->func = NULL;
 8006f98:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 8006f9c:	bf08      	it	eq
 8006f9e:	f8c4 800c 	streq.w	r8, [r4, #12]
 8006fa2:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8006fa6:	6918      	ldr	r0, [r3, #16]
 8006fa8:	4790      	blx	r2
 8006faa:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8006fae:	69ab      	ldr	r3, [r5, #24]
    }
    while (vtp->delta <= nowdelta);
 8006fb0:	6899      	ldr	r1, [r3, #8]
 8006fb2:	428e      	cmp	r6, r1
 8006fb4:	d2e5      	bcs.n	8006f82 <Vector108+0x42>
  return (systime_t)STM32_ST_TIM->CNT;
 8006fb6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8006fb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006fba:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 8006fbc:	428e      	cmp	r6, r1
 8006fbe:	d2de      	bcs.n	8006f7e <Vector108+0x3e>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8006fc0:	454b      	cmp	r3, r9
 8006fc2:	d00a      	beq.n	8006fda <Vector108+0x9a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8006fc4:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8006fc6:	626f      	str	r7, [r5, #36]	; 0x24
  ch.vtlist.next->delta -= nowdelta;
 8006fc8:	1bc9      	subs	r1, r1, r7
 8006fca:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8006fcc:	4906      	ldr	r1, [pc, #24]	; (8006fe8 <Vector108+0xa8>)
 8006fce:	609a      	str	r2, [r3, #8]
  return systime + (systime_t)interval;
 8006fd0:	2a02      	cmp	r2, #2
 8006fd2:	bf2c      	ite	cs
 8006fd4:	18bf      	addcs	r7, r7, r2
 8006fd6:	3702      	addcc	r7, #2
 8006fd8:	634f      	str	r7, [r1, #52]	; 0x34
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f383 8811 	msr	BASEPRI, r3
}
 8006fe0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8006fe4:	f7f9 bf74 	b.w	8000ed0 <_port_irq_epilogue>
 8006fe8:	40000c00 	.word	0x40000c00
 8006fec:	200019e0 	.word	0x200019e0

08006ff0 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8006ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8006ff4:	4c9f      	ldr	r4, [pc, #636]	; (8007274 <Vector14C+0x284>)
 8006ff6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 8006ff8:	6975      	ldr	r5, [r6, #20]
  sts &= otgp->GINTMSK;
 8006ffa:	69b3      	ldr	r3, [r6, #24]
 8006ffc:	401d      	ands	r5, r3
  if (sts & GINTSTS_USBRST) {
 8006ffe:	f415 5880 	ands.w	r8, r5, #4096	; 0x1000
  otgp->GINTSTS = sts;
 8007002:	6175      	str	r5, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 8007004:	f040 8138 	bne.w	8007278 <Vector14C+0x288>
  if (sts & GINTSTS_WKUPINT) {
 8007008:	2d00      	cmp	r5, #0
 800700a:	f2c0 80c2 	blt.w	8007192 <Vector14C+0x1a2>
  if (sts & GINTSTS_USBSUSP) {
 800700e:	0529      	lsls	r1, r5, #20
 8007010:	d538      	bpl.n	8007084 <Vector14C+0x94>
    otg_disable_ep(usbp);
 8007012:	e9d4 7315 	ldrd	r7, r3, [r4, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007016:	2100      	movs	r1, #0
 8007018:	f8d3 9008 	ldr.w	r9, [r3, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800701c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007020:	e000      	b.n	8007024 <Vector14C+0x34>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007022:	4671      	mov	r1, lr
 8007024:	eb07 1241 	add.w	r2, r7, r1, lsl #5
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8007028:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 800702a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800702e:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007030:	f101 0e01 	add.w	lr, r1, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8007034:	da05      	bge.n	8007042 <Vector14C+0x52>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8007036:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800703a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800703e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8007042:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8007046:	2800      	cmp	r0, #0
 8007048:	da05      	bge.n	8007056 <Vector14C+0x66>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 800704a:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 800704e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8007052:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007056:	4589      	cmp	r9, r1
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8007058:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800705c:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007060:	d1df      	bne.n	8007022 <Vector14C+0x32>
  usbp->saved_state = usbp->state;
 8007062:	7822      	ldrb	r2, [r4, #0]
 8007064:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8007068:	6863      	ldr	r3, [r4, #4]
  usbp->state       = USB_SUSPENDED;
 800706a:	2205      	movs	r2, #5
 800706c:	7022      	strb	r2, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800706e:	681b      	ldr	r3, [r3, #0]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8007070:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8007074:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
 8007078:	b113      	cbz	r3, 8007080 <Vector14C+0x90>
 800707a:	487e      	ldr	r0, [pc, #504]	; (8007274 <Vector14C+0x284>)
 800707c:	2104      	movs	r1, #4
 800707e:	4798      	blx	r3
  usbp->transmitting  = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	60a3      	str	r3, [r4, #8]
  if (sts & GINTSTS_ENUMDNE) {
 8007084:	04aa      	lsls	r2, r5, #18
 8007086:	d50c      	bpl.n	80070a2 <Vector14C+0xb2>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8007088:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800708c:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8007090:	68f3      	ldr	r3, [r6, #12]
 8007092:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8007096:	bf0c      	ite	eq
 8007098:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800709c:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 80070a0:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
 80070a2:	072b      	lsls	r3, r5, #28
 80070a4:	d429      	bmi.n	80070fa <Vector14C+0x10a>
  if (sts & GINTSTS_IISOIXFR) {
 80070a6:	02ef      	lsls	r7, r5, #11
 80070a8:	d42f      	bmi.n	800710a <Vector14C+0x11a>
  if (sts & GINTSTS_IISOOXFR) {
 80070aa:	02a8      	lsls	r0, r5, #10
 80070ac:	f100 80b6 	bmi.w	800721c <Vector14C+0x22c>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 80070b0:	06eb      	lsls	r3, r5, #27
 80070b2:	f100 8088 	bmi.w	80071c6 <Vector14C+0x1d6>
  if (sts & GINTSTS_OEPINT) {
 80070b6:	0329      	lsls	r1, r5, #12
  src = otgp->DAINT;
 80070b8:	f8d6 4818 	ldr.w	r4, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 80070bc:	d50b      	bpl.n	80070d6 <Vector14C+0xe6>
    if (src & (1 << 16))
 80070be:	03e2      	lsls	r2, r4, #15
 80070c0:	f100 8194 	bmi.w	80073ec <Vector14C+0x3fc>
    if (src & (1 << 17))
 80070c4:	03a3      	lsls	r3, r4, #14
 80070c6:	f100 8187 	bmi.w	80073d8 <Vector14C+0x3e8>
    if (src & (1 << 18))
 80070ca:	0367      	lsls	r7, r4, #13
 80070cc:	f100 818a 	bmi.w	80073e4 <Vector14C+0x3f4>
    if (src & (1 << 19))
 80070d0:	0326      	lsls	r6, r4, #12
 80070d2:	f100 8149 	bmi.w	8007368 <Vector14C+0x378>
  if (sts & GINTSTS_IEPINT) {
 80070d6:	036d      	lsls	r5, r5, #13
 80070d8:	d50b      	bpl.n	80070f2 <Vector14C+0x102>
    if (src & (1 << 0))
 80070da:	07e0      	lsls	r0, r4, #31
 80070dc:	f100 8192 	bmi.w	8007404 <Vector14C+0x414>
    if (src & (1 << 1))
 80070e0:	07a1      	lsls	r1, r4, #30
 80070e2:	f100 818b 	bmi.w	80073fc <Vector14C+0x40c>
    if (src & (1 << 2))
 80070e6:	0762      	lsls	r2, r4, #29
 80070e8:	f100 8184 	bmi.w	80073f4 <Vector14C+0x404>
    if (src & (1 << 3))
 80070ec:	0723      	lsls	r3, r4, #28
 80070ee:	f100 8142 	bmi.w	8007376 <Vector14C+0x386>
}
 80070f2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80070f6:	f7f9 beeb 	b.w	8000ed0 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
 80070fa:	6863      	ldr	r3, [r4, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0d1      	beq.n	80070a6 <Vector14C+0xb6>
 8007102:	485c      	ldr	r0, [pc, #368]	; (8007274 <Vector14C+0x284>)
 8007104:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8007106:	02ef      	lsls	r7, r5, #11
 8007108:	d5cf      	bpl.n	80070aa <Vector14C+0xba>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800710a:	2100      	movs	r1, #0
  stm32_otg_t *otgp = usbp->otg;
 800710c:	f8d4 b054 	ldr.w	fp, [r4, #84]	; 0x54
      _usb_isr_invoke_in_cb(usbp, ep);
 8007110:	f8df a160 	ldr.w	sl, [pc, #352]	; 8007274 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8007114:	460f      	mov	r7, r1
      _usb_isr_invoke_in_cb(usbp, ep);
 8007116:	f04f 0901 	mov.w	r9, #1
 800711a:	e006      	b.n	800712a <Vector14C+0x13a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800711c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800711e:	3701      	adds	r7, #1
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	b2ff      	uxtb	r7, r7
 8007124:	429f      	cmp	r7, r3
 8007126:	4639      	mov	r1, r7
 8007128:	d8bf      	bhi.n	80070aa <Vector14C+0xba>
 800712a:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 800712e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007132:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8007136:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800713a:	d1ef      	bne.n	800711c <Vector14C+0x12c>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 800713c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8007140:	2a00      	cmp	r2, #0
 8007142:	daeb      	bge.n	800711c <Vector14C+0x12c>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8007144:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007148:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 800714c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8007150:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007154:	2a00      	cmp	r2, #0
 8007156:	dbfb      	blt.n	8007150 <Vector14C+0x160>
      otg_txfifo_flush(usbp, ep);
 8007158:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800715a:	0189      	lsls	r1, r1, #6
 800715c:	f041 0120 	orr.w	r1, r1, #32
 8007160:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8007162:	6913      	ldr	r3, [r2, #16]
 8007164:	0699      	lsls	r1, r3, #26
 8007166:	d4fc      	bmi.n	8007162 <Vector14C+0x172>
 8007168:	2012      	movs	r0, #18
 800716a:	f7fa f909 	bl	8001380 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
 800716e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8007172:	8921      	ldrh	r1, [r4, #8]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	fa09 f307 	lsl.w	r3, r9, r7
 800717a:	6892      	ldr	r2, [r2, #8]
 800717c:	ea21 0303 	bic.w	r3, r1, r3
 8007180:	8123      	strh	r3, [r4, #8]
 8007182:	b112      	cbz	r2, 800718a <Vector14C+0x19a>
 8007184:	4639      	mov	r1, r7
 8007186:	4650      	mov	r0, sl
 8007188:	4790      	blx	r2
      otg_txfifo_handler(usbp, ep);
 800718a:	4638      	mov	r0, r7
 800718c:	f7f9 fd18 	bl	8000bc0 <otg_txfifo_handler.constprop.0>
 8007190:	e7c4      	b.n	800711c <Vector14C+0x12c>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8007192:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8007196:	0798      	lsls	r0, r3, #30
 8007198:	f040 80df 	bne.w	800735a <Vector14C+0x36a>
  usbp->state = usbp->saved_state;
 800719c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80071a0:	6862      	ldr	r2, [r4, #4]
  usbp->state = usbp->saved_state;
 80071a2:	7023      	strb	r3, [r4, #0]
    otgp->DCTL &= ~DCTL_RWUSIG;
 80071a4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80071a8:	6812      	ldr	r2, [r2, #0]
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	f43f af2b 	beq.w	800700e <Vector14C+0x1e>
 80071b8:	2105      	movs	r1, #5
 80071ba:	482e      	ldr	r0, [pc, #184]	; (8007274 <Vector14C+0x284>)
 80071bc:	4790      	blx	r2
  if (sts & GINTSTS_USBSUSP) {
 80071be:	0529      	lsls	r1, r5, #20
 80071c0:	f57f af60 	bpl.w	8007084 <Vector14C+0x94>
 80071c4:	e725      	b.n	8007012 <Vector14C+0x22>
  sts = usbp->otg->GRXSTSP;
 80071c6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80071c8:	6a0b      	ldr	r3, [r1, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80071ca:	f403 10f0 	and.w	r0, r3, #1966080	; 0x1e0000
 80071ce:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 80071d2:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 80071d6:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80071da:	f000 80d3 	beq.w	8007384 <Vector14C+0x394>
 80071de:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 80071e2:	f47f af68 	bne.w	80070b6 <Vector14C+0xc6>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 80071e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	6a18      	ldr	r0, [r3, #32]
  while (i < n) {
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	f43f af61 	beq.w	80070b6 <Vector14C+0xc6>
      w = *fifop;
 80071f4:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
  size_t i = 0;
 80071f8:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 80071fa:	079f      	lsls	r7, r3, #30
      w = *fifop;
 80071fc:	bf08      	it	eq
 80071fe:	f8d4 8000 	ldreq.w	r8, [r4]
    if (i < max) {
 8007202:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
 8007204:	4601      	mov	r1, r0
    i++;
 8007206:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 800720a:	d804      	bhi.n	8007216 <Vector14C+0x226>
      *buf++ = (uint8_t)w;
 800720c:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8007210:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 8007214:	4608      	mov	r0, r1
  while (i < n) {
 8007216:	429a      	cmp	r2, r3
 8007218:	d1ef      	bne.n	80071fa <Vector14C+0x20a>
 800721a:	e74c      	b.n	80070b6 <Vector14C+0xc6>
  stm32_otg_t *otgp = usbp->otg;
 800721c:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 8007220:	f8df b050 	ldr.w	fp, [pc, #80]	; 8007274 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8007224:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8007226:	f04f 0a01 	mov.w	sl, #1
 800722a:	e006      	b.n	800723a <Vector14C+0x24a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800722c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800722e:	3701      	adds	r7, #1
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	b2ff      	uxtb	r7, r7
 8007234:	429f      	cmp	r7, r3
 8007236:	f63f af3b 	bhi.w	80070b0 <Vector14C+0xc0>
 800723a:	eb09 1247 	add.w	r2, r9, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800723e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007242:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007246:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800724a:	d1ef      	bne.n	800722c <Vector14C+0x23c>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 800724c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8007250:	2b00      	cmp	r3, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8007252:	eb04 0087 	add.w	r0, r4, r7, lsl #2
 8007256:	fa0a f107 	lsl.w	r1, sl, r7
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800725a:	dae7      	bge.n	800722c <Vector14C+0x23c>
      _usb_isr_invoke_out_cb(usbp, ep);
 800725c:	68c2      	ldr	r2, [r0, #12]
 800725e:	8963      	ldrh	r3, [r4, #10]
 8007260:	68d2      	ldr	r2, [r2, #12]
 8007262:	ea23 0301 	bic.w	r3, r3, r1
 8007266:	4658      	mov	r0, fp
 8007268:	4639      	mov	r1, r7
 800726a:	8163      	strh	r3, [r4, #10]
 800726c:	2a00      	cmp	r2, #0
 800726e:	d0dd      	beq.n	800722c <Vector14C+0x23c>
 8007270:	4790      	blx	r2
 8007272:	e7db      	b.n	800722c <Vector14C+0x23c>
 8007274:	200018fc 	.word	0x200018fc
  usbp->status        = 0;
 8007278:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
 800727a:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800727c:	2220      	movs	r2, #32
    usbp->epc[i] = NULL;
 800727e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8007282:	e9c4 3305 	strd	r3, r3, [r4, #20]
  usbp->status        = 0;
 8007286:	64e3      	str	r3, [r4, #76]	; 0x4c
  usbp->ep0state = USB_EP0_STP_WAITING;
 8007288:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  usbp->transmitting  = 0;
 800728c:	60a3      	str	r3, [r4, #8]
  usbp->state         = USB_READY;
 800728e:	7021      	strb	r1, [r4, #0]
 8007290:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8007292:	6935      	ldr	r5, [r6, #16]
 8007294:	f015 0520 	ands.w	r5, r5, #32
 8007298:	d1fb      	bne.n	8007292 <Vector14C+0x2a2>
 800729a:	2012      	movs	r0, #18
 800729c:	f7fa f870 	bl	8001380 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80072a0:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 80072a4:	f8c6 5834 	str.w	r5, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80072a8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80072ac:	f8dc 7008 	ldr.w	r7, [ip, #8]
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80072b0:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80072b4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80072b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072bc:	eb06 1345 	add.w	r3, r6, r5, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80072c0:	42af      	cmp	r7, r5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80072c2:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80072c6:	f105 0501 	add.w	r5, r5, #1
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80072ca:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80072ce:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80072d2:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80072d6:	d1f1      	bne.n	80072bc <Vector14C+0x2cc>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80072d8:	f8dc 3000 	ldr.w	r3, [ip]
 80072dc:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80072de:	f8dc 2000 	ldr.w	r2, [ip]
  otg_rxfifo_flush(usbp);
 80072e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80072e4:	6272      	str	r2, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 80072e6:	2210      	movs	r2, #16
 80072e8:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 80072ea:	691d      	ldr	r5, [r3, #16]
 80072ec:	f015 0510 	ands.w	r5, r5, #16
 80072f0:	d1fb      	bne.n	80072ea <Vector14C+0x2fa>
 80072f2:	2012      	movs	r0, #18
 80072f4:	f7fa f844 	bl	8001380 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 80072f8:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80072fc:	6861      	ldr	r1, [r4, #4]
  next = usbp->pmnext;
 80072fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007300:	680f      	ldr	r7, [r1, #0]
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8007302:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007306:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800730a:	69b3      	ldr	r3, [r6, #24]
 800730c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007310:	f043 0310 	orr.w	r3, r3, #16
 8007314:	61b3      	str	r3, [r6, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8007316:	2309      	movs	r3, #9
 8007318:	f8c6 3810 	str.w	r3, [r6, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800731c:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8007320:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8007324:	f8c6 3b10 	str.w	r3, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8007328:	4b38      	ldr	r3, [pc, #224]	; (800740c <Vector14C+0x41c>)
 800732a:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 800732e:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8007332:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
  usbp->pmnext += size;
 8007336:	f102 0310 	add.w	r3, r2, #16
 800733a:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800733c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  usbp->epc[0] = &ep0config;
 8007340:	4b33      	ldr	r3, [pc, #204]	; (8007410 <Vector14C+0x420>)
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8007342:	62b2      	str	r2, [r6, #40]	; 0x28
  usbp->epc[0] = &ep0config;
 8007344:	60e3      	str	r3, [r4, #12]
 8007346:	2f00      	cmp	r7, #0
 8007348:	f43f aed3 	beq.w	80070f2 <Vector14C+0x102>
 800734c:	4629      	mov	r1, r5
 800734e:	4831      	ldr	r0, [pc, #196]	; (8007414 <Vector14C+0x424>)
 8007350:	47b8      	blx	r7
}
 8007352:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8007356:	f7f9 bdbb 	b.w	8000ed0 <_port_irq_epilogue>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 800735a:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
 8007366:	e719      	b.n	800719c <Vector14C+0x1ac>
      otg_epout_handler(usbp, 3);
 8007368:	2003      	movs	r0, #3
 800736a:	f7fa fa61 	bl	8001830 <otg_epout_handler.constprop.0>
  if (sts & GINTSTS_IEPINT) {
 800736e:	036d      	lsls	r5, r5, #13
 8007370:	f57f aebf 	bpl.w	80070f2 <Vector14C+0x102>
 8007374:	e6b1      	b.n	80070da <Vector14C+0xea>
      otg_epin_handler(usbp, 3);
 8007376:	2003      	movs	r0, #3
 8007378:	f7fa f9d2 	bl	8001720 <otg_epin_handler.constprop.0>
}
 800737c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8007380:	f7f9 bda6 	b.w	8000ed0 <_port_irq_epilogue>
                            usbp->epc[ep]->out_state->rxbuf,
 8007384:	f103 0a02 	add.w	sl, r3, #2
 8007388:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8007390:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	eba0 0e09 	sub.w	lr, r0, r9
  while (i < n) {
 800739a:	b1c2      	cbz	r2, 80073ce <Vector14C+0x3de>
      w = *fifop;
 800739c:	f501 5c80 	add.w	ip, r1, #4096	; 0x1000
  size_t i = 0;
 80073a0:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 80073a2:	0798      	lsls	r0, r3, #30
      w = *fifop;
 80073a4:	bf08      	it	eq
 80073a6:	f8dc 8000 	ldreq.w	r8, [ip]
    if (i < max) {
 80073aa:	459e      	cmp	lr, r3
      *buf++ = (uint8_t)w;
 80073ac:	4639      	mov	r1, r7
    i++;
 80073ae:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 80073b2:	d904      	bls.n	80073be <Vector14C+0x3ce>
      *buf++ = (uint8_t)w;
 80073b4:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 80073b8:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 80073bc:	460f      	mov	r7, r1
  while (i < n) {
 80073be:	429a      	cmp	r2, r3
 80073c0:	d1ef      	bne.n	80073a2 <Vector14C+0x3b2>
 80073c2:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80073c6:	6863      	ldr	r3, [r4, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 80073ce:	4417      	add	r7, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80073d0:	444a      	add	r2, r9
 80073d2:	e9c3 2701 	strd	r2, r7, [r3, #4]
 80073d6:	e66e      	b.n	80070b6 <Vector14C+0xc6>
      otg_epout_handler(usbp, 1);
 80073d8:	2001      	movs	r0, #1
 80073da:	f7fa fa29 	bl	8001830 <otg_epout_handler.constprop.0>
    if (src & (1 << 18))
 80073de:	0367      	lsls	r7, r4, #13
 80073e0:	f57f ae76 	bpl.w	80070d0 <Vector14C+0xe0>
      otg_epout_handler(usbp, 2);
 80073e4:	2002      	movs	r0, #2
 80073e6:	f7fa fa23 	bl	8001830 <otg_epout_handler.constprop.0>
 80073ea:	e671      	b.n	80070d0 <Vector14C+0xe0>
      otg_epout_handler(usbp, 0);
 80073ec:	2000      	movs	r0, #0
 80073ee:	f7fa fa1f 	bl	8001830 <otg_epout_handler.constprop.0>
 80073f2:	e667      	b.n	80070c4 <Vector14C+0xd4>
      otg_epin_handler(usbp, 2);
 80073f4:	2002      	movs	r0, #2
 80073f6:	f7fa f993 	bl	8001720 <otg_epin_handler.constprop.0>
 80073fa:	e677      	b.n	80070ec <Vector14C+0xfc>
      otg_epin_handler(usbp, 1);
 80073fc:	2001      	movs	r0, #1
 80073fe:	f7fa f98f 	bl	8001720 <otg_epin_handler.constprop.0>
 8007402:	e670      	b.n	80070e6 <Vector14C+0xf6>
      otg_epin_handler(usbp, 0);
 8007404:	2000      	movs	r0, #0
 8007406:	f7fa f98b 	bl	8001720 <otg_epin_handler.constprop.0>
 800740a:	e669      	b.n	80070e0 <Vector14C+0xf0>
 800740c:	10008040 	.word	0x10008040
 8007410:	08008c58 	.word	0x08008c58
 8007414:	200018fc 	.word	0x200018fc
	...

08007420 <VectorC0>:
  uint16_t sr = I2CD1.i2c->SR1;
 8007420:	4a36      	ldr	r2, [pc, #216]	; (80074fc <VectorC0+0xdc>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8007422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 8007424:	e9d2 500c 	ldrd	r5, r0, [r2, #48]	; 0x30
  uint16_t sr = I2CD1.i2c->SR1;
 8007428:	6944      	ldr	r4, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 800742a:	682b      	ldr	r3, [r5, #0]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800742c:	f404 415f 	and.w	r1, r4, #57088	; 0xdf00
 8007430:	43c9      	mvns	r1, r1
 8007432:	6141      	str	r1, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 8007434:	6819      	ldr	r1, [r3, #0]
 8007436:	f021 011f 	bic.w	r1, r1, #31
 800743a:	6019      	str	r1, [r3, #0]
  uint16_t sr = I2CD1.i2c->SR1;
 800743c:	b2a1      	uxth	r1, r4
  dmaStreamDisable(i2cp->dmatx);
 800743e:	681e      	ldr	r6, [r3, #0]
 8007440:	07f6      	lsls	r6, r6, #31
 8007442:	d4fc      	bmi.n	800743e <VectorC0+0x1e>
 8007444:	f895 c009 	ldrb.w	ip, [r5, #9]
  dmaStreamDisable(i2cp->dmarx);
 8007448:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 800744a:	686f      	ldr	r7, [r5, #4]
  dmaStreamDisable(i2cp->dmarx);
 800744c:	6835      	ldr	r5, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 800744e:	233d      	movs	r3, #61	; 0x3d
 8007450:	fa03 f30c 	lsl.w	r3, r3, ip
 8007454:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	f023 031f 	bic.w	r3, r3, #31
 800745c:	602b      	str	r3, [r5, #0]
 800745e:	682b      	ldr	r3, [r5, #0]
 8007460:	f013 0301 	ands.w	r3, r3, #1
 8007464:	d1fb      	bne.n	800745e <VectorC0+0x3e>
 8007466:	7a77      	ldrb	r7, [r6, #9]
 8007468:	6876      	ldr	r6, [r6, #4]
 800746a:	253d      	movs	r5, #61	; 0x3d
 800746c:	40bd      	lsls	r5, r7
 800746e:	6035      	str	r5, [r6, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8007470:	05cf      	lsls	r7, r1, #23
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8007472:	bf41      	itttt	mi
 8007474:	6945      	ldrmi	r5, [r0, #20]
 8007476:	f425 7580 	bicmi.w	r5, r5, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 800747a:	2301      	movmi	r3, #1
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 800747c:	6145      	strmi	r5, [r0, #20]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800747e:	058e      	lsls	r6, r1, #22
    i2cp->errors |= I2C_BUS_ERROR;
 8007480:	6093      	str	r3, [r2, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8007482:	bf44      	itt	mi
 8007484:	f043 0302 	orrmi.w	r3, r3, #2
 8007488:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800748a:	054d      	lsls	r5, r1, #21
 800748c:	d50a      	bpl.n	80074a4 <VectorC0+0x84>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800748e:	6845      	ldr	r5, [r0, #4]
 8007490:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8007494:	6045      	str	r5, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8007496:	6805      	ldr	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8007498:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800749c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80074a0:	6005      	str	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80074a2:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80074a4:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 80074a6:	bf44      	itt	mi
 80074a8:	f043 0308 	orrmi.w	r3, r3, #8
 80074ac:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80074ae:	044e      	lsls	r6, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 80074b0:	bf44      	itt	mi
 80074b2:	f043 0320 	orrmi.w	r3, r3, #32
 80074b6:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80074b8:	04cd      	lsls	r5, r1, #19
 80074ba:	d516      	bpl.n	80074ea <VectorC0+0xca>
    i2cp->errors |= I2C_PEC_ERROR;
 80074bc:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80074c0:	0420      	lsls	r0, r4, #16
    i2cp->errors |= I2C_PEC_ERROR;
 80074c2:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80074c4:	d502      	bpl.n	80074cc <VectorC0+0xac>
    i2cp->errors |= I2C_SMB_ALERT;
 80074c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ca:	6093      	str	r3, [r2, #8]
 80074cc:	2320      	movs	r3, #32
 80074ce:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 80074d2:	480b      	ldr	r0, [pc, #44]	; (8007500 <VectorC0+0xe0>)
 80074d4:	f06f 0101 	mvn.w	r1, #1
 80074d8:	f7f9 fe52 	bl	8001180 <chThdResumeI>
 80074dc:	2300      	movs	r3, #0
 80074de:	f383 8811 	msr	BASEPRI, r3
}
 80074e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80074e6:	f7f9 bcf3 	b.w	8000ed0 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80074ea:	0421      	lsls	r1, r4, #16
 80074ec:	d4eb      	bmi.n	80074c6 <VectorC0+0xa6>
  if (i2cp->errors != I2C_NO_ERROR)
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1ec      	bne.n	80074cc <VectorC0+0xac>
}
 80074f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80074f6:	f7f9 bceb 	b.w	8000ed0 <_port_irq_epilogue>
 80074fa:	bf00      	nop
 80074fc:	20000c9c 	.word	0x20000c9c
 8007500:	20000cb8 	.word	0x20000cb8
	...

08007510 <VectorBC>:
  I2C_TypeDef *dp = i2cp->i2c;
 8007510:	4843      	ldr	r0, [pc, #268]	; (8007620 <VectorBC+0x110>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8007512:	4a44      	ldr	r2, [pc, #272]	; (8007624 <VectorBC+0x114>)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8007514:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8007516:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8007518:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800751a:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800751c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8007520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007524:	4293      	cmp	r3, r2
 8007526:	d05f      	beq.n	80075e8 <VectorBC+0xd8>
 8007528:	d833      	bhi.n	8007592 <VectorBC+0x82>
 800752a:	3a07      	subs	r2, #7
 800752c:	4293      	cmp	r3, r2
 800752e:	d024      	beq.n	800757a <VectorBC+0x6a>
 8007530:	3201      	adds	r2, #1
 8007532:	4293      	cmp	r3, r2
 8007534:	d11e      	bne.n	8007574 <VectorBC+0x64>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8007536:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8007538:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800753a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800753e:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8007540:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	f042 0201 	orr.w	r2, r2, #1
 8007548:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800754a:	6862      	ldr	r2, [r4, #4]
 800754c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007550:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d942      	bls.n	80075de <VectorBC+0xce>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8007558:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800755c:	bf18      	it	ne
 800755e:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8007560:	05eb      	lsls	r3, r5, #23
 8007562:	d503      	bpl.n	800756c <VectorBC+0x5c>
    dp->SR1 &= ~I2C_SR1_BERR;
 8007564:	6963      	ldr	r3, [r4, #20]
 8007566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800756a:	6163      	str	r3, [r4, #20]
}
 800756c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8007570:	f7f9 bcae 	b.w	8000ed0 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8007574:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007578:	d1ee      	bne.n	8007558 <VectorBC+0x48>
    if ((i2cp->addr >> 8) > 0) {
 800757a:	8c03      	ldrh	r3, [r0, #32]
 800757c:	0a1a      	lsrs	r2, r3, #8
 800757e:	d036      	beq.n	80075ee <VectorBC+0xde>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8007580:	f002 0206 	and.w	r2, r2, #6
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	4313      	orrs	r3, r2
 800758a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800758e:	6123      	str	r3, [r4, #16]
 8007590:	e7e2      	b.n	8007558 <VectorBC+0x48>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8007592:	4a25      	ldr	r2, [pc, #148]	; (8007628 <VectorBC+0x118>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d032      	beq.n	80075fe <VectorBC+0xee>
 8007598:	3202      	adds	r2, #2
 800759a:	4293      	cmp	r3, r2
 800759c:	d1dc      	bne.n	8007558 <VectorBC+0x48>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800759e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    (void)dp->DR; /* clear BTF.*/
 80075a0:	6922      	ldr	r2, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685e      	ldr	r6, [r3, #4]
 80075a6:	b146      	cbz	r6, 80075ba <VectorBC+0xaa>
      i2cp->addr |= 0x01;
 80075a8:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80075aa:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 80075ac:	f042 0201 	orr.w	r2, r2, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80075b0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 80075b4:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	e7d8      	b.n	800756c <VectorBC+0x5c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80075ba:	6863      	ldr	r3, [r4, #4]
 80075bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075c0:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	2320      	movs	r3, #32
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	301c      	adds	r0, #28
 80075d2:	4631      	mov	r1, r6
 80075d4:	f7f9 fdd4 	bl	8001180 <chThdResumeI>
 80075d8:	f386 8811 	msr	BASEPRI, r6
 80075dc:	e7bc      	b.n	8007558 <VectorBC+0x48>
      dp->CR1 &= ~I2C_CR1_ACK;
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	e7b7      	b.n	8007558 <VectorBC+0x48>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80075e8:	8c03      	ldrh	r3, [r0, #32]
 80075ea:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80075ee:	6123      	str	r3, [r4, #16]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80075f0:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 80075f4:	bf18      	it	ne
 80075f6:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 80075f8:	05eb      	lsls	r3, r5, #23
 80075fa:	d5b7      	bpl.n	800756c <VectorBC+0x5c>
 80075fc:	e7b2      	b.n	8007564 <VectorBC+0x54>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80075fe:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8007600:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8007602:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8007606:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8007608:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	f043 0301 	orr.w	r3, r3, #1
 8007610:	6013      	str	r3, [r2, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8007612:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8007616:	bf18      	it	ne
 8007618:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 800761a:	05eb      	lsls	r3, r5, #23
 800761c:	d5a6      	bpl.n	800756c <VectorBC+0x5c>
 800761e:	e7a1      	b.n	8007564 <VectorBC+0x54>
 8007620:	20000c9c 	.word	0x20000c9c
 8007624:	00030008 	.word	0x00030008
 8007628:	00070082 	.word	0x00070082
 800762c:	00000000 	.word	0x00000000

08007630 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8007630:	4b08      	ldr	r3, [pc, #32]	; (8007654 <Vector158+0x24>)
  if (dma.streams[15].func)
 8007632:	4809      	ldr	r0, [pc, #36]	; (8007658 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8007634:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8007636:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8007638:	0d89      	lsrs	r1, r1, #22
 800763a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800763e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8007640:	058c      	lsls	r4, r1, #22
 8007642:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8007644:	b112      	cbz	r2, 800764c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8007646:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800764a:	4790      	blx	r2
}
 800764c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8007650:	f7f9 bc3e 	b.w	8000ed0 <_port_irq_epilogue>
 8007654:	40026400 	.word	0x40026400
 8007658:	20001bbc 	.word	0x20001bbc
 800765c:	00000000 	.word	0x00000000

08007660 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <Vector154+0x24>)
  if (dma.streams[14].func)
 8007662:	4809      	ldr	r0, [pc, #36]	; (8007688 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8007664:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8007666:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8007668:	0c09      	lsrs	r1, r1, #16
 800766a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800766e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8007670:	040c      	lsls	r4, r1, #16
 8007672:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8007674:	b10a      	cbz	r2, 800767a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8007676:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8007678:	4790      	blx	r2
}
 800767a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800767e:	f7f9 bc27 	b.w	8000ed0 <_port_irq_epilogue>
 8007682:	bf00      	nop
 8007684:	40026400 	.word	0x40026400
 8007688:	20001bbc 	.word	0x20001bbc
 800768c:	00000000 	.word	0x00000000

08007690 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8007690:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <Vector150+0x24>)
  if (dma.streams[13].func)
 8007692:	4809      	ldr	r0, [pc, #36]	; (80076b8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8007694:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8007696:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8007698:	0989      	lsrs	r1, r1, #6
 800769a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800769e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80076a0:	018c      	lsls	r4, r1, #6
 80076a2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80076a4:	b10a      	cbz	r2, 80076aa <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 80076a6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80076a8:	4790      	blx	r2
}
 80076aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80076ae:	f7f9 bc0f 	b.w	8000ed0 <_port_irq_epilogue>
 80076b2:	bf00      	nop
 80076b4:	40026400 	.word	0x40026400
 80076b8:	20001bbc 	.word	0x20001bbc
 80076bc:	00000000 	.word	0x00000000

080076c0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80076c0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80076c2:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <Vector130+0x20>)
  if (dma.streams[12].func)
 80076c4:	4807      	ldr	r0, [pc, #28]	; (80076e4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80076c6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 80076c8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80076ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80076ce:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 80076d0:	b10a      	cbz	r2, 80076d6 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 80076d2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80076d4:	4790      	blx	r2
}
 80076d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80076da:	f7f9 bbf9 	b.w	8000ed0 <_port_irq_epilogue>
 80076de:	bf00      	nop
 80076e0:	40026400 	.word	0x40026400
 80076e4:	20001bbc 	.word	0x20001bbc
	...

080076f0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <Vector12C+0x24>)
  if (dma.streams[11].func)
 80076f2:	4809      	ldr	r0, [pc, #36]	; (8007718 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80076f4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 80076f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80076f8:	0d89      	lsrs	r1, r1, #22
 80076fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80076fe:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8007700:	058c      	lsls	r4, r1, #22
 8007702:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8007704:	b10a      	cbz	r2, 800770a <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8007706:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8007708:	4790      	blx	r2
}
 800770a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800770e:	f7f9 bbdf 	b.w	8000ed0 <_port_irq_epilogue>
 8007712:	bf00      	nop
 8007714:	40026400 	.word	0x40026400
 8007718:	20001bbc 	.word	0x20001bbc
 800771c:	00000000 	.word	0x00000000

08007720 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8007720:	4b08      	ldr	r3, [pc, #32]	; (8007744 <Vector128+0x24>)
  if (dma.streams[10].func)
 8007722:	4809      	ldr	r0, [pc, #36]	; (8007748 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8007724:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8007726:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8007728:	0c09      	lsrs	r1, r1, #16
 800772a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800772e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8007730:	040c      	lsls	r4, r1, #16
 8007732:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8007734:	b10a      	cbz	r2, 800773a <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8007736:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8007738:	4790      	blx	r2
}
 800773a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800773e:	f7f9 bbc7 	b.w	8000ed0 <_port_irq_epilogue>
 8007742:	bf00      	nop
 8007744:	40026400 	.word	0x40026400
 8007748:	20001bbc 	.word	0x20001bbc
 800774c:	00000000 	.word	0x00000000

08007750 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <Vector124+0x24>)
  if (dma.streams[9].func)
 8007752:	4809      	ldr	r0, [pc, #36]	; (8007778 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8007754:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8007756:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8007758:	0989      	lsrs	r1, r1, #6
 800775a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800775e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8007760:	018c      	lsls	r4, r1, #6
 8007762:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8007764:	b10a      	cbz	r2, 800776a <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8007766:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8007768:	4790      	blx	r2
}
 800776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800776e:	f7f9 bbaf 	b.w	8000ed0 <_port_irq_epilogue>
 8007772:	bf00      	nop
 8007774:	40026400 	.word	0x40026400
 8007778:	20001bbc 	.word	0x20001bbc
 800777c:	00000000 	.word	0x00000000

08007780 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8007780:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8007782:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <Vector120+0x20>)
  if (dma.streams[8].func)
 8007784:	4807      	ldr	r0, [pc, #28]	; (80077a4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8007786:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8007788:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800778a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800778e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8007790:	b10a      	cbz	r2, 8007796 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8007792:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007794:	4790      	blx	r2
}
 8007796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800779a:	f7f9 bb99 	b.w	8000ed0 <_port_irq_epilogue>
 800779e:	bf00      	nop
 80077a0:	40026400 	.word	0x40026400
 80077a4:	20001bbc 	.word	0x20001bbc
	...

080077b0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80077b0:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <VectorFC+0x24>)
  if (dma.streams[7].func)
 80077b2:	4809      	ldr	r0, [pc, #36]	; (80077d8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80077b4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 80077b6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80077b8:	0d89      	lsrs	r1, r1, #22
 80077ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80077be:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 80077c0:	058c      	lsls	r4, r1, #22
 80077c2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 80077c4:	b10a      	cbz	r2, 80077ca <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 80077c6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80077c8:	4790      	blx	r2
}
 80077ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80077ce:	f7f9 bb7f 	b.w	8000ed0 <_port_irq_epilogue>
 80077d2:	bf00      	nop
 80077d4:	40026000 	.word	0x40026000
 80077d8:	20001bbc 	.word	0x20001bbc
 80077dc:	00000000 	.word	0x00000000

080077e0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80077e0:	4b08      	ldr	r3, [pc, #32]	; (8007804 <Vector84+0x24>)
  if (dma.streams[6].func)
 80077e2:	4809      	ldr	r0, [pc, #36]	; (8007808 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80077e4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 80077e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80077e8:	0c09      	lsrs	r1, r1, #16
 80077ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80077ee:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 80077f0:	040c      	lsls	r4, r1, #16
 80077f2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 80077f4:	b10a      	cbz	r2, 80077fa <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80077f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80077f8:	4790      	blx	r2
}
 80077fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80077fe:	f7f9 bb67 	b.w	8000ed0 <_port_irq_epilogue>
 8007802:	bf00      	nop
 8007804:	40026000 	.word	0x40026000
 8007808:	20001bbc 	.word	0x20001bbc
 800780c:	00000000 	.word	0x00000000

08007810 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8007810:	4b08      	ldr	r3, [pc, #32]	; (8007834 <Vector80+0x24>)
  if (dma.streams[5].func)
 8007812:	4809      	ldr	r0, [pc, #36]	; (8007838 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8007814:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8007816:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8007818:	0989      	lsrs	r1, r1, #6
 800781a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800781e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8007820:	018c      	lsls	r4, r1, #6
 8007822:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8007824:	b10a      	cbz	r2, 800782a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8007826:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007828:	4790      	blx	r2
}
 800782a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800782e:	f7f9 bb4f 	b.w	8000ed0 <_port_irq_epilogue>
 8007832:	bf00      	nop
 8007834:	40026000 	.word	0x40026000
 8007838:	20001bbc 	.word	0x20001bbc
 800783c:	00000000 	.word	0x00000000

08007840 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8007840:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <Vector7C+0x20>)
  if (dma.streams[4].func)
 8007844:	4807      	ldr	r0, [pc, #28]	; (8007864 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8007846:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8007848:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800784a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800784e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8007850:	b10a      	cbz	r2, 8007856 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8007852:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007854:	4790      	blx	r2
}
 8007856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800785a:	f7f9 bb39 	b.w	8000ed0 <_port_irq_epilogue>
 800785e:	bf00      	nop
 8007860:	40026000 	.word	0x40026000
 8007864:	20001bbc 	.word	0x20001bbc
	...

08007870 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8007870:	4b08      	ldr	r3, [pc, #32]	; (8007894 <Vector78+0x24>)
  if (dma.streams[3].func)
 8007872:	4809      	ldr	r0, [pc, #36]	; (8007898 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8007874:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8007876:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8007878:	0d89      	lsrs	r1, r1, #22
 800787a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800787e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8007880:	058c      	lsls	r4, r1, #22
 8007882:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8007884:	b10a      	cbz	r2, 800788a <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8007886:	6a00      	ldr	r0, [r0, #32]
 8007888:	4790      	blx	r2
}
 800788a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800788e:	f7f9 bb1f 	b.w	8000ed0 <_port_irq_epilogue>
 8007892:	bf00      	nop
 8007894:	40026000 	.word	0x40026000
 8007898:	20001bbc 	.word	0x20001bbc
 800789c:	00000000 	.word	0x00000000

080078a0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80078a0:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <Vector74+0x24>)
  if (dma.streams[2].func)
 80078a2:	4809      	ldr	r0, [pc, #36]	; (80078c8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80078a4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80078a6:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80078a8:	0c09      	lsrs	r1, r1, #16
 80078aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80078ae:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80078b0:	040c      	lsls	r4, r1, #16
 80078b2:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 80078b4:	b10a      	cbz	r2, 80078ba <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 80078b6:	6980      	ldr	r0, [r0, #24]
 80078b8:	4790      	blx	r2
}
 80078ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80078be:	f7f9 bb07 	b.w	8000ed0 <_port_irq_epilogue>
 80078c2:	bf00      	nop
 80078c4:	40026000 	.word	0x40026000
 80078c8:	20001bbc 	.word	0x20001bbc
 80078cc:	00000000 	.word	0x00000000

080078d0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80078d0:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <Vector70+0x24>)
  if (dma.streams[1].func)
 80078d2:	4809      	ldr	r0, [pc, #36]	; (80078f8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80078d4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 80078d6:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80078d8:	0989      	lsrs	r1, r1, #6
 80078da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80078de:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 80078e0:	018c      	lsls	r4, r1, #6
 80078e2:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 80078e4:	b10a      	cbz	r2, 80078ea <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 80078e6:	6900      	ldr	r0, [r0, #16]
 80078e8:	4790      	blx	r2
}
 80078ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80078ee:	f7f9 baef 	b.w	8000ed0 <_port_irq_epilogue>
 80078f2:	bf00      	nop
 80078f4:	40026000 	.word	0x40026000
 80078f8:	20001bbc 	.word	0x20001bbc
 80078fc:	00000000 	.word	0x00000000

08007900 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8007900:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8007902:	4b07      	ldr	r3, [pc, #28]	; (8007920 <Vector6C+0x20>)
  if (dma.streams[0].func)
 8007904:	4807      	ldr	r0, [pc, #28]	; (8007924 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8007906:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8007908:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800790a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800790e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8007910:	b10a      	cbz	r2, 8007916 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8007912:	6880      	ldr	r0, [r0, #8]
 8007914:	4790      	blx	r2
}
 8007916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800791a:	f7f9 bad9 	b.w	8000ed0 <_port_irq_epilogue>
 800791e:	bf00      	nop
 8007920:	40026000 	.word	0x40026000
 8007924:	20001bbc 	.word	0x20001bbc
	...

08007930 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8007930:	4b1a      	ldr	r3, [pc, #104]	; (800799c <VectorE0+0x6c>)
OSAL_IRQ_HANDLER(VectorE0) {
 8007932:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8007934:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8007936:	681c      	ldr	r4, [r3, #0]
 8007938:	4014      	ands	r4, r2
 800793a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800793e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8007940:	0562      	lsls	r2, r4, #21
 8007942:	d504      	bpl.n	800794e <VectorE0+0x1e>
 8007944:	4a16      	ldr	r2, [pc, #88]	; (80079a0 <VectorE0+0x70>)
 8007946:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007948:	b10b      	cbz	r3, 800794e <VectorE0+0x1e>
 800794a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800794c:	4798      	blx	r3
  exti_serve_irq(pr, 11);
 800794e:	0523      	lsls	r3, r4, #20
 8007950:	d504      	bpl.n	800795c <VectorE0+0x2c>
 8007952:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <VectorE0+0x70>)
 8007954:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007956:	b10b      	cbz	r3, 800795c <VectorE0+0x2c>
 8007958:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800795a:	4798      	blx	r3
  exti_serve_irq(pr, 12);
 800795c:	04e0      	lsls	r0, r4, #19
 800795e:	d504      	bpl.n	800796a <VectorE0+0x3a>
 8007960:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <VectorE0+0x70>)
 8007962:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8007964:	b10b      	cbz	r3, 800796a <VectorE0+0x3a>
 8007966:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8007968:	4798      	blx	r3
  exti_serve_irq(pr, 13);
 800796a:	04a1      	lsls	r1, r4, #18
 800796c:	d504      	bpl.n	8007978 <VectorE0+0x48>
 800796e:	4a0c      	ldr	r2, [pc, #48]	; (80079a0 <VectorE0+0x70>)
 8007970:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8007972:	b10b      	cbz	r3, 8007978 <VectorE0+0x48>
 8007974:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007976:	4798      	blx	r3
  exti_serve_irq(pr, 14);
 8007978:	0462      	lsls	r2, r4, #17
 800797a:	d504      	bpl.n	8007986 <VectorE0+0x56>
 800797c:	4a08      	ldr	r2, [pc, #32]	; (80079a0 <VectorE0+0x70>)
 800797e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007980:	b10b      	cbz	r3, 8007986 <VectorE0+0x56>
 8007982:	6f50      	ldr	r0, [r2, #116]	; 0x74
 8007984:	4798      	blx	r3
  exti_serve_irq(pr, 15);
 8007986:	0423      	lsls	r3, r4, #16
 8007988:	d504      	bpl.n	8007994 <VectorE0+0x64>
 800798a:	4a05      	ldr	r2, [pc, #20]	; (80079a0 <VectorE0+0x70>)
 800798c:	6f93      	ldr	r3, [r2, #120]	; 0x78
 800798e:	b10b      	cbz	r3, 8007994 <VectorE0+0x64>
 8007990:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 8007992:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8007994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8007998:	f7f9 ba9a 	b.w	8000ed0 <_port_irq_epilogue>
 800799c:	40013c00 	.word	0x40013c00
 80079a0:	2000195c 	.word	0x2000195c
	...

080079b0 <Vector9C>:
  pr = EXTI->PR;
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <Vector9C+0x60>)
OSAL_IRQ_HANDLER(Vector9C) {
 80079b2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 80079b4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 80079b6:	681c      	ldr	r4, [r3, #0]
 80079b8:	4014      	ands	r4, r2
 80079ba:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
 80079be:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 80079c0:	06a3      	lsls	r3, r4, #26
 80079c2:	d504      	bpl.n	80079ce <Vector9C+0x1e>
 80079c4:	4a13      	ldr	r2, [pc, #76]	; (8007a14 <Vector9C+0x64>)
 80079c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80079c8:	b10b      	cbz	r3, 80079ce <Vector9C+0x1e>
 80079ca:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80079cc:	4798      	blx	r3
  exti_serve_irq(pr, 6);
 80079ce:	0660      	lsls	r0, r4, #25
 80079d0:	d504      	bpl.n	80079dc <Vector9C+0x2c>
 80079d2:	4a10      	ldr	r2, [pc, #64]	; (8007a14 <Vector9C+0x64>)
 80079d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80079d6:	b10b      	cbz	r3, 80079dc <Vector9C+0x2c>
 80079d8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80079da:	4798      	blx	r3
  exti_serve_irq(pr, 7);
 80079dc:	0621      	lsls	r1, r4, #24
 80079de:	d504      	bpl.n	80079ea <Vector9C+0x3a>
 80079e0:	4a0c      	ldr	r2, [pc, #48]	; (8007a14 <Vector9C+0x64>)
 80079e2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80079e4:	b10b      	cbz	r3, 80079ea <Vector9C+0x3a>
 80079e6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80079e8:	4798      	blx	r3
  exti_serve_irq(pr, 8);
 80079ea:	05e2      	lsls	r2, r4, #23
 80079ec:	d504      	bpl.n	80079f8 <Vector9C+0x48>
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <Vector9C+0x64>)
 80079f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80079f2:	b10b      	cbz	r3, 80079f8 <Vector9C+0x48>
 80079f4:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80079f6:	4798      	blx	r3
  exti_serve_irq(pr, 9);
 80079f8:	05a3      	lsls	r3, r4, #22
 80079fa:	d504      	bpl.n	8007a06 <Vector9C+0x56>
 80079fc:	4a05      	ldr	r2, [pc, #20]	; (8007a14 <Vector9C+0x64>)
 80079fe:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8007a00:	b10b      	cbz	r3, 8007a06 <Vector9C+0x56>
 8007a02:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8007a04:	4798      	blx	r3
}
 8007a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8007a0a:	f7f9 ba61 	b.w	8000ed0 <_port_irq_epilogue>
 8007a0e:	bf00      	nop
 8007a10:	40013c00 	.word	0x40013c00
 8007a14:	2000195c 	.word	0x2000195c
	...

08007a20 <Vector68>:
  pr = EXTI->PR;
 8007a20:	4a08      	ldr	r2, [pc, #32]	; (8007a44 <Vector68+0x24>)
OSAL_IRQ_HANDLER(Vector68) {
 8007a22:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8007a24:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8007a26:	6813      	ldr	r3, [r2, #0]
 8007a28:	400b      	ands	r3, r1
 8007a2a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8007a2e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
 8007a30:	b123      	cbz	r3, 8007a3c <Vector68+0x1c>
 8007a32:	4a05      	ldr	r2, [pc, #20]	; (8007a48 <Vector68+0x28>)
 8007a34:	6a13      	ldr	r3, [r2, #32]
 8007a36:	b10b      	cbz	r3, 8007a3c <Vector68+0x1c>
 8007a38:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8007a3a:	4798      	blx	r3
}
 8007a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8007a40:	f7f9 ba46 	b.w	8000ed0 <_port_irq_epilogue>
 8007a44:	40013c00 	.word	0x40013c00
 8007a48:	2000195c 	.word	0x2000195c
 8007a4c:	00000000 	.word	0x00000000

08007a50 <Vector64>:
  pr = EXTI->PR;
 8007a50:	4a08      	ldr	r2, [pc, #32]	; (8007a74 <Vector64+0x24>)
OSAL_IRQ_HANDLER(Vector64) {
 8007a52:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8007a54:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8007a56:	6813      	ldr	r3, [r2, #0]
 8007a58:	400b      	ands	r3, r1
 8007a5a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8007a5e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
 8007a60:	b123      	cbz	r3, 8007a6c <Vector64+0x1c>
 8007a62:	4a05      	ldr	r2, [pc, #20]	; (8007a78 <Vector64+0x28>)
 8007a64:	6993      	ldr	r3, [r2, #24]
 8007a66:	b10b      	cbz	r3, 8007a6c <Vector64+0x1c>
 8007a68:	69d0      	ldr	r0, [r2, #28]
 8007a6a:	4798      	blx	r3
}
 8007a6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8007a70:	f7f9 ba2e 	b.w	8000ed0 <_port_irq_epilogue>
 8007a74:	40013c00 	.word	0x40013c00
 8007a78:	2000195c 	.word	0x2000195c
 8007a7c:	00000000 	.word	0x00000000

08007a80 <Vector60>:
  pr = EXTI->PR;
 8007a80:	4a08      	ldr	r2, [pc, #32]	; (8007aa4 <Vector60+0x24>)
OSAL_IRQ_HANDLER(Vector60) {
 8007a82:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8007a84:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8007a86:	6813      	ldr	r3, [r2, #0]
 8007a88:	400b      	ands	r3, r1
 8007a8a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8007a8e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
 8007a90:	b123      	cbz	r3, 8007a9c <Vector60+0x1c>
 8007a92:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <Vector60+0x28>)
 8007a94:	6913      	ldr	r3, [r2, #16]
 8007a96:	b10b      	cbz	r3, 8007a9c <Vector60+0x1c>
 8007a98:	6950      	ldr	r0, [r2, #20]
 8007a9a:	4798      	blx	r3
}
 8007a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8007aa0:	f7f9 ba16 	b.w	8000ed0 <_port_irq_epilogue>
 8007aa4:	40013c00 	.word	0x40013c00
 8007aa8:	2000195c 	.word	0x2000195c
 8007aac:	00000000 	.word	0x00000000

08007ab0 <Vector5C>:
  pr = EXTI->PR;
 8007ab0:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <Vector5C+0x24>)
OSAL_IRQ_HANDLER(Vector5C) {
 8007ab2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8007ab4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	400b      	ands	r3, r1
 8007aba:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 8007abe:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
 8007ac0:	b123      	cbz	r3, 8007acc <Vector5C+0x1c>
 8007ac2:	4a05      	ldr	r2, [pc, #20]	; (8007ad8 <Vector5C+0x28>)
 8007ac4:	6893      	ldr	r3, [r2, #8]
 8007ac6:	b10b      	cbz	r3, 8007acc <Vector5C+0x1c>
 8007ac8:	68d0      	ldr	r0, [r2, #12]
 8007aca:	4798      	blx	r3
}
 8007acc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8007ad0:	f7f9 b9fe 	b.w	8000ed0 <_port_irq_epilogue>
 8007ad4:	40013c00 	.word	0x40013c00
 8007ad8:	2000195c 	.word	0x2000195c
 8007adc:	00000000 	.word	0x00000000

08007ae0 <Vector58>:
  pr = EXTI->PR;
 8007ae0:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <Vector58+0x24>)
OSAL_IRQ_HANDLER(Vector58) {
 8007ae2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8007ae4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8007ae6:	6813      	ldr	r3, [r2, #0]
 8007ae8:	400b      	ands	r3, r1
 8007aea:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 8007aee:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
 8007af0:	b123      	cbz	r3, 8007afc <Vector58+0x1c>
 8007af2:	4a05      	ldr	r2, [pc, #20]	; (8007b08 <Vector58+0x28>)
 8007af4:	6813      	ldr	r3, [r2, #0]
 8007af6:	b10b      	cbz	r3, 8007afc <Vector58+0x1c>
 8007af8:	6850      	ldr	r0, [r2, #4]
 8007afa:	4798      	blx	r3
}
 8007afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8007b00:	f7f9 b9e6 	b.w	8000ed0 <_port_irq_epilogue>
 8007b04:	40013c00 	.word	0x40013c00
 8007b08:	2000195c 	.word	0x2000195c
 8007b0c:	00000000 	.word	0x00000000

08007b10 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8007b10:	b4f0      	push	{r4, r5, r6, r7}
 8007b12:	4f14      	ldr	r7, [pc, #80]	; (8007b64 <__init_ram_areas+0x54>)
 8007b14:	4d14      	ldr	r5, [pc, #80]	; (8007b68 <__init_ram_areas+0x58>)
 8007b16:	4815      	ldr	r0, [pc, #84]	; (8007b6c <__init_ram_areas+0x5c>)
 8007b18:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <__init_ram_areas+0x60>)
 8007b1a:	4916      	ldr	r1, [pc, #88]	; (8007b74 <__init_ram_areas+0x64>)
 8007b1c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8007b20:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8007b22:	4298      	cmp	r0, r3
 8007b24:	d911      	bls.n	8007b4a <__init_ram_areas+0x3a>
 8007b26:	3904      	subs	r1, #4
 8007b28:	461a      	mov	r2, r3
      *p = *tp;
 8007b2a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8007b2e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8007b32:	4290      	cmp	r0, r2
 8007b34:	d8f9      	bhi.n	8007b2a <__init_ram_areas+0x1a>
 8007b36:	1e42      	subs	r2, r0, #1
 8007b38:	1ad2      	subs	r2, r2, r3
 8007b3a:	f022 0203 	bic.w	r2, r2, #3
 8007b3e:	3204      	adds	r2, #4
 8007b40:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8007b42:	429d      	cmp	r5, r3
 8007b44:	d903      	bls.n	8007b4e <__init_ram_areas+0x3e>
      *p = 0;
 8007b46:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8007b4a:	429d      	cmp	r5, r3
 8007b4c:	d8fb      	bhi.n	8007b46 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8007b4e:	4567      	cmp	r7, ip
 8007b50:	d005      	beq.n	8007b5e <__init_ram_areas+0x4e>
 8007b52:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8007b56:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	e7e1      	b.n	8007b22 <__init_ram_areas+0x12>
#endif
}
 8007b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	08008d08 	.word	0x08008d08
 8007b68:	200061b0 	.word	0x200061b0
 8007b6c:	200061b0 	.word	0x200061b0
 8007b70:	200061b0 	.word	0x200061b0
 8007b74:	08009498 	.word	0x08009498
	...

08007b80 <__default_exit>:
  while (true) {
 8007b80:	e7fe      	b.n	8007b80 <__default_exit>
 8007b82:	bf00      	nop
	...

08007b90 <__late_init>:
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
	...

08007ba0 <__core_init>:
}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop

08007ba4 <atoi>:
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	f000 b886 	b.w	8007cb8 <strtol>

08007bac <_strtol_l.isra.0>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	4f40      	ldr	r7, [pc, #256]	; (8007cb4 <_strtol_l.isra.0+0x108>)
 8007bb2:	4681      	mov	r9, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bbc:	5d3e      	ldrb	r6, [r7, r4]
 8007bbe:	f016 0608 	ands.w	r6, r6, #8
 8007bc2:	d1f8      	bne.n	8007bb6 <_strtol_l.isra.0+0xa>
 8007bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8007bc6:	d04f      	beq.n	8007c68 <_strtol_l.isra.0+0xbc>
 8007bc8:	2c2b      	cmp	r4, #43	; 0x2b
 8007bca:	bf0a      	itet	eq
 8007bcc:	f895 b000 	ldrbeq.w	fp, [r5]
 8007bd0:	46a3      	movne	fp, r4
 8007bd2:	1c85      	addeq	r5, r0, #2
 8007bd4:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8007bd8:	b11b      	cbz	r3, 8007be2 <_strtol_l.isra.0+0x36>
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d04b      	beq.n	8007c76 <_strtol_l.isra.0+0xca>
 8007bde:	469e      	mov	lr, r3
 8007be0:	e004      	b.n	8007bec <_strtol_l.isra.0+0x40>
 8007be2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8007be6:	d050      	beq.n	8007c8a <_strtol_l.isra.0+0xde>
 8007be8:	230a      	movs	r3, #10
 8007bea:	469e      	mov	lr, r3
 8007bec:	2700      	movs	r7, #0
 8007bee:	fbb8 fcfe 	udiv	ip, r8, lr
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	fb0e 8a1c 	mls	sl, lr, ip, r8
 8007bf8:	e005      	b.n	8007c06 <_strtol_l.isra.0+0x5a>
 8007bfa:	d029      	beq.n	8007c50 <_strtol_l.isra.0+0xa4>
 8007bfc:	fb0e 4000 	mla	r0, lr, r0, r4
 8007c00:	2701      	movs	r7, #1
 8007c02:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007c06:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8007c0a:	2c09      	cmp	r4, #9
 8007c0c:	d905      	bls.n	8007c1a <_strtol_l.isra.0+0x6e>
 8007c0e:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 8007c12:	2c19      	cmp	r4, #25
 8007c14:	d80b      	bhi.n	8007c2e <_strtol_l.isra.0+0x82>
 8007c16:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	dd0f      	ble.n	8007c3e <_strtol_l.isra.0+0x92>
 8007c1e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8007c22:	d0ee      	beq.n	8007c02 <_strtol_l.isra.0+0x56>
 8007c24:	4584      	cmp	ip, r0
 8007c26:	d2e8      	bcs.n	8007bfa <_strtol_l.isra.0+0x4e>
 8007c28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c2c:	e7e9      	b.n	8007c02 <_strtol_l.isra.0+0x56>
 8007c2e:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 8007c32:	2c19      	cmp	r4, #25
 8007c34:	d803      	bhi.n	8007c3e <_strtol_l.isra.0+0x92>
 8007c36:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	dcef      	bgt.n	8007c1e <_strtol_l.isra.0+0x72>
 8007c3e:	1c7b      	adds	r3, r7, #1
 8007c40:	d00b      	beq.n	8007c5a <_strtol_l.isra.0+0xae>
 8007c42:	b106      	cbz	r6, 8007c46 <_strtol_l.isra.0+0x9a>
 8007c44:	4240      	negs	r0, r0
 8007c46:	b10a      	cbz	r2, 8007c4c <_strtol_l.isra.0+0xa0>
 8007c48:	bb77      	cbnz	r7, 8007ca8 <_strtol_l.isra.0+0xfc>
 8007c4a:	6011      	str	r1, [r2, #0]
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	45a2      	cmp	sl, r4
 8007c52:	dad3      	bge.n	8007bfc <_strtol_l.isra.0+0x50>
 8007c54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c58:	e7d3      	b.n	8007c02 <_strtol_l.isra.0+0x56>
 8007c5a:	2322      	movs	r3, #34	; 0x22
 8007c5c:	f8c9 3000 	str.w	r3, [r9]
 8007c60:	b1fa      	cbz	r2, 8007ca2 <_strtol_l.isra.0+0xf6>
 8007c62:	1e69      	subs	r1, r5, #1
 8007c64:	4640      	mov	r0, r8
 8007c66:	e7f0      	b.n	8007c4a <_strtol_l.isra.0+0x9e>
 8007c68:	f895 b000 	ldrb.w	fp, [r5]
 8007c6c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007c70:	1c85      	adds	r5, r0, #2
 8007c72:	2601      	movs	r6, #1
 8007c74:	e7b0      	b.n	8007bd8 <_strtol_l.isra.0+0x2c>
 8007c76:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8007c7a:	d1b0      	bne.n	8007bde <_strtol_l.isra.0+0x32>
 8007c7c:	7828      	ldrb	r0, [r5, #0]
 8007c7e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007c82:	2858      	cmp	r0, #88	; 0x58
 8007c84:	d006      	beq.n	8007c94 <_strtol_l.isra.0+0xe8>
 8007c86:	469e      	mov	lr, r3
 8007c88:	e7b0      	b.n	8007bec <_strtol_l.isra.0+0x40>
 8007c8a:	782b      	ldrb	r3, [r5, #0]
 8007c8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c90:	2b58      	cmp	r3, #88	; 0x58
 8007c92:	d10b      	bne.n	8007cac <_strtol_l.isra.0+0x100>
 8007c94:	f04f 0e10 	mov.w	lr, #16
 8007c98:	f895 b001 	ldrb.w	fp, [r5, #1]
 8007c9c:	4673      	mov	r3, lr
 8007c9e:	3502      	adds	r5, #2
 8007ca0:	e7a4      	b.n	8007bec <_strtol_l.isra.0+0x40>
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca8:	4680      	mov	r8, r0
 8007caa:	e7da      	b.n	8007c62 <_strtol_l.isra.0+0xb6>
 8007cac:	2308      	movs	r3, #8
 8007cae:	469e      	mov	lr, r3
 8007cb0:	e79c      	b.n	8007bec <_strtol_l.isra.0+0x40>
 8007cb2:	bf00      	nop
 8007cb4:	08008f05 	.word	0x08008f05

08007cb8 <strtol>:
 8007cb8:	b430      	push	{r4, r5}
 8007cba:	4c04      	ldr	r4, [pc, #16]	; (8007ccc <strtol+0x14>)
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	bc30      	pop	{r4, r5}
 8007cc8:	f7ff bf70 	b.w	8007bac <_strtol_l.isra.0>
 8007ccc:	20000858 	.word	0x20000858

08007cd0 <memset>:
 8007cd0:	b4f0      	push	{r4, r5, r6, r7}
 8007cd2:	0786      	lsls	r6, r0, #30
 8007cd4:	d046      	beq.n	8007d64 <memset+0x94>
 8007cd6:	1e54      	subs	r4, r2, #1
 8007cd8:	2a00      	cmp	r2, #0
 8007cda:	d03c      	beq.n	8007d56 <memset+0x86>
 8007cdc:	b2ca      	uxtb	r2, r1
 8007cde:	4603      	mov	r3, r0
 8007ce0:	e001      	b.n	8007ce6 <memset+0x16>
 8007ce2:	3c01      	subs	r4, #1
 8007ce4:	d337      	bcc.n	8007d56 <memset+0x86>
 8007ce6:	f803 2b01 	strb.w	r2, [r3], #1
 8007cea:	079d      	lsls	r5, r3, #30
 8007cec:	d1f9      	bne.n	8007ce2 <memset+0x12>
 8007cee:	2c03      	cmp	r4, #3
 8007cf0:	d92a      	bls.n	8007d48 <memset+0x78>
 8007cf2:	b2cd      	uxtb	r5, r1
 8007cf4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007cf8:	2c0f      	cmp	r4, #15
 8007cfa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007cfe:	d934      	bls.n	8007d6a <memset+0x9a>
 8007d00:	f1a4 0210 	sub.w	r2, r4, #16
 8007d04:	f022 0c0f 	bic.w	ip, r2, #15
 8007d08:	f103 0720 	add.w	r7, r3, #32
 8007d0c:	0916      	lsrs	r6, r2, #4
 8007d0e:	4467      	add	r7, ip
 8007d10:	f103 0210 	add.w	r2, r3, #16
 8007d14:	e942 5504 	strd	r5, r5, [r2, #-16]
 8007d18:	e942 5502 	strd	r5, r5, [r2, #-8]
 8007d1c:	3210      	adds	r2, #16
 8007d1e:	42ba      	cmp	r2, r7
 8007d20:	d1f8      	bne.n	8007d14 <memset+0x44>
 8007d22:	1c72      	adds	r2, r6, #1
 8007d24:	f014 0f0c 	tst.w	r4, #12
 8007d28:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007d2c:	f004 060f 	and.w	r6, r4, #15
 8007d30:	d013      	beq.n	8007d5a <memset+0x8a>
 8007d32:	1f33      	subs	r3, r6, #4
 8007d34:	f023 0303 	bic.w	r3, r3, #3
 8007d38:	3304      	adds	r3, #4
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f842 5b04 	str.w	r5, [r2], #4
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d1fb      	bne.n	8007d3c <memset+0x6c>
 8007d44:	f006 0403 	and.w	r4, r6, #3
 8007d48:	b12c      	cbz	r4, 8007d56 <memset+0x86>
 8007d4a:	b2ca      	uxtb	r2, r1
 8007d4c:	441c      	add	r4, r3
 8007d4e:	f803 2b01 	strb.w	r2, [r3], #1
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d1fb      	bne.n	8007d4e <memset+0x7e>
 8007d56:	bcf0      	pop	{r4, r5, r6, r7}
 8007d58:	4770      	bx	lr
 8007d5a:	4634      	mov	r4, r6
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	2c00      	cmp	r4, #0
 8007d60:	d1f3      	bne.n	8007d4a <memset+0x7a>
 8007d62:	e7f8      	b.n	8007d56 <memset+0x86>
 8007d64:	4614      	mov	r4, r2
 8007d66:	4603      	mov	r3, r0
 8007d68:	e7c1      	b.n	8007cee <memset+0x1e>
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4626      	mov	r6, r4
 8007d6e:	e7e0      	b.n	8007d32 <memset+0x62>

08007d70 <strchr>:
 8007d70:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8007d74:	4603      	mov	r3, r0
 8007d76:	d044      	beq.n	8007e02 <strchr+0x92>
 8007d78:	0782      	lsls	r2, r0, #30
 8007d7a:	d132      	bne.n	8007de2 <strchr+0x72>
 8007d7c:	b470      	push	{r4, r5, r6}
 8007d7e:	6804      	ldr	r4, [r0, #0]
 8007d80:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8007d84:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8007d88:	ea86 0504 	eor.w	r5, r6, r4
 8007d8c:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8007d90:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8007d94:	ea23 0305 	bic.w	r3, r3, r5
 8007d98:	ea22 0204 	bic.w	r2, r2, r4
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8007da2:	d10f      	bne.n	8007dc4 <strchr+0x54>
 8007da4:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007da8:	ea84 0506 	eor.w	r5, r4, r6
 8007dac:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8007db0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8007db4:	ea22 0205 	bic.w	r2, r2, r5
 8007db8:	ea23 0304 	bic.w	r3, r3, r4
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8007dc2:	d0ef      	beq.n	8007da4 <strchr+0x34>
 8007dc4:	7803      	ldrb	r3, [r0, #0]
 8007dc6:	b923      	cbnz	r3, 8007dd2 <strchr+0x62>
 8007dc8:	e036      	b.n	8007e38 <strchr+0xc8>
 8007dca:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d032      	beq.n	8007e38 <strchr+0xc8>
 8007dd2:	4299      	cmp	r1, r3
 8007dd4:	d1f9      	bne.n	8007dca <strchr+0x5a>
 8007dd6:	e030      	b.n	8007e3a <strchr+0xca>
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	d011      	beq.n	8007e00 <strchr+0x90>
 8007ddc:	079a      	lsls	r2, r3, #30
 8007dde:	4618      	mov	r0, r3
 8007de0:	d0cc      	beq.n	8007d7c <strchr+0xc>
 8007de2:	4618      	mov	r0, r3
 8007de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	d1f5      	bne.n	8007dd8 <strchr+0x68>
 8007dec:	4610      	mov	r0, r2
 8007dee:	4770      	bx	lr
 8007df0:	0799      	lsls	r1, r3, #30
 8007df2:	4618      	mov	r0, r3
 8007df4:	d007      	beq.n	8007e06 <strchr+0x96>
 8007df6:	4618      	mov	r0, r3
 8007df8:	3301      	adds	r3, #1
 8007dfa:	7802      	ldrb	r2, [r0, #0]
 8007dfc:	2a00      	cmp	r2, #0
 8007dfe:	d1f7      	bne.n	8007df0 <strchr+0x80>
 8007e00:	4770      	bx	lr
 8007e02:	0782      	lsls	r2, r0, #30
 8007e04:	d1f7      	bne.n	8007df6 <strchr+0x86>
 8007e06:	6802      	ldr	r2, [r0, #0]
 8007e08:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8007e0c:	ea23 0302 	bic.w	r3, r3, r2
 8007e10:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8007e14:	d108      	bne.n	8007e28 <strchr+0xb8>
 8007e16:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8007e1a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8007e1e:	ea23 0302 	bic.w	r3, r3, r2
 8007e22:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8007e26:	d0f6      	beq.n	8007e16 <strchr+0xa6>
 8007e28:	7803      	ldrb	r3, [r0, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0e8      	beq.n	8007e00 <strchr+0x90>
 8007e2e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1fb      	bne.n	8007e2e <strchr+0xbe>
 8007e36:	4770      	bx	lr
 8007e38:	4618      	mov	r0, r3
 8007e3a:	bc70      	pop	{r4, r5, r6}
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop

08007e40 <strpbrk>:
 8007e40:	b430      	push	{r4, r5}
 8007e42:	7804      	ldrb	r4, [r0, #0]
 8007e44:	b1a4      	cbz	r4, 8007e70 <strpbrk+0x30>
 8007e46:	780d      	ldrb	r5, [r1, #0]
 8007e48:	460a      	mov	r2, r1
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	b91d      	cbnz	r5, 8007e56 <strpbrk+0x16>
 8007e4e:	e00a      	b.n	8007e66 <strpbrk+0x26>
 8007e50:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007e54:	b13b      	cbz	r3, 8007e66 <strpbrk+0x26>
 8007e56:	429c      	cmp	r4, r3
 8007e58:	d1fa      	bne.n	8007e50 <strpbrk+0x10>
 8007e5a:	7813      	ldrb	r3, [r2, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bf08      	it	eq
 8007e60:	2000      	moveq	r0, #0
 8007e62:	bc30      	pop	{r4, r5}
 8007e64:	4770      	bx	lr
 8007e66:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8007e6a:	2c00      	cmp	r4, #0
 8007e6c:	d1ec      	bne.n	8007e48 <strpbrk+0x8>
 8007e6e:	e7f4      	b.n	8007e5a <strpbrk+0x1a>
 8007e70:	4620      	mov	r0, r4
 8007e72:	bc30      	pop	{r4, r5}
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <strspn>:
 8007e78:	b470      	push	{r4, r5, r6}
 8007e7a:	7804      	ldrb	r4, [r0, #0]
 8007e7c:	b18c      	cbz	r4, 8007ea2 <strspn+0x2a>
 8007e7e:	780e      	ldrb	r6, [r1, #0]
 8007e80:	4605      	mov	r5, r0
 8007e82:	b15e      	cbz	r6, 8007e9c <strspn+0x24>
 8007e84:	460a      	mov	r2, r1
 8007e86:	4633      	mov	r3, r6
 8007e88:	e002      	b.n	8007e90 <strspn+0x18>
 8007e8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007e8e:	b12b      	cbz	r3, 8007e9c <strspn+0x24>
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	d1fa      	bne.n	8007e8a <strspn+0x12>
 8007e94:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8007e98:	2c00      	cmp	r4, #0
 8007e9a:	d1f2      	bne.n	8007e82 <strspn+0xa>
 8007e9c:	1a28      	subs	r0, r5, r0
 8007e9e:	bc70      	pop	{r4, r5, r6}
 8007ea0:	4770      	bx	lr
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	e7fb      	b.n	8007e9e <strspn+0x26>
 8007ea6:	bf00      	nop

08007ea8 <two_way_long_needle>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	461d      	mov	r5, r3
 8007eb0:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8007eb4:	4681      	mov	r9, r0
 8007eb6:	460f      	mov	r7, r1
 8007eb8:	4690      	mov	r8, r2
 8007eba:	f04f 0301 	mov.w	r3, #1
 8007ebe:	f240 8144 	bls.w	800814a <two_way_long_needle+0x2a2>
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	469c      	mov	ip, r3
 8007ec6:	2400      	movs	r4, #0
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ecc:	e006      	b.n	8007edc <two_way_long_needle+0x34>
 8007ece:	eba3 0c00 	sub.w	ip, r3, r0
 8007ed2:	461c      	mov	r4, r3
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	1863      	adds	r3, r4, r1
 8007ed8:	429d      	cmp	r5, r3
 8007eda:	d910      	bls.n	8007efe <two_way_long_needle+0x56>
 8007edc:	eb08 0200 	add.w	r2, r8, r0
 8007ee0:	f818 6003 	ldrb.w	r6, [r8, r3]
 8007ee4:	5c52      	ldrb	r2, [r2, r1]
 8007ee6:	4296      	cmp	r6, r2
 8007ee8:	d3f1      	bcc.n	8007ece <two_way_long_needle+0x26>
 8007eea:	f000 8082 	beq.w	8007ff2 <two_way_long_needle+0x14a>
 8007eee:	f04f 0c01 	mov.w	ip, #1
 8007ef2:	4661      	mov	r1, ip
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	4464      	add	r4, ip
 8007ef8:	1863      	adds	r3, r4, r1
 8007efa:	429d      	cmp	r5, r3
 8007efc:	d8ee      	bhi.n	8007edc <two_way_long_needle+0x34>
 8007efe:	f8cd c008 	str.w	ip, [sp, #8]
 8007f02:	f04f 0c01 	mov.w	ip, #1
 8007f06:	4661      	mov	r1, ip
 8007f08:	4663      	mov	r3, ip
 8007f0a:	2400      	movs	r4, #0
 8007f0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007f10:	e006      	b.n	8007f20 <two_way_long_needle+0x78>
 8007f12:	eba3 0c06 	sub.w	ip, r3, r6
 8007f16:	461c      	mov	r4, r3
 8007f18:	2101      	movs	r1, #1
 8007f1a:	1863      	adds	r3, r4, r1
 8007f1c:	429d      	cmp	r5, r3
 8007f1e:	d90f      	bls.n	8007f40 <two_way_long_needle+0x98>
 8007f20:	eb08 0201 	add.w	r2, r8, r1
 8007f24:	f818 e003 	ldrb.w	lr, [r8, r3]
 8007f28:	5d92      	ldrb	r2, [r2, r6]
 8007f2a:	4596      	cmp	lr, r2
 8007f2c:	d8f1      	bhi.n	8007f12 <two_way_long_needle+0x6a>
 8007f2e:	d066      	beq.n	8007ffe <two_way_long_needle+0x156>
 8007f30:	f04f 0c01 	mov.w	ip, #1
 8007f34:	4661      	mov	r1, ip
 8007f36:	4626      	mov	r6, r4
 8007f38:	4464      	add	r4, ip
 8007f3a:	1863      	adds	r3, r4, r1
 8007f3c:	429d      	cmp	r5, r3
 8007f3e:	d8ef      	bhi.n	8007f20 <two_way_long_needle+0x78>
 8007f40:	3601      	adds	r6, #1
 8007f42:	f100 0b01 	add.w	fp, r0, #1
 8007f46:	455e      	cmp	r6, fp
 8007f48:	d302      	bcc.n	8007f50 <two_way_long_needle+0xa8>
 8007f4a:	f8cd c008 	str.w	ip, [sp, #8]
 8007f4e:	46b3      	mov	fp, r6
 8007f50:	ab05      	add	r3, sp, #20
 8007f52:	f20d 4214 	addw	r2, sp, #1044	; 0x414
 8007f56:	f843 5f04 	str.w	r5, [r3, #4]!
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d1fb      	bne.n	8007f56 <two_way_long_needle+0xae>
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	f000 80f7 	beq.w	8008152 <two_way_long_needle+0x2aa>
 8007f64:	1e6c      	subs	r4, r5, #1
 8007f66:	ae06      	add	r6, sp, #24
 8007f68:	eb08 0004 	add.w	r0, r8, r4
 8007f6c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8007f70:	9601      	str	r6, [sp, #4]
 8007f72:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007f76:	43d3      	mvns	r3, r2
 8007f78:	442b      	add	r3, r5
 8007f7a:	4443      	add	r3, r8
 8007f7c:	4290      	cmp	r0, r2
 8007f7e:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
 8007f82:	d1f6      	bne.n	8007f72 <two_way_long_needle+0xca>
 8007f84:	9b02      	ldr	r3, [sp, #8]
 8007f86:	465a      	mov	r2, fp
 8007f88:	eb08 0103 	add.w	r1, r8, r3
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	f000 f997 	bl	80082c0 <memcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f040 8081 	bne.w	800809a <two_way_long_needle+0x1f2>
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8007f9e:	1aeb      	subs	r3, r5, r3
 8007fa0:	4682      	mov	sl, r0
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	9205      	str	r2, [sp, #20]
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	eb09 0e06 	add.w	lr, r9, r6
 8007fac:	9a01      	ldr	r2, [sp, #4]
 8007fae:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8007fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb6:	b343      	cbz	r3, 800800a <two_way_long_needle+0x162>
 8007fb8:	f1ba 0f00 	cmp.w	sl, #0
 8007fbc:	d004      	beq.n	8007fc8 <two_way_long_needle+0x120>
 8007fbe:	9a02      	ldr	r2, [sp, #8]
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	9a03      	ldr	r2, [sp, #12]
 8007fc4:	bf38      	it	cc
 8007fc6:	4613      	movcc	r3, r2
 8007fc8:	441e      	add	r6, r3
 8007fca:	f04f 0a00 	mov.w	sl, #0
 8007fce:	1b7b      	subs	r3, r7, r5
 8007fd0:	42b3      	cmp	r3, r6
 8007fd2:	d2e9      	bcs.n	8007fa8 <two_way_long_needle+0x100>
 8007fd4:	eb09 0007 	add.w	r0, r9, r7
 8007fd8:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
 8007fdc:	f000 f9a0 	bl	8008320 <strnlen>
 8007fe0:	4407      	add	r7, r0
 8007fe2:	1b7b      	subs	r3, r7, r5
 8007fe4:	42b3      	cmp	r3, r6
 8007fe6:	d2df      	bcs.n	8007fa8 <two_way_long_needle+0x100>
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8007fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff2:	458c      	cmp	ip, r1
 8007ff4:	bf12      	itee	ne
 8007ff6:	3101      	addne	r1, #1
 8007ff8:	4464      	addeq	r4, ip
 8007ffa:	2101      	moveq	r1, #1
 8007ffc:	e76b      	b.n	8007ed6 <two_way_long_needle+0x2e>
 8007ffe:	4561      	cmp	r1, ip
 8008000:	bf0a      	itet	eq
 8008002:	1864      	addeq	r4, r4, r1
 8008004:	3101      	addne	r1, #1
 8008006:	2101      	moveq	r1, #1
 8008008:	e787      	b.n	8007f1a <two_way_long_needle+0x72>
 800800a:	45d3      	cmp	fp, sl
 800800c:	465b      	mov	r3, fp
 800800e:	bf38      	it	cc
 8008010:	4653      	movcc	r3, sl
 8008012:	42a3      	cmp	r3, r4
 8008014:	d211      	bcs.n	800803a <two_way_long_needle+0x192>
 8008016:	1e59      	subs	r1, r3, #1
 8008018:	199a      	adds	r2, r3, r6
 800801a:	4441      	add	r1, r8
 800801c:	444a      	add	r2, r9
 800801e:	e002      	b.n	8008026 <two_way_long_needle+0x17e>
 8008020:	3301      	adds	r3, #1
 8008022:	42a3      	cmp	r3, r4
 8008024:	d209      	bcs.n	800803a <two_way_long_needle+0x192>
 8008026:	f812 0b01 	ldrb.w	r0, [r2], #1
 800802a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800802e:	4584      	cmp	ip, r0
 8008030:	d0f6      	beq.n	8008020 <two_way_long_needle+0x178>
 8008032:	f1cb 0201 	rsb	r2, fp, #1
 8008036:	4416      	add	r6, r2
 8008038:	e7c6      	b.n	8007fc8 <two_way_long_needle+0x120>
 800803a:	45d3      	cmp	fp, sl
 800803c:	9b05      	ldr	r3, [sp, #20]
 800803e:	d97d      	bls.n	800813c <two_way_long_needle+0x294>
 8008040:	eb0b 0206 	add.w	r2, fp, r6
 8008044:	444a      	add	r2, r9
 8008046:	eb08 010b 	add.w	r1, r8, fp
 800804a:	f8cd b010 	str.w	fp, [sp, #16]
 800804e:	e002      	b.n	8008056 <two_way_long_needle+0x1ae>
 8008050:	4553      	cmp	r3, sl
 8008052:	d016      	beq.n	8008082 <two_way_long_needle+0x1da>
 8008054:	4603      	mov	r3, r0
 8008056:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 800805a:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 800805e:	4584      	cmp	ip, r0
 8008060:	f103 0b01 	add.w	fp, r3, #1
 8008064:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8008068:	d0f2      	beq.n	8008050 <two_way_long_needle+0x1a8>
 800806a:	465b      	mov	r3, fp
 800806c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008070:	f10a 0a01 	add.w	sl, sl, #1
 8008074:	459a      	cmp	sl, r3
 8008076:	d80b      	bhi.n	8008090 <two_way_long_needle+0x1e8>
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800807e:	441e      	add	r6, r3
 8008080:	e7a5      	b.n	8007fce <two_way_long_needle+0x126>
 8008082:	4653      	mov	r3, sl
 8008084:	f10a 0a01 	add.w	sl, sl, #1
 8008088:	459a      	cmp	sl, r3
 800808a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800808e:	d9f3      	bls.n	8008078 <two_way_long_needle+0x1d0>
 8008090:	4670      	mov	r0, lr
 8008092:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8008096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809a:	eba5 030b 	sub.w	r3, r5, fp
 800809e:	455b      	cmp	r3, fp
 80080a0:	bf38      	it	cc
 80080a2:	465b      	movcc	r3, fp
 80080a4:	3301      	adds	r3, #1
 80080a6:	9304      	str	r3, [sp, #16]
 80080a8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80080ac:	9302      	str	r3, [sp, #8]
 80080ae:	f1cb 0301 	rsb	r3, fp, #1
 80080b2:	2600      	movs	r6, #0
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	f445 6a00 	orr.w	sl, r5, #2048	; 0x800
 80080ba:	eb09 0e06 	add.w	lr, r9, r6
 80080be:	9a01      	ldr	r2, [sp, #4]
 80080c0:	f81e 3004 	ldrb.w	r3, [lr, r4]
 80080c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080c8:	b16b      	cbz	r3, 80080e6 <two_way_long_needle+0x23e>
 80080ca:	441e      	add	r6, r3
 80080cc:	1b7b      	subs	r3, r7, r5
 80080ce:	429e      	cmp	r6, r3
 80080d0:	d9f3      	bls.n	80080ba <two_way_long_needle+0x212>
 80080d2:	eb09 0007 	add.w	r0, r9, r7
 80080d6:	4651      	mov	r1, sl
 80080d8:	f000 f922 	bl	8008320 <strnlen>
 80080dc:	4407      	add	r7, r0
 80080de:	1b7b      	subs	r3, r7, r5
 80080e0:	429e      	cmp	r6, r3
 80080e2:	d9ea      	bls.n	80080ba <two_way_long_needle+0x212>
 80080e4:	e780      	b.n	8007fe8 <two_way_long_needle+0x140>
 80080e6:	45a3      	cmp	fp, r4
 80080e8:	d214      	bcs.n	8008114 <two_way_long_needle+0x26c>
 80080ea:	9b02      	ldr	r3, [sp, #8]
 80080ec:	eb0b 0206 	add.w	r2, fp, r6
 80080f0:	eb08 0103 	add.w	r1, r8, r3
 80080f4:	444a      	add	r2, r9
 80080f6:	465b      	mov	r3, fp
 80080f8:	e002      	b.n	8008100 <two_way_long_needle+0x258>
 80080fa:	3301      	adds	r3, #1
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	d209      	bcs.n	8008114 <two_way_long_needle+0x26c>
 8008100:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008104:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8008108:	4584      	cmp	ip, r0
 800810a:	d0f6      	beq.n	80080fa <two_way_long_needle+0x252>
 800810c:	9a03      	ldr	r2, [sp, #12]
 800810e:	4416      	add	r6, r2
 8008110:	441e      	add	r6, r3
 8008112:	e7db      	b.n	80080cc <two_way_long_needle+0x224>
 8008114:	f1bb 0f00 	cmp.w	fp, #0
 8008118:	d012      	beq.n	8008140 <two_way_long_needle+0x298>
 800811a:	eb0b 0106 	add.w	r1, fp, r6
 800811e:	4449      	add	r1, r9
 8008120:	eb08 020b 	add.w	r2, r8, fp
 8008124:	e001      	b.n	800812a <two_way_long_needle+0x282>
 8008126:	4543      	cmp	r3, r8
 8008128:	d00a      	beq.n	8008140 <two_way_long_needle+0x298>
 800812a:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
 800812e:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8008132:	4584      	cmp	ip, r0
 8008134:	4613      	mov	r3, r2
 8008136:	d0f6      	beq.n	8008126 <two_way_long_needle+0x27e>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	e7c6      	b.n	80080ca <two_way_long_needle+0x222>
 800813c:	465b      	mov	r3, fp
 800813e:	e797      	b.n	8008070 <two_way_long_needle+0x1c8>
 8008140:	4670      	mov	r0, lr
 8008142:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8008146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814a:	9302      	str	r3, [sp, #8]
 800814c:	f04f 0b00 	mov.w	fp, #0
 8008150:	e6fe      	b.n	8007f50 <two_way_long_needle+0xa8>
 8008152:	ab06      	add	r3, sp, #24
 8008154:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	e713      	b.n	8007f84 <two_way_long_needle+0xdc>

0800815c <strstr>:
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	460e      	mov	r6, r1
 8008162:	7809      	ldrb	r1, [r1, #0]
 8008164:	b090      	sub	sp, #64	; 0x40
 8008166:	4604      	mov	r4, r0
 8008168:	2900      	cmp	r1, #0
 800816a:	d050      	beq.n	800820e <strstr+0xb2>
 800816c:	7872      	ldrb	r2, [r6, #1]
 800816e:	2a00      	cmp	r2, #0
 8008170:	f000 8082 	beq.w	8008278 <strstr+0x11c>
 8008174:	78b3      	ldrb	r3, [r6, #2]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d04d      	beq.n	8008216 <strstr+0xba>
 800817a:	78f0      	ldrb	r0, [r6, #3]
 800817c:	2800      	cmp	r0, #0
 800817e:	f000 8082 	beq.w	8008286 <strstr+0x12a>
 8008182:	7933      	ldrb	r3, [r6, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d054      	beq.n	8008232 <strstr+0xd6>
 8008188:	4630      	mov	r0, r6
 800818a:	f7f8 fad9 	bl	8000740 <strlen>
 800818e:	4607      	mov	r7, r0
 8008190:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 8008194:	4620      	mov	r0, r4
 8008196:	f000 f8c3 	bl	8008320 <strnlen>
 800819a:	4287      	cmp	r7, r0
 800819c:	d867      	bhi.n	800826e <strstr+0x112>
 800819e:	2ffe      	cmp	r7, #254	; 0xfe
 80081a0:	f200 8085 	bhi.w	80082ae <strstr+0x152>
 80081a4:	eba0 0807 	sub.w	r8, r0, r7
 80081a8:	2240      	movs	r2, #64	; 0x40
 80081aa:	1c79      	adds	r1, r7, #1
 80081ac:	4668      	mov	r0, sp
 80081ae:	44a0      	add	r8, r4
 80081b0:	f7ff fd8e 	bl	8007cd0 <memset>
 80081b4:	b177      	cbz	r7, 80081d4 <strstr+0x78>
 80081b6:	1e72      	subs	r2, r6, #1
 80081b8:	19d5      	adds	r5, r2, r7
 80081ba:	b2f8      	uxtb	r0, r7
 80081bc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80081c0:	a910      	add	r1, sp, #64	; 0x40
 80081c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c6:	440b      	add	r3, r1
 80081c8:	1ab1      	subs	r1, r6, r2
 80081ca:	4401      	add	r1, r0
 80081cc:	42aa      	cmp	r2, r5
 80081ce:	f803 1c40 	strb.w	r1, [r3, #-64]
 80081d2:	d1f3      	bne.n	80081bc <strstr+0x60>
 80081d4:	3c01      	subs	r4, #1
 80081d6:	aa10      	add	r2, sp, #64	; 0x40
 80081d8:	5de3      	ldrb	r3, [r4, r7]
 80081da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081de:	4413      	add	r3, r2
 80081e0:	f813 0c40 	ldrb.w	r0, [r3, #-64]
 80081e4:	4404      	add	r4, r0
 80081e6:	45a0      	cmp	r8, r4
 80081e8:	d203      	bcs.n	80081f2 <strstr+0x96>
 80081ea:	e034      	b.n	8008256 <strstr+0xfa>
 80081ec:	442c      	add	r4, r5
 80081ee:	45a0      	cmp	r8, r4
 80081f0:	d331      	bcc.n	8008256 <strstr+0xfa>
 80081f2:	5de5      	ldrb	r5, [r4, r7]
 80081f4:	ab10      	add	r3, sp, #64	; 0x40
 80081f6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80081fa:	441d      	add	r5, r3
 80081fc:	463a      	mov	r2, r7
 80081fe:	4631      	mov	r1, r6
 8008200:	4620      	mov	r0, r4
 8008202:	f815 5c40 	ldrb.w	r5, [r5, #-64]
 8008206:	f000 f85b 	bl	80082c0 <memcmp>
 800820a:	2800      	cmp	r0, #0
 800820c:	d1ee      	bne.n	80081ec <strstr+0x90>
 800820e:	4620      	mov	r0, r4
 8008210:	b010      	add	sp, #64	; 0x40
 8008212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008216:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800821a:	7802      	ldrb	r2, [r0, #0]
 800821c:	e000      	b.n	8008220 <strstr+0xc4>
 800821e:	4604      	mov	r4, r0
 8008220:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008224:	1c60      	adds	r0, r4, #1
 8008226:	b312      	cbz	r2, 800826e <strstr+0x112>
 8008228:	4299      	cmp	r1, r3
 800822a:	7862      	ldrb	r2, [r4, #1]
 800822c:	d1f7      	bne.n	800821e <strstr+0xc2>
 800822e:	3c01      	subs	r4, #1
 8008230:	e7ed      	b.n	800820e <strstr+0xb2>
 8008232:	7822      	ldrb	r2, [r4, #0]
 8008234:	b1da      	cbz	r2, 800826e <strstr+0x112>
 8008236:	6831      	ldr	r1, [r6, #0]
 8008238:	ba09      	rev	r1, r1
 800823a:	e001      	b.n	8008240 <strstr+0xe4>
 800823c:	4299      	cmp	r1, r3
 800823e:	d008      	beq.n	8008252 <strstr+0xf6>
 8008240:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8008244:	4620      	mov	r0, r4
 8008246:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800824a:	2a00      	cmp	r2, #0
 800824c:	d1f6      	bne.n	800823c <strstr+0xe0>
 800824e:	4299      	cmp	r1, r3
 8008250:	d10d      	bne.n	800826e <strstr+0x112>
 8008252:	1ec4      	subs	r4, r0, #3
 8008254:	e7db      	b.n	800820e <strstr+0xb2>
 8008256:	f818 3007 	ldrb.w	r3, [r8, r7]
 800825a:	eb08 0007 	add.w	r0, r8, r7
 800825e:	b133      	cbz	r3, 800826e <strstr+0x112>
 8008260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008264:	f000 f85c 	bl	8008320 <strnlen>
 8008268:	4480      	add	r8, r0
 800826a:	4544      	cmp	r4, r8
 800826c:	d9b2      	bls.n	80081d4 <strstr+0x78>
 800826e:	2400      	movs	r4, #0
 8008270:	4620      	mov	r0, r4
 8008272:	b010      	add	sp, #64	; 0x40
 8008274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008278:	f7ff fd7a 	bl	8007d70 <strchr>
 800827c:	4604      	mov	r4, r0
 800827e:	4620      	mov	r0, r4
 8008280:	b010      	add	sp, #64	; 0x40
 8008282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008286:	0412      	lsls	r2, r2, #16
 8008288:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800828c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8008290:	7822      	ldrb	r2, [r4, #0]
 8008292:	e000      	b.n	8008296 <strstr+0x13a>
 8008294:	462c      	mov	r4, r5
 8008296:	ea42 0100 	orr.w	r1, r2, r0
 800829a:	1c65      	adds	r5, r4, #1
 800829c:	0208      	lsls	r0, r1, #8
 800829e:	2a00      	cmp	r2, #0
 80082a0:	d0e5      	beq.n	800826e <strstr+0x112>
 80082a2:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 80082a6:	7862      	ldrb	r2, [r4, #1]
 80082a8:	d1f4      	bne.n	8008294 <strstr+0x138>
 80082aa:	3c02      	subs	r4, #2
 80082ac:	e7af      	b.n	800820e <strstr+0xb2>
 80082ae:	4601      	mov	r1, r0
 80082b0:	463b      	mov	r3, r7
 80082b2:	4620      	mov	r0, r4
 80082b4:	4632      	mov	r2, r6
 80082b6:	f7ff fdf7 	bl	8007ea8 <two_way_long_needle>
 80082ba:	4604      	mov	r4, r0
 80082bc:	e7a7      	b.n	800820e <strstr+0xb2>
 80082be:	bf00      	nop

080082c0 <memcmp>:
 80082c0:	2a03      	cmp	r2, #3
 80082c2:	b470      	push	{r4, r5, r6}
 80082c4:	d912      	bls.n	80082ec <memcmp+0x2c>
 80082c6:	ea40 0501 	orr.w	r5, r0, r1
 80082ca:	07ad      	lsls	r5, r5, #30
 80082cc:	4604      	mov	r4, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	d11e      	bne.n	8008310 <memcmp+0x50>
 80082d2:	4619      	mov	r1, r3
 80082d4:	4620      	mov	r0, r4
 80082d6:	f853 5b04 	ldr.w	r5, [r3], #4
 80082da:	f854 6b04 	ldr.w	r6, [r4], #4
 80082de:	42ae      	cmp	r6, r5
 80082e0:	d116      	bne.n	8008310 <memcmp+0x50>
 80082e2:	3a04      	subs	r2, #4
 80082e4:	2a03      	cmp	r2, #3
 80082e6:	4620      	mov	r0, r4
 80082e8:	4619      	mov	r1, r3
 80082ea:	d8f2      	bhi.n	80082d2 <memcmp+0x12>
 80082ec:	1e56      	subs	r6, r2, #1
 80082ee:	b1a2      	cbz	r2, 800831a <memcmp+0x5a>
 80082f0:	3901      	subs	r1, #1
 80082f2:	1e44      	subs	r4, r0, #1
 80082f4:	e001      	b.n	80082fa <memcmp+0x3a>
 80082f6:	18c3      	adds	r3, r0, r3
 80082f8:	d00c      	beq.n	8008314 <memcmp+0x54>
 80082fa:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80082fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008302:	4295      	cmp	r5, r2
 8008304:	eba6 0304 	sub.w	r3, r6, r4
 8008308:	d0f5      	beq.n	80082f6 <memcmp+0x36>
 800830a:	1aa8      	subs	r0, r5, r2
 800830c:	bc70      	pop	{r4, r5, r6}
 800830e:	4770      	bx	lr
 8008310:	1e56      	subs	r6, r2, #1
 8008312:	e7ed      	b.n	80082f0 <memcmp+0x30>
 8008314:	4618      	mov	r0, r3
 8008316:	bc70      	pop	{r4, r5, r6}
 8008318:	4770      	bx	lr
 800831a:	4610      	mov	r0, r2
 800831c:	e7f6      	b.n	800830c <memcmp+0x4c>
 800831e:	bf00      	nop

08008320 <strnlen>:
 8008320:	b181      	cbz	r1, 8008344 <strnlen+0x24>
 8008322:	b410      	push	{r4}
 8008324:	4603      	mov	r3, r0
 8008326:	1844      	adds	r4, r0, r1
 8008328:	e001      	b.n	800832e <strnlen+0xe>
 800832a:	42a3      	cmp	r3, r4
 800832c:	d007      	beq.n	800833e <strnlen+0x1e>
 800832e:	461a      	mov	r2, r3
 8008330:	3301      	adds	r3, #1
 8008332:	7811      	ldrb	r1, [r2, #0]
 8008334:	2900      	cmp	r1, #0
 8008336:	d1f8      	bne.n	800832a <strnlen+0xa>
 8008338:	1a10      	subs	r0, r2, r0
 800833a:	bc10      	pop	{r4}
 800833c:	4770      	bx	lr
 800833e:	1a18      	subs	r0, r3, r0
 8008340:	bc10      	pop	{r4}
 8008342:	4770      	bx	lr
 8008344:	4608      	mov	r0, r1
 8008346:	4770      	bx	lr
